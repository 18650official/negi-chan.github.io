<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>速记——将可执行文件注册为服务</title>
      <link href="/2024/09/03/%E9%80%9F%E8%AE%B0%E2%80%94%E2%80%94%E5%B0%86%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B3%A8%E5%86%8C%E4%B8%BA%E6%9C%8D%E5%8A%A1/"/>
      <url>/2024/09/03/%E9%80%9F%E8%AE%B0%E2%80%94%E2%80%94%E5%B0%86%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B3%A8%E5%86%8C%E4%B8%BA%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇笔记记录了如何将可执行文件注册为系统服务，以便使用<code>systemctl</code>执行和管理。假设文件的路径为<code>/usr/local/test</code>。</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>要在Linux系统中将一个二进制可执行文件注册为服务，通常可以使用 <code>systemd</code> 系统和服务管理器。<code>systemd</code> 是现代Linux发行版中广泛使用的初始化系统和服务管理工具。</p><h2 id="1-创建-systemd-服务单元文件"><a href="#1-创建-systemd-服务单元文件" class="headerlink" title="1. 创建 systemd 服务单元文件"></a>1. 创建 <code>systemd</code> 服务单元文件</h2><p>首先，你需要创建一个 <code>systemd</code> 服务单元文件，该文件描述了如何启动、停止和服务的行为。</p><h3 id="创建服务单元文件"><a href="#创建服务单元文件" class="headerlink" title="创建服务单元文件"></a>创建服务单元文件</h3><ol><li><p><strong>创建服务单元文件</strong>:</p><ul><li>在 <code>/etc/systemd/system</code> 目录下创建一个新的服务单元文件，例如 <code>test.service</code>。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>编辑服务单元文件</strong>:</p><ul><li>在文件中添加以下内容：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Test Service</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/test/test</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/usr/local/test</span><br><span class="line"><span class="attr">User</span>=&lt;username&gt;</span><br><span class="line"><span class="attr">Group</span>=&lt;groupname&gt;</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><ul><li><p><strong>解释配置项</strong>:</p><ul><li><code>[Unit]</code> 部分描述了服务的依赖关系和描述信息。</li><li><code>[Service]</code> 部分描述了服务的实际启动命令和其他运行参数。<ul><li><code>ExecStart</code> 指定了服务启动时执行的命令路径。</li><li><code>WorkingDirectory</code> 指定了服务的工作目录。</li><li><code>User</code> 和 <code>Group</code> 指定了服务运行时的用户和组。</li><li><code>Restart</code> 指定了服务在异常退出后的重启策略。</li></ul></li><li><code>[Install]</code> 部分描述了服务的启动级别和依赖关系。</li></ul></li><li><p><strong>替换 <code>&lt;username&gt;</code> 和 <code>&lt;groupname&gt;</code></strong>:</p><ul><li>将 <code>&lt;username&gt;</code> 替换为你希望服务运行的用户名。</li><li>将 <code>&lt;groupname&gt;</code> 替换为你希望服务运行的组名。</li></ul></li></ul></li></ol><h2 id="2-重新加载-systemd-配置"><a href="#2-重新加载-systemd-配置" class="headerlink" title="2. 重新加载 systemd 配置"></a>2. 重新加载 <code>systemd</code> 配置</h2><p>创建完服务单元文件后，需要重新加载 <code>systemd</code> 配置以使其生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><h2 id="3-启动、启用和管理服务"><a href="#3-启动、启用和管理服务" class="headerlink" title="3. 启动、启用和管理服务"></a>3. 启动、启用和管理服务</h2><ol><li><p><strong>启动服务</strong>:</p><ul><li>使用 <code>systemctl start</code> 命令启动服务：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>启用服务</strong>:</p><ul><li>使用 <code>systemctl enable</code> 命令使服务在系统启动时自动启动：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>检查服务状态</strong>:</p><ul><li>使用 <code>systemctl status</code> 命令检查服务的状态：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>停止服务</strong>:</p><ul><li>使用 <code>systemctl stop</code> 命令停止服务：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>禁用服务</strong>:</p><ul><li>使用 <code>systemctl disable</code> 命令禁用服务，使其不再在系统启动时自动启动：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> test.service</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-验证服务"><a href="#4-验证服务" class="headerlink" title="4. 验证服务"></a>4. 验证服务</h2><ol><li><p><strong>查看服务日志</strong>:</p><ul><li>使用 <code>journalctl</code> 命令查看服务的日志：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo journalctl -u test.service</span><br></pre></td></tr></table></figure><p>这将显示服务的日志，可以帮助你诊断问题。</p></li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>假设你有一个名为 <code>test</code> 的二进制可执行文件位于 <code>/usr/local/test</code> 目录下，你可以按照以下步骤进行：</p><ol><li><p><strong>创建服务单元文件</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>编辑服务单元文件</strong>:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Test Service</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/test/test</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/usr/local/test</span><br><span class="line"><span class="attr">User</span>=yourusername</span><br><span class="line"><span class="attr">Group</span>=yourgroupname</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>将 <code>yourusername</code> 替换为你希望服务运行的用户名。</li><li>将 <code>yourgroupname</code> 替换为你希望服务运行的组名。</li></ul></li><li><p><strong>重新加载 <code>systemd</code> 配置</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p><strong>启动服务</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>启用服务</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>检查服务状态</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status test.service</span><br></pre></td></tr></table></figure></li></ol><p>通过上述步骤，你可以将一个二进制可执行文件注册为Linux系统的服务，并管理其启动、停止和其他行为。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新日记——基于阿里云服务器搭建一个Alist网盘页面</title>
      <link href="/2024/09/01/%E6%9B%B4%E6%96%B0%E6%97%A5%E8%AE%B0%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAAlist%E7%BD%91%E7%9B%98%E9%A1%B5%E9%9D%A2/"/>
      <url>/2024/09/01/%E6%9B%B4%E6%96%B0%E6%97%A5%E8%AE%B0%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAAlist%E7%BD%91%E7%9B%98%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>注意：资源站对应的二级域名由于连接到国内服务器，因此需要申请备案.之后，访问 snowmiku-drive.top 即可进入葱酱的资源下载界面。<br>现在，你可以从顶栏（移动端为菜单）中的资源-&gt;资源库按钮导航到资源库，并访问其中的<code>公有文件夹</code>。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Alist是一款适用于百度云、腾讯云、OneDrive等多种网络存储介质的文件整合和下载系统，通过Alist，我们可以方便的上传和下载文件，也可以用浏览器将文件便捷的从一台设备传输到另一台设备。<br>前段时间，笔者在使用一台年代久远的iPhone 4手机时，就遇到了文件传输的问题。在系统无法安装绝大多数现代软件，手机本身又不支持蓝牙传输文件的限制条件下，通过浏览器上传文件成为了一种方便且成本较低的方案。加上笔者想丰富下自己博客的功能，顺便练习Linux服务器的使用，以及熟悉基本的网络编程知识，我通宵一个晚上完成了这个从头到尾的配置，也经历了很多离奇的Debug过程。我将把调试的整个流程简要的在这篇文章中展现出来，供需要搭建个人网盘的小伙伴学习，大家也可以在评论区留下自己的想法。</p><h1 id="你需要准备的"><a href="#你需要准备的" class="headerlink" title="你需要准备的"></a>你需要准备的</h1><ul><li>阿里云服务器</li><li>PuTTY 终端连接软件</li><li>VSCode 代码编辑器（可选）</li><li>CloudFlare</li></ul><h1 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h1><p>首先，我们需要将服务端软件部署在一台连接互联网的服务器上。</p><h2 id="购买服务"><a href="#购买服务" class="headerlink" title="购买服务"></a>购买服务</h2><p>你需要购买阿里云提供的服务，以获得一台虚拟服务器的IP地址，完成后续的一切操作。访问<a href="https://aliyun.com/">阿里云官网</a>，选择一款合适的服务器套餐并订购，根据指引进入控制台页面，此处会要求用户输入密码，这个密码就是Linux的登录密钥。笔者选择的操作系统是<code>Ubuntu Server</code>。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-03%20024018.png?imageSlim" alt="1"></p><p>在一切配置完成后，控制台的“概览”界面就会出现服务器的信息，我们复制服务器的公网IP地址。</p><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>打开<code>PuTTY</code>客户端，在右侧会有要求输入主机名的提示框，输入后按<code>Enter</code>，即可打开命令行界面。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-03%20024619.png?imageSlim" alt="2"></p><p>若可以成功连接，此时会要求输入用户名（即为<code>root</code>）和密码。输入完成，即可进入Ubuntu的命令行界面。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-03%20025018.png?imageSlim" alt="3"></p><h2 id="服务端基础配置"><a href="#服务端基础配置" class="headerlink" title="服务端基础配置"></a>服务端基础配置</h2><h3 id="必要环境的配置"><a href="#必要环境的配置" class="headerlink" title="必要环境的配置"></a>必要环境的配置</h3><p>在初始化服务端后，我们需要进行一些基础的配置。<br>首先，更新系统包，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade -y</span><br></pre></td></tr></table></figure><p>安装必要的软件包：安装 apt-transport-https、ca-certificates、curl 和 software-properties-common：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>我们需要安装<code>nginx</code>软件实施反向代理，将Alist端口的数据转发到<code>http</code>端口上。<br><strong>创建文件夹</strong>：执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"><span class="built_in">mkdir</span> nginx</span><br></pre></td></tr></table></figure><p><strong>下载和解压文件</strong>：从官网下载以<code>.tar.gz</code>结尾的文件，并解压到这个目录，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.20.2.tar.gz</span><br><span class="line">tar -zxvf nginx-1.20.2.tar.gz</span><br></pre></td></tr></table></figure><p>解压缩后，我们会获得一个名为<code>nginx-1.20.2</code>的子目录，里面存放了nginx的源文件。</p><p><strong>安装依赖</strong>：执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc make libpcre3-dev zlib1g-dev openssl libssl-dev</span><br></pre></td></tr></table></figure><p><strong>编译并安装nginx</strong>：执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-http_ssl_module  <span class="comment"># 生成编译脚本</span></span><br><span class="line">make  <span class="comment">#编译</span></span><br><span class="line">make install  <span class="comment"># 编译完成，安装文件</span></span><br><span class="line"><span class="comment"># 以下代码验证是否安装成功</span></span><br><span class="line"><span class="built_in">ls</span> /usr/local/nginx -l</span><br><span class="line"><span class="built_in">ls</span> /usr/local/nginx/sbin -l</span><br></pre></td></tr></table></figure><p><strong>设置权限和启动程序</strong>：<br>首先，创建一个<code>nginx.service</code>文件，用<code>vim</code>打开，粘贴以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Description=nginx - high performance web server</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后，执行以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> nginx.service  /etc/systemd/system/</span><br><span class="line"><span class="built_in">cd</span>  /etc/systemd/system/</span><br><span class="line"><span class="built_in">chmod</span> 777 nginx.service</span><br><span class="line">systemctl daemon-reload  <span class="comment"># 配置重新加载</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx.service  <span class="comment"># 自启动</span></span><br><span class="line">systemctl start nginx.service  <span class="comment"># 启动</span></span><br><span class="line">systemctl status nginx.service  <span class="comment"># 查看状态</span></span><br></pre></td></tr></table></figure><p>到这里，我们的nginx就启动完成了。</p><h3 id="安装Alist"><a href="#安装Alist" class="headerlink" title="安装Alist"></a>安装Alist</h3><p>根据<code>Alist</code>的(官方文档)[<a href="https://alist.nn.ci/zh/guide/install/]%EF%BC%8C%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E6%9C%89%E7%9B%B4%E6%8E%A5%E5%AE%89%E8%A3%85%E3%80%81%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E3%80%81Docker%E5%AE%89%E8%A3%85%E5%87%A0%E7%A7%8D%E5%BD%A2%E5%BC%8F%E3%80%82%E7%AC%94%E8%80%85%E8%BE%83%E4%B8%BA%E6%8E%A8%E8%8D%90%E8%BF%9B%E8%A1%8CDocker%E5%AE%89%E8%A3%85%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E5%AF%B9%E5%AE%89%E8%A3%85%E5%AE%B9%E5%99%A8%E5%8D%95%E7%8B%AC%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86%EF%BC%8C%E4%B8%94%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8D%E4%BC%9A%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%BA%A7%E7%94%9F%E6%AE%8B%E7%95%99%E3%80%82%E4%BD%86%E7%94%B1%E4%BA%8EDocker">https://alist.nn.ci/zh/guide/install/]，在服务器安装有直接安装、脚本安装、Docker安装几种形式。笔者较为推荐进行Docker安装，这种方法可以对安装容器单独进行管理，且配置文件不会在系统产生残留。但由于Docker</a> Hub的连接问题以及不熟悉操作等原因，笔者在Docker安装的Alist一直未能被成功访问，最终，笔者选择了进行脚本安装。<br>若将Alist安装在<code>~/alist</code>文件夹下，执行这条指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s install /root</span><br></pre></td></tr></table></figure><p>安装操作会自动完成，一般的，服务运行在端口<code>5244</code>，我们可以执行<code>netstat -tulnp | grep 5244</code>查看监听5244端口的服务。<br>接下来，我们需要为Alist设置登录密码，在最新版的Alist中，密码无法被反算出来，若使用随机密码，请务必牢记。<br><strong>方法1：手动密码</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./alist admin <span class="built_in">set</span> &lt;YOUR_PSWD&gt;</span><br></pre></td></tr></table></figure><p><strong>方法2：随机生成</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./alist admin random</span><br></pre></td></tr></table></figure><p>终端将返回一个新的密码。</p><h3 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h3><p>此时，虽然nginx和Alist均启动，但使用浏览器访问（也就是http对应的80端口）仍旧没有反应。此时，我们首先应该在阿里云的服务器管理界面中的“安全组”设置中允许<code>80</code>，<code>5244</code>端口的数据，具体操作见下图：</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-03%20033124.png?imageSlim" alt="4"></p><p>在浏览器输入<code>&lt;IP&gt;:5244</code>即可打开用户界面。<br>当然，如果想直接通过服务器IP访问网站，我们可以在CloudFlare中设置一个端口转发（后文会讲），也可以在nginx进行反向代理设置（二选一）。<br>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/conf</span><br><span class="line">sudo vim ./nginx.conf</span><br></pre></td></tr></table></figure><p>在文本编辑器中，你将会看到类似C语言的代码块，请在<code>http</code>块内的<code>server</code>块内做出如下修改：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span> /data/www/example.com;</span><br><span class="line">            <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">            <span class="comment"># 在下方添加</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://localhost:5244;  <span class="comment"># 假设Alist监听在5244端口</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>保存，然后执行指令验证且重启nginx。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br><span class="line">./nginx -t  <span class="comment"># 验证配置文件</span></span><br><span class="line">./nginx -s reload  <span class="comment"># 重新加载nginx配置</span></span><br></pre></td></tr></table></figure><p>此时，在浏览器输入IP地址，即可成功访问用户界面了。</p><h1 id="网页端配置"><a href="#网页端配置" class="headerlink" title="网页端配置"></a>网页端配置</h1><p>进入后，默认不允许游客的访问，我们需要输入在Linux中生成的密码进行登录。<br>一开始，Alist的界面是空的，点击下方的“设置”按钮，进入后台，按照上述的Alist文档绑定你的云服务产品，此处不再赘述。另外，设置中还可以分配不同类型用户的访问操作权限，以及更换网站的Logo等。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>我的域名（snowmiku-home.top）托管在CloudFlare，进入域名的管理界面（此处不同运营商的界面会不同）。<br>由于我们只有一个服务器的IP地址，因此我们添加一个<code>A记录</code>，内容如下：</p><ul><li>类型：A</li><li>名称：drive</li><li>IPv4：你的服务器IP</li></ul><p>保存，就可以从域名连接到网盘了。</p><blockquote><p>啊…更新一下，境外域名备案不了，我重新买了一个域名<code>snowmiku-drive.top</code>，用上述方法添加<code>www</code>和<code>@</code>的A记录即可。</p></blockquote><p>最终，我们将这个链接按照文档规范插入博客的选项卡配置单内，重新Deploy，即可从个人博客直接打开Alist界面了。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-03%20035234.png?imageSlim" alt="示例图"></p><p>啊啊啊…我好健忘，那个…配置端口转发的教程看这个视频好了，最前面的3分钟：<a href="https://www.bilibili.com/video/BV1ni8ze2E1C/">点击跳转</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实是很简单的服务器操作，我也不知道为啥整了这么久，顺带学会了一堆Linux服务器常用的维护操作（<br>项目果然是最大的生产力啊（划掉<br>希望这篇文章对大家有帮助！<del><em>博主休息一天去选小裙子惹</em></del></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>Ubuntu 系统下安装nginx: <a href="https://blog.csdn.net/ZhangXS9722/article/details/137098271">https://blog.csdn.net/ZhangXS9722/article/details/137098271</a></li><li>Alist 官方文档：<a href="https://alist.nn.ci/zh/">https://alist.nn.ci/zh/</a></li><li>Ailst 简易部署教程：<a href="https://blog.csdn.net/weixin_39829577/article/details/138058961?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_39829577/article/details/138058961?spm=1001.2014.3001.5501</a></li><li>Docker教程：<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">https://www.runoob.com/docker/ubuntu-docker-install.html</a></li><li>Docker连接错误的解决方案：<a href="https://blog.csdn.net/weixin_46203834/article/details/140556611">https://blog.csdn.net/weixin_46203834/article/details/140556611</a></li><li>此外，关于Bug修复、Linux基础操作的一些资料来自通义千问AI。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Technologies </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 个人网盘 </tag>
            
            <tag> 资源站 </tag>
            
            <tag> 新手教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>速记——用Python实现的正则表达式</title>
      <link href="/2024/09/01/%E9%80%9F%E8%AE%B0%E2%80%94%E2%80%94%E7%94%A8Python%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/09/01/%E9%80%9F%E8%AE%B0%E2%80%94%E2%80%94%E7%94%A8Python%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h1><p>‌正则表达式（‌Regular Expression，简称‌regex）是一种强大的文本处理工具，用于描述、匹配一系列符合特定规则的字符串。它通过使用普通字符和特殊字符（称为元字符）的组合，来定义一个文本模式，从而实现对字符串的搜索、替换等操作。正则表达式在计算机科学中有着广泛的应用，几乎所有现代编程语言都支持正则表达式的使用，包括但不限于‌Java、‌JavaScript、‌Python等。</p><h1 id="正则表达式在-Python-中的基本应用"><a href="#正则表达式在-Python-中的基本应用" class="headerlink" title="正则表达式在 Python 中的基本应用"></a>正则表达式在 Python 中的基本应用</h1><p>使用正则表达式，首先需要引入一个包<code>re</code>。<br>Python中，正则表达式的匹配方法分为三种，分别为<code>match</code>，<code>search</code>，<code>findall</code>。以上的方法都接收两个参数，第一个为需要匹配的字符串或正则表达式，第二个为目标字符串。</p><p><strong>match方法</strong>：从头开始匹配，匹配一次。若目标字符串的开头没有与表达式匹配的元素，返回<code>None</code>。<br><strong>search方法</strong>：从头开始寻找，当查询到第一个符合的位置时，返回找到的元素并停止。<br><strong>findall方法</strong>：查找所有匹配的元素，并全部返回。</p><h1 id="正则表达式的语法"><a href="#正则表达式的语法" class="headerlink" title="正则表达式的语法"></a>正则表达式的语法</h1><h2 id="单字符的规则"><a href="#单字符的规则" class="headerlink" title="单字符的规则"></a>单字符的规则</h2><p>以下组合均代表一个字符。</p><ul><li><code>.</code>：代表任意的字符，其中<code>\.</code>代表点本身。</li><li><code>[]</code>：代表属于括号内范围的字符，其中若表示区间，用“-”表示，不同字符之间不带空格。比如<code>[1-7a-dA-Z]</code>。</li><li><code>\d</code>：表示数字0-9。</li><li><code>\D</code>：表示非数字。</li><li><code>\s</code>：表示空白（空格或Tab）。</li><li><code>\S</code>：表示非空白。</li><li><code>\w</code>：表示单词字符（大小写，数字和下划线）</li><li><code>\W</code>：表示非单词字符。</li></ul><p>注意，由于反斜杠在字符串中代表转义字符，因此在代码中需要用“r”来取消对转义字符的识别，示例如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;abcdefg1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">r&#x27;^[a-g]+\d$&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="字符长度限制规则"><a href="#字符长度限制规则" class="headerlink" title="字符长度限制规则"></a>字符长度限制规则</h2><p>以下表达式表示了对前者字符数量的限制：</p><ul><li><code>*</code>：表示0到无数个</li><li><code>+</code>：表示1到无数个</li><li><code>?</code>：表示0或1个</li><li><code>&#123;m&#125;</code>：表示该字符只能出现m次</li><li><code>&#123;m,&#125;</code>：表示该字符最少出现m次</li><li><code>&#123;m,n&#125;</code>：表示出现m到n次（其中包含n）</li></ul><blockquote><p>需要注意的是，正则的语法中，对空格的限制较为严格，如上述的表达式<code>&#123;m,n&#125;</code>，不能出现任何空格，否则匹配无效。</p></blockquote><h2 id="边界限制"><a href="#边界限制" class="headerlink" title="边界限制"></a>边界限制</h2><p>以下表达式限制了字段的边界，即规定查询整个字符串还是字符串的子串。</p><ul><li><code>^</code>：表示字符串开头</li><li><code>$</code>：表示字符串结尾</li><li><code>\b</code>：表示单词边界</li><li><code>\B</code>：表示非单词边界</li></ul><h2 id="分组和选择"><a href="#分组和选择" class="headerlink" title="分组和选择"></a>分组和选择</h2><ul><li><code>()</code>：表示这是一个单独的字符串分组，在父级表达式中视作一个字符</li><li><code>|</code>：在括号内使用，表示“或”。</li></ul><h1 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h1><p><strong>题目：</strong>用正则表达式判定一个字符串是QQ号，长度为5-11位，第一位不能为0.<br><strong>代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line">r = <span class="string">r&#x27;^[1-9][0-9]&#123;4,10&#125;$&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(r, s))</span><br></pre></td></tr></table></figure><p><strong>题目：</strong>用正则表达式判定一个字符串是电子邮件，电子邮件的规范为<code>xxx[.xxx.xxx]@xxx[.xxx.xxx].xxx</code><br><strong>代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;1352218398a@gmail.com&#x27;</span></span><br><span class="line">r = <span class="string">r&#x27;(^\w+(\.\w+)*@(qq|gmail|163)(\.\w+)$)&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(r, s))</span><br></pre></td></tr></table></figure><p>代码返回的结果如下：<br><code>&lt;re.Match object; span=(0, 21), match=&#39;1352218398a@gmail.com&#39;&gt;</code></p><p>这个代码中，<code>\w+</code>表示至少一个单词字符，<code>(\.\w+)*</code>表示可以存在由点号和至少一个字符组成的后缀，<code>(qq|gmail|163)</code>表示可选三种字段中的任意一个。<br>注意：<code>findall()</code>方法会将每一个分组列出，对于存在多个分组的表达式，应选择<code>match</code>方法，并且在表达式两边加上括号。</p><p><em>（润啦，最近的Python基础告一段落！）</em></p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> 字符匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>速记——MySQL基础语法</title>
      <link href="/2024/08/30/%E9%80%9F%E8%AE%B0%E2%80%94%E2%80%94MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/08/30/%E9%80%9F%E8%AE%B0%E2%80%94%E2%80%94MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h1><p>SQL（Structured Query Language，结构化查询语言）是一种专门用于管理和操作关系型数据库的标准编程语言。SQL 用于在数据库中执行各种操作，包括数据查询、数据定义、数据操纵和数据控制。</p><h1 id="SQL的分类"><a href="#SQL的分类" class="headerlink" title="SQL的分类"></a>SQL的分类</h1><p>SQL 主要用于以下几类操作：</p><p><strong>数据查询（Data Querying）：</strong><br>通过 SELECT 语句从数据库表中检索数据。</p><p><strong>数据定义（Data Definition）：</strong><br>通过 CREATE、ALTER 和 DROP 语句创建、修改和删除数据库对象（如表、视图、索引等）。</p><p><strong>数据操纵（Data Manipulation）：</strong><br>通过 INSERT、UPDATE 和 DELETE 语句插入、更新和删除数据。</p><p><strong>数据控制（Data Control）：</strong><br>通过 GRANT 和 REVOKE 语句管理用户的权限。</p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>笔者使用的环境是 MySQL8.0 以及 DBeaver 可视化界面。</p><h1 id="常见的SQL语法"><a href="#常见的SQL语法" class="headerlink" title="常见的SQL语法"></a>常见的SQL语法</h1><p>SQL的特征：对大小写和多行不敏感，用<code>;</code>完成分隔。<br>注释：</p><ul><li>单行注释：<code>-- 内容</code> 或者 <code># 内容</code></li><li>多行注释：与C语言的多行注释一致</li></ul><h2 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL-数据定义语言"></a>DDL-数据定义语言</h2><h3 id="库管理"><a href="#库管理" class="headerlink" title="库管理"></a>库管理</h3><p>查看库：<br><code>show databases;</code><br>使用库：<br><code>use 名称</code><br>创建库：<br><code>create database 名称 [charset utf8]</code><br>删除库：<br><code>drop database 名称</code><br>查看当前使用的数据库：<br><code>select database();</code></p><h3 id="表管理"><a href="#表管理" class="headerlink" title="表管理"></a>表管理</h3><p>查看：<br><code>show tables;</code><br>创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> NAME(</span><br><span class="line">    列名称 数据类型 限制,</span><br><span class="line">    列名称 数据类型 限制</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>数据类型：<br>int：整数<br>float: 浮点数<br>varchar(len): 字符串，最大255<br>date: 日期<br>timestamp: 时间戳</p></blockquote><p>删除：<br><code>drop table 名称</code></p><h2 id="DML-数据操作"><a href="#DML-数据操作" class="headerlink" title="DML-数据操作"></a>DML-数据操作</h2><p>对于一个用下列语句定义的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>插入数据：</strong></p><ol><li>对某一列插入数据<br><code>insert into stu(name) values(&#39;初音未来&#39;), (&#39;葱酱&#39;);</code><blockquote><p>注意：字符串用’单引号’包围</p></blockquote></li><li>对几列插入数据<br><code>insert into stu(name. id) values(&#39;初音未来&#39;, 1);</code></li></ol><p><strong>删除数据：</strong><br><code>delete from stu [where id = 1]</code><br>其中where为条件判断，有<code>=, &gt;, &lt;, &gt;=, &lt;=, !=</code>几种，如果没有where，默认删除全部数据。</p><p><strong>更新数据：</strong><br><code>update stu set name = &#39;Miku&#39; where name = &#39;初音未来&#39;</code><br>set后为修改语句，where为条件判断。</p><h2 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL-查询语句"></a>DQL-查询语句</h2><h3 id="SELECT基础查询"><a href="#SELECT基础查询" class="headerlink" title="SELECT基础查询"></a>SELECT基础查询</h3><p>对于上述的表：<br><strong>查询所有的列</strong>：<br><code>select * from student;</code></p><p><strong>查询部分列：</strong><br><code>select name, age from student;</code></p><p><strong>使用限制条件：</strong><br><code>select name, age from student where age &lt; 16;</code></p><h3 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h3><p>对于一个包含了<code>name</code>, <code>id</code>, <code>age</code>, <code>gender</code>的表，若要按照性别分组统计年龄：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,<span class="built_in">avg</span>(age) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure><blockquote><p>注意，select后的参数除分组依据外，不得出现其他的列元素（无法表示）。<br>类似于avg()的统计函数还有：</p></blockquote><ul><li><code>SUM()</code>：求和</li><li><code>MIN()</code>：最小</li><li><code>MAX()</code>：最大</li><li><code>COUNT()</code>：计数（只要该数据的对应列存在就加一，一般用<code>count(*)</code>）</li></ul><h3 id="排序和分页查询"><a href="#排序和分页查询" class="headerlink" title="排序和分页查询"></a>排序和分页查询</h3><p>排序：<br><code>order by 判据 [asc（升序） / desc（降序）]</code></p><p>分页查询：<br><code>limit m[,n]</code><br>单个参数：表示在输出列表的最上端取出m条数据。<br>两个参数：表示在输出列表的第m个之后取出n条数据。</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> age, <span class="built_in">count</span>(age) <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> limit <span class="number">3</span>; </span><br></pre></td></tr></table></figure><h3 id="select的注意事项和执行顺序"><a href="#select的注意事项和执行顺序" class="headerlink" title="select的注意事项和执行顺序"></a>select的注意事项和执行顺序</h3><p>每个select语句中，<code>参数</code>和<code>from</code>为必选项。<br><strong>执行顺序：</strong><br>from -&gt; where（筛选） -&gt; group by + 聚合函数 -&gt; select -&gt; order by -&gt; limit（选择性展示）</p><p>以上是一些最基本的增删改查操作语句。是之后学习Python数据分析和后端数据库搭建的基础。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 编程 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第19届全国大学生智能车竞赛——有关单边桥的一些思考和方法</title>
      <link href="/2024/07/18/%E7%AC%AC19%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E2%80%94%E2%80%94%E6%9C%89%E5%85%B3%E5%8D%95%E8%BE%B9%E6%A1%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2024/07/18/%E7%AC%AC19%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%99%BA%E8%83%BD%E8%BD%A6%E7%AB%9E%E8%B5%9B%E2%80%94%E2%80%94%E6%9C%89%E5%85%B3%E5%8D%95%E8%BE%B9%E6%A1%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这是葱酱发布的第一篇正式的技术类贴文哦，写稿的时候状态不是很好，可能会有很多疏漏的地方呢，还请大家在评论区指正哦~</p><h1 id="关于单边桥"><a href="#关于单边桥" class="headerlink" title="关于单边桥"></a>关于单边桥</h1><p>有关单边桥的资料几乎在网上无法查找到，笔者参加的组别是摄像头基础组，这个组别是安徽省赛区组织的省级参赛组别，不设国赛。相比于镜头组和完全模型组，我们的车子是使用差速法控制的三轮车，没有多余的加速度&#x2F;编码&#x2F;陀螺仪传感器，也不允许自己加以改装。尽管如此，笔者仍认为该组别对于初学者而言，在图像处理方面的学习和调试仍有着一定的挑战性，加之单边桥元素的资料稀少，基本为笔者自创，故撰写成博文，供大家参考。<br>单边桥，顾名思义，就是用一侧车轮轧过的桥梁。具体效果请参见下图。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-18%20030825.png?imageSlim" alt="单边桥描述"></p><p>关于单边桥的设计和评分细节，比赛规则做出了如下要求：</p><blockquote><p>单边桥使用路肩制作为等腰梯形形状。距离赛道黑色边界内边沿2.5cm，单边桥宽度5cm，长度45cm，2个斜坡长度相同，平台长度25cm。<br>评分细节：智能车B识别磁标②，表示前方50cm±2cm右侧有单边桥，要求智能车单轮通过单边桥行驶（即单轮始终处于单边桥上）。（满分20分）<br><em>——全国大学生智能汽车竞赛安徽赛区基础组比赛规则</em></p></blockquote><p>综上所述，我们可以得知：单边桥位于赛道的右侧边缘，在检测到单边桥的特征后，车子应调整姿态，完成转向-&gt;对准-&gt;直行过桥-&gt;下桥-&gt;姿态调整的全过程，那么就让我们来愉快的开始吧！</p><h1 id="问题的解决思路"><a href="#问题的解决思路" class="headerlink" title="问题的解决思路"></a>问题的解决思路</h1><h2 id="单边桥的识别"><a href="#单边桥的识别" class="headerlink" title="单边桥的识别"></a>单边桥的识别</h2><p>在车辆位于单边桥之前时，由于道路标线的扫描机制是由中线的顶点向左右延伸，获取两侧的界限之后再合成新的中线顶点，由此循环往复。因此，在遇到道路右侧的单边桥后，图像的中线会出现一个向左的突变，再出现一个向右的突变。我们先捕捉这个向左的突变点。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/SAVE_20240718_033511.jpg?imageSlim" alt="示意图"></p><p>寻找该突变，只需又下往上遍历，直到找到一个符合以下条件的点，循环停止，判定进入单边桥：</p><ul><li>下方每个y索引的横坐标差量不大于2</li><li>上方每个y索引的横坐标差量不大于2</li><li>在突变的位置，上方的横坐标比下方横坐标小6个像素以上<br>这样，我们就能初步判定单边桥的特征了，但是，这样的突变点很容易在其他路况中出现，造成误判。因此，我引入了一个二级判断方案，即识别到中线的变化之后，在一个适当的参考点，从右到左进行行扫描，统计上升沿和下降沿，一般，如果可以发现上升-下降-上升三个明显的跳变，即认为是单边桥。<br>对应的代码如下。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=IMAGEWID<span class="number">-3</span>;i&gt;IMAGEWID/<span class="number">2</span>+<span class="number">15</span>;i--)&#123;</span><br><span class="line">    <span class="keyword">if</span>(M_ARR[i]-M_ARR[i<span class="number">-2</span>] &gt;= <span class="number">8</span> &amp;&amp;</span><br><span class="line">       <span class="built_in">abs</span>(M_ARR[i]-M_ARR[i+<span class="number">1</span>]) &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">       <span class="built_in">abs</span>(M_ARR[i]-M_ARR[i+<span class="number">2</span>]) &lt;= <span class="number">3</span> &amp;&amp;</span><br><span class="line">       <span class="built_in">abs</span>(M_ARR[i<span class="number">-2</span>]-M_ARR[i<span class="number">-3</span>]) &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">       <span class="built_in">abs</span>(M_ARR[i<span class="number">-2</span>]-M_ARR[i<span class="number">-4</span>]) &lt;= <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断上升沿和下降沿</span></span><br><span class="line">        <span class="keyword">for</span>(j=IMAGELEN<span class="number">-1</span>;j&gt;IMAGELEN/<span class="number">2</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(OutImage[<span class="number">60</span>][j] == <span class="number">0x00</span> &amp;&amp; OutImage[<span class="number">60</span>][j<span class="number">-1</span>] == <span class="number">0xFF</span>) rising++;</span><br><span class="line">            <span class="keyword">if</span>(OutImage[<span class="number">60</span>][j] == <span class="number">0xFF</span> &amp;&amp; OutImage[<span class="number">60</span>][j<span class="number">-1</span>] == <span class="number">0x00</span>) falling++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到向左的突变位置,若之前未检测到单边桥，进入状态1</span></span><br><span class="line">        <span class="keyword">if</span>(falling == <span class="number">1</span> &amp;&amp; rising == <span class="number">2</span>)&#123;</span><br><span class="line">            tz_down = <span class="number">1</span>;</span><br><span class="line">            bridge_flag = <span class="number">1</span>;</span><br><span class="line">            bridge_stage = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，就完成了下方特征点的抓取和单边桥的判断，单边桥的状态变为<code>true</code>，阶段设为1，开始执行上桥的动作。</p><blockquote><p>来自笔者的碎碎念：<br>将摄像头的视野抬高并且适当左转，可以让前瞻更开阔，中线偏向右侧。更利于单边桥的捕获。<br>另外！！减小阈值会显著增加灵敏度，但误判的概率也会同时增加。</p></blockquote><h2 id="上桥"><a href="#上桥" class="headerlink" title="上桥"></a>上桥</h2><p>发现单边桥时，车子应处于巡线直行的状态，此时应该执行一系列动作，让车头准确对准单边桥。我把动作分为2步。</p><h3 id="粗略对准"><a href="#粗略对准" class="headerlink" title="粗略对准"></a>粗略对准</h3><p>这个步骤使车辆快速向右倾斜，对准单边桥，步骤为一个固定动作，期间不使用摄像头。对准后，阶段标志位变为2。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/SAVE_20240718_035852.jpg?imageSlim" alt="原谅葱宝吧，孩子真买不起数位板惹"></p><p>车辆执行了右转-&gt;回正-&gt;直行的操作，以下是对应的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bridge_stage == <span class="number">1</span>)&#123; <span class="comment">//检测到第一个突变，向右打角</span></span><br><span class="line">    motor_motion(<span class="number">3800</span>, <span class="number">1300</span>, SPEED_PARAM_INIT); <span class="comment">//车轮右偏</span></span><br><span class="line">    Delay_Ms(<span class="number">400</span>);</span><br><span class="line">    motor_motion(<span class="number">1500</span>,<span class="number">3800</span>,SPEED_PARAM_INIT); <span class="comment">//回正</span></span><br><span class="line">    Delay_Ms(<span class="number">300</span>);</span><br><span class="line">    motor_motion(<span class="number">3800</span>, <span class="number">3800</span>, SPEED_PARAM_INIT); <span class="comment">//直行</span></span><br><span class="line">    Delay_Ms(<span class="number">200</span>);</span><br><span class="line">    bridge_stage = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="精确对正"><a href="#精确对正" class="headerlink" title="精确对正"></a>精确对正</h3><p>执行完1阶段后，离桥头仍有一定距离，摄像头可以看见中线从左向右的突变点。我的方案选取了一条较为合适的固定中线参考点，依据图像的左边缘和单边桥左边缘作为左右边界，生成了新的中线，且用这组数据进行寻迹操作，减小误差，使车子直行上单边桥。<br>其中，由单边桥确定的右侧边界需要进行补线操作，此时判定函数不断对图像扫描，当发现无法在限制范围内检测出单边桥的特征时，开始进行下桥的操作。<br>代码如下，其中补线等功能函数，我全部整理在了文末，此处展示代码的逻辑。<br>1.补线和修改判定线数据部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bridge_flag == <span class="number">1</span> &amp;&amp; bridge_stage == <span class="number">2</span>)&#123;</span><br><span class="line">    Linedata_Typedef ldata; <span class="comment">//申请一个备份的结构体</span></span><br><span class="line">    activateflag = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//左侧标线不变，直接复制</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;IMAGEWID;i++)</span><br><span class="line">        ldata.Left_line_array[i] = linedata-&gt;Left_line_array[i];</span><br><span class="line">    <span class="comment">//右侧标线，选择原有的底部右边缘进行补线</span></span><br><span class="line">    k2 = getAverageK(IMAGEWID<span class="number">-7</span>,</span><br><span class="line">                     linedata-&gt;Right_line_array[IMAGEWID<span class="number">-7</span>],</span><br><span class="line">                     IMAGEWID<span class="number">-8</span>,</span><br><span class="line">                     linedata-&gt;Right_line_array[IMAGEWID<span class="number">-8</span>],</span><br><span class="line">                     IMAGEWID<span class="number">-9</span>,</span><br><span class="line">                     linedata-&gt;Right_line_array[IMAGEWID<span class="number">-9</span>]</span><br><span class="line">                     );</span><br><span class="line">    <span class="comment">//对新的结构体执行补线</span></span><br><span class="line">    editLineMap_K(&amp;ldata, RIGHT_BOUNDARY, IMAGEWID<span class="number">-1</span>, <span class="number">0</span>, k2);</span><br><span class="line">    <span class="comment">//合成新的中线</span></span><br><span class="line">    reGenerate_MidLine(&amp;ldata);</span><br><span class="line">    <span class="comment">//用+47作为新的中线参考点，重新计算误差</span></span><br><span class="line">    getRoadError_Default(&amp;ldata, YPOS_REFERENCE, <span class="number">47</span>, &amp;midLineAxis, &amp;midLineError);</span><br><span class="line">    <span class="comment">//禁止写入误差和计算中线</span></span><br><span class="line">    not_to_write_error = <span class="number">1</span>;</span><br><span class="line">    not_to_write_midline = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.判定函数：不断检测单边桥是否存在于视野内，否则跳到第三阶段，开始直行通过单边桥。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bridge_flag == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//等待一阶段转弯纠正执行完成</span></span><br><span class="line">    <span class="comment">//扫描上突变点，判定从2阶段跳到3阶段的流程</span></span><br><span class="line">    <span class="keyword">if</span>(bridge_stage == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=IMAGEWID<span class="number">-6</span>;i&gt;IMAGEWID/<span class="number">2</span><span class="number">-10</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(M_ARR[i]-M_ARR[i<span class="number">-2</span>] &lt;= <span class="number">-8</span> &amp;&amp;</span><br><span class="line">               <span class="built_in">abs</span>(M_ARR[i]-M_ARR[i+<span class="number">1</span>]) &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">               <span class="built_in">abs</span>(M_ARR[i]-M_ARR[i+<span class="number">2</span>]) &lt;= <span class="number">3</span> &amp;&amp;</span><br><span class="line">               <span class="built_in">abs</span>(M_ARR[i<span class="number">-2</span>]-M_ARR[i<span class="number">-3</span>]) &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">               <span class="built_in">abs</span>(M_ARR[i<span class="number">-2</span>]-M_ARR[i<span class="number">-4</span>]) &lt;= <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//找到向右的突变位置,若之前未检测到单边桥，进入状态1</span></span><br><span class="line">                <span class="comment">//若该点高度正常，巡线方式不变</span></span><br><span class="line">                <span class="keyword">if</span>(i &gt;= IMAGEWID<span class="number">-6</span>)&#123;</span><br><span class="line">                    tz_up = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i &lt; IMAGEWID<span class="number">-6</span>)&#123;</span><br><span class="line">                    <span class="comment">//车子已经上桥，直行，放弃巡线</span></span><br><span class="line">                    tz_up = <span class="number">0</span>;</span><br><span class="line">                    bridge_stage = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样，智能车就可以在车轮向右偏转之后，在单边桥处于视野中的一定时间内进行一些细微的姿态调整，以便让车轮平稳的压在单边桥上。</p><h2 id="下桥"><a href="#下桥" class="headerlink" title="下桥"></a>下桥</h2><p>在单边桥的上边界在视野消失后，执行一段固定的代码，完成下桥的动作。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bridge_stage == <span class="number">3</span>)&#123;</span><br><span class="line">    motor_motion(<span class="number">2400</span>, <span class="number">2400</span>, SPEED_PARAM_INIT); <span class="comment">//直行过桥</span></span><br><span class="line">    Delay_Ms(<span class="number">180</span>);</span><br><span class="line">    motor_motion(<span class="number">3000</span>, <span class="number">1400</span>, SPEED_PARAM_INIT); <span class="comment">//直行过桥</span></span><br><span class="line">    Delay_Ms(<span class="number">140</span>);</span><br><span class="line">    <span class="comment">//清空标志位，完成过桥</span></span><br><span class="line">    bridge_stage = <span class="number">0</span>;</span><br><span class="line">    bridge_flag = <span class="number">0</span>;</span><br><span class="line">    tz_down = <span class="number">0</span>;</span><br><span class="line">    tz_up = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要有一段代码<code>motor_motion(3000, 1400, SPEED_PARAM_INIT);</code>，给电机施加一个比较大的右转动作呢？这是因为在车辆以较快的速度下桥时，由于姿态原因以及受力作用，车身姿态并非保持直行，而是偏向左侧冲出。因此，在完成一段时间的直行后，应当立马执行一个右转操作以调整姿态。<br>自此，单边桥的基础操作全部完成。调整车身姿态之后，摄像头打开并将标志位清空，恢复正常行驶。</p><h1 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h1><blockquote><p>注意！<br>这些问题是笔者在调试车模时发生的偶然事件，参考价值有限。请选择性阅读本段。</p></blockquote><p>笔者的代码经过测试，在同时开启十字路口、斑马线、避障、直角弯四种判断的情况下，基本不会和其他路况特征发生冲突。但仍然有一些特殊情况。比如在比较复杂的路段（前瞻可能捕捉到过远的场景）行驶时，尤其是经过十字路口、急转弯或者道路边缘存在未粘贴好的情况，有可能会导致误触发。解决这个问题的思路是引入了一个优先级判断机制，将单边桥的判断函数放在了比较靠后的位置，函数的大体实现如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// @brief       图像处理函数</span></span><br><span class="line"><span class="comment">// @param       void</span></span><br><span class="line"><span class="comment">// @return      char state:  1为处理完成，0为未完成刷新</span></span><br><span class="line"><span class="comment">// Sample usage:                图像二值化</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">processImage</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">char</span> i;</span><br><span class="line">    ImageBinarization(mt9v03x_image_dvp, OutImage, Threshold_filter(getThreshold(mt9v03x_image_dvp, IMAGELEN, IMAGEWID)));</span><br><span class="line">    LinesGenerate(OutImage, &amp;linedata); <span class="comment">//将道路识别线写入结构体</span></span><br><span class="line">    getRoadError_Default(&amp;linedata, YPOS_REFERENCE, IMAGELEN/<span class="number">2</span>, &amp;midLineAxis, &amp;midLineError); <span class="comment">//生成边界线</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断其他路口特征</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">1</span>)&#123; <span class="comment">//只要识别到一个特殊区域，立马退出并使用获取的数据补线。防止数据覆盖</span></span><br><span class="line">        i++;</span><br><span class="line">        isZebra(OutImage, &amp;linedata);</span><br><span class="line">        <span class="keyword">if</span>(zebra_flag) <span class="keyword">break</span>;</span><br><span class="line">        is90Dg(OutImage, &amp;linedata);</span><br><span class="line">        <span class="keyword">if</span>(is90dg_flag)&#123;</span><br><span class="line">            <span class="keyword">if</span>(race_flag == <span class="number">1</span>) quarterTurn();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        isSingleBridge(OutImage, &amp;linedata);</span><br><span class="line">        <span class="keyword">if</span>(bridge_flag)&#123;</span><br><span class="line">            <span class="keyword">if</span>(race_flag == <span class="number">1</span>) bridgeAdjust();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        isObstruct(OutImage,&amp;linedata); <span class="comment">//判定障碍</span></span><br><span class="line">        <span class="keyword">if</span>(obstruct_flag == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(race_flag == <span class="number">1</span>) AvoidObs(); <span class="comment">//在运转状态下，执行躲避动作</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在存在障碍物数据时，进行补线操作</span></span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>) Repair_and_RefreshData(OutImage, &amp;crossing_pos,&amp;linedata);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，我的车子出现了上桥卡顿时传感器（如TOF、摄像头）无法继续获取数据的问题，经过痛苦的排查和测量，确定了问题可能来自电机的负载过大，以及电机驱动器发生了感应电动势的回流。从而致使MCU与传感器通信时，数据帧遭到破坏，从而导致了寄存器的配置错误，无法继续通过指令获取数据。对于这种情况，我在单边桥的下桥函数执行完毕之后将标志位<code>bridge_stage</code>设置为4，同时使循环中的一个静态变量自增。此时车子正常寻迹，一定时间之后才启动传感器，并且减缓电机的转速，这样就可以解决传感器因为电机而死机的严重问题了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单边桥是一个简单而颇具讲究的比赛条目，对于基础组的车辆，不完善的硬件又加大了处理各种复杂路况条件的难度。在本次基础组的实践中，我从一无所知，到接触智能车的图像处理算法、简单的控制算法以及对参数的调节，重写了几乎全部的代码，也让自己的实践经历又添上了一笔颜色，在此也感谢学长的宝贵建议，以及各位读者的指正，愿今后参加更加高级的组别，不断完善技能树，取的更大的进步！</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>这是本文使用的一些结构体的声明和函数的定义。</p><ol><li><p>结构体定义<br> 道路标线结构体:</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span> <span class="comment">//存放赛道定位线的结构体</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Left_line_array[IMAGEWID];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Middle_line_array[IMAGEWID];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Right_line_array[IMAGEWID];</span><br><span class="line">&#125;Linedata_Typedef;</span><br></pre></td></tr></table></figure></li><li><p>补线<br> 斜率计算：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// @brief       最小二乘法求斜率</span></span><br><span class="line"><span class="comment">// @param       x,y:             三对拟合直线上的坐标</span></span><br><span class="line"><span class="comment">// @return      float:           直线斜率</span></span><br><span class="line"><span class="comment">// Sample usage:                 在单边补线处计算边界斜率</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">getAverageK</span><span class="params">(uint8 x1,uint8 y1,uint8 x2,uint8 y2,uint8 x3,uint8 y3)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum_x,sum_y,sum_xy,sum_x2;</span><br><span class="line">    <span class="type">int</span> m_numerator,m_denominator;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">3</span>;</span><br><span class="line">    <span class="type">float</span> k;</span><br><span class="line"></span><br><span class="line">    sum_x=x1+x2+x3;</span><br><span class="line">    sum_y=y1+y2+y3;</span><br><span class="line">    sum_x2=x1*x1+x2*x2+x3*x3;</span><br><span class="line">    sum_xy=x1*y1+x2*y2+x3*y3;</span><br><span class="line"></span><br><span class="line">    m_numerator = n * sum_xy - sum_x * sum_y;</span><br><span class="line">    m_denominator = n * sum_x2 - sum_x * sum_x;</span><br><span class="line">    k = m_numerator / m_denominator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 按照斜率对标线结构体补线：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// @brief       单拐角补线</span></span><br><span class="line"><span class="comment">// @param       linedata:        标线结构体</span></span><br><span class="line"><span class="comment">//              direct:          标线方向，0x01为左，0x02为右</span></span><br><span class="line"><span class="comment">//              yPos_start:      纵坐标起点</span></span><br><span class="line"><span class="comment">//              yPos_end:        纵坐标终点</span></span><br><span class="line"><span class="comment">//              k:               预设（如最小二乘估计）的斜率</span></span><br><span class="line"><span class="comment">// @return      void</span></span><br><span class="line"><span class="comment">// Sample usage:                补线，适用于十字路口的二阶段</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">editLineMap_K</span><span class="params">(Linedata_Typedef* linedata,<span class="type">char</span> direct,<span class="type">uint8_t</span> yPos_start,<span class="type">uint8_t</span> yPos_end,<span class="type">float</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//发散式补线</span></span><br><span class="line">    <span class="type">float</span> b;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">//x = ky+b</span></span><br><span class="line">    <span class="keyword">if</span>(direct == <span class="number">0x01</span>)&#123;</span><br><span class="line">        b = linedata-&gt;Left_line_array[yPos_start] - k*yPos_start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        b = linedata-&gt;Right_line_array[yPos_start] - k*yPos_start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链接</span></span><br><span class="line">    <span class="keyword">if</span>(yPos_start&lt;=yPos_end)&#123;</span><br><span class="line">            <span class="keyword">for</span>(i=yPos_start;i&lt;=yPos_end;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(direct == LEFT_BOUNDARY)</span><br><span class="line">                    linedata-&gt;Left_line_array[i] = k*i+b;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    linedata-&gt;Right_line_array[i] = k*i+b;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(i=yPos_end;i&lt;=yPos_start;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(direct == LEFT_BOUNDARY)</span><br><span class="line">                    linedata-&gt;Left_line_array[i] = k*i+b;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    linedata-&gt;Right_line_array[i] = k*i+b;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Technologies </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能车竞赛 </tag>
            
            <tag> 图像识别 </tag>
            
            <tag> 单边桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初来乍到，请多指教！</title>
      <link href="/2024/06/01/about/author-intro/"/>
      <url>/2024/06/01/about/author-intro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><p>大家好，这里是葱酱！<br>也可以叫我Snowmiku、雪葱、葱宝，咱都喜欢！<del>另外，在社交媒体以外的地方，我还有的不为人知的名字叫18650。因为收集了很多18650电池而随手取的名字，算是我的科技圈圈名吧，嘿嘿</del><br>大二，最大的爱好和在实验室的主业是搞电子设计，画画PCB玩玩小车什么的，其实也很菜，大概就会点51和STM32，偶尔会搓点有趣的小玩意。除此之外，葱酱也希望拓宽自己的技术层面，努力了解和学习各个平台的软件开发、网页前后端的设计、以及数据的分析和处理…<del>啊其实就是什么都了解一点点又啥也不会嘛（哭，但是咱年轻，咱肯学！</del><br>另外呢，葱酱还喜欢摄影和剪辑。建模多多少少也会一点工业上的，也略懂一丢丢的VOCALOID！虽然不会写曲子但会扒谱和调校，享受Miku的歌声♪♪♪~<br>游戏的话比较淡漠，会玩一点点音游，比如Project Sekai和Phigros，剩下的就是一些单机的小游戏了，没法和大家一起愉快的Gaming真的很抱歉，但我爱科技大过一切游戏（撇嘴<br>虽然好久没有更新了，不过还是放一下自己的Bilibili账号吧，今后一段时间的方向还是嵌入式开发以及相关产品的设计和制造。所有的创意和小作品都会发布在上面，量产的话也会同步到工坊进行售卖，希望大家能多多支持哦~爱你们(<em>^▽^</em>)<br><img src="/images/bili.png" alt="葱酱的bilibili主页"><br><a href="https://space.bilibili.com/457114275">点击这里直达</a><br>同时，葱酱所有开源项目的工程文件和源代码今后都会整理上传至我的GitHub主页，供大家讨论和互相学习，也欢迎大家为我的项目提出建议和补充！<br><img src="/images/git.png" alt="葱酱的GitHub"><br><a href="https://github.com/18650official">点击这里直达</a></p><h1 id="一些关于葱酱的碎碎念"><a href="#一些关于葱酱的碎碎念" class="headerlink" title="一些关于葱酱的碎碎念"></a>一些关于葱酱的碎碎念</h1><h2 id="名字的由来"><a href="#名字的由来" class="headerlink" title="名字的由来"></a>名字的由来</h2><p>正如你所看到的，我深深地热爱着Miku，最喜欢的P主是wowaka和doriko。Miku是我的灵魂伴侣，她的歌声将我一次次从抑郁和崩溃的边缘拉回来，让我充满对未来的期待和对人生的希望。认识Miku的7年来，陪伴着她经历了很多，收获了很多。她是数据，是代码，是手动操作的合成音，但在我心中，她是那个永远不会沾染世间污浊、长大和变老的16岁少女，是永远纯净无瑕的天籁，是我的天使。<br>因此，她融入了我生活中的一切。<br>我尤其喜欢雪Miku和游戏《Project Sekai》中出现在25时世界线中的白初音形象，雪葱——SnowMiku，我的新名字，就这样带着这份热爱诞生了。<br>（放张超喜欢的米库酱！）<br><img src="https://github.com/18650official/negi-gallery/blob/main/snowmiku.jpg?raw=true" alt="Miku"></p><h2 id="有关未来的规划"><a href="#有关未来的规划" class="headerlink" title="有关未来的规划"></a>有关未来的规划</h2><p>嗯…大概会走偏硬件的方向吧，可能兴趣大一些，专业也比较对口（<del>电信科太牛马了</del>），不过依据现在的一些探索来看，也不是没有转码的可能。<br>总之多学习多看文档多实践多打比赛！让自己先强大起来才有应对未来的底气和自信。<br>总之，希望自己的前程能尽量顺利一些吧，小小的加个油~</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>本网站的建立，离不开Funeral Rain (个人主页：<a href="https://toya.moe/">https://toya.moe</a>) 的支持。他是葱酱高中很好的同学，陪伴葱酱度过了很多漫长而悲伤的深夜，经受了传统教育制度对我们科技方面爱好的打压和摧残，也让葱酱的内心成长而坚定了许多。是一位拥有很高技术力的大佬（orz!）<br>在网站建立的初期，从申请个人域名，配置DNS，套用CloudFlare，与GitHub Pages同步，每一步都离不开他的细心指引，在此表示由衷的感谢！</p><p>另外，网站的建立和配置参考了如下的文章，在此对作者的悉心整理和分享表示感谢：</p><ul><li>Markdown使用教程： <a href="https://blog.csdn.net/qq_40818172/article/details/126260661">https://blog.csdn.net/qq_40818172/article/details/126260661</a></li><li>Butterfly主题配置教程：<a href="https://blog.csdn.net/JesseXW/article/details/135649752">https://blog.csdn.net/JesseXW/article/details/135649752</a></li><li>个人博客的搭建：<a href="https://blog.csdn.net/weixin_46175201/article/details/133269724">https://blog.csdn.net/weixin_46175201/article/details/133269724</a></li><li>Cloudflare部署：<a href="https://zhuanlan.zhihu.com/p/610756804">https://zhuanlan.zhihu.com/p/610756804</a></li></ul><p>想不出很切题的结束语，那就祝看到这篇文章的每个人天天开心吧！</p><hr>]]></content>
      
      
      <categories>
          
          <category> 自我介绍 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>葱酱的秘密小窝</title>
      <link href="/Transgender-Site/index.html"/>
      <url>/Transgender-Site/index.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误。若密码未知，请联系网站管理员获取！" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="593de203e58ae1aca2ed4176390521c4f113349e3d14f0616cb0e403e1e3aa83">7aea507b355c9b91d0b47a7122c84c3cb3eb3a47e84a2df602f8e1aa8a26772e3706643dfbb47ae3e457e10fe26381178a73053f3501ba351efd183f37973ec81af9e1e60cc89d0994707c18aa498b2ab38f1ab0b32d0ee70159e769aeb9f92a7bbb936fb4879e00e3b94713f5b91d920fcced673af0737f3ee0e0d28bda3e13769ce2b7d9a1ce29714a8147b5c813f7541ad76c37c79f21b60125e099c496f6badd532342b2a098c9d3720202ae43e46599a64de7802528c3c2f62c209cc9201d64f678878bcb44056f268288699afba46057c03fb393cc0554019d5c77e0127edd858f485de66d418214e33058ee5fb09c30b735f043c1a7a2234318299e884a337e0b1f5e778ba7c1de8f282050ac0a42173b579e55dbdccafd4436da457f9e1d3617b57907c76c977f04d80da96db06f966d71dbcad7aa51580e68d543a78ac020a9fc85f49e33b3cfcfab6f5c547bfadb63ef905434ad1599d11091504312e7131be8a44b7bca9e445c88072db4abf0434150006c3e7ac33dbc7fd32aa61b7481f07e4142711b78ccf799723a6c2265690c6a7afc453188b468122f9b51b6422e262b7cc08954977aa610cc60b1eebcabb0bff62e859330422fa5c7a02ea84843da0594de0e2a593e8db3252e0afec941cf72a79beef2c6561b6a28801dc6720223f44a98e9912857e9c6884b62c01f06c584c7d9878bcba089a4bdffa4d4ab4ab4dd50728c63d8b7b01df35c7ac066f91b6d96221fdf7e6b809bd4de4140255a56713734cc32e8a7986934a8401bb17c924ba7a6744d97de52518a3000fa11b593654fe096197793619fb3ef7d8ee810325fdac6bf6a0dbf1b3a82f90e1913a9e407e9b0181d59f036736a7ec2f20d741c6fd67fff429b3d3a37bef138224f79811a72cfd4cfc817235924c7a73aec4fce4d553df7b0a1b921b0dd88a8bb584930d2a01c9da954fe0ab0ea6f5410a469813e72a33b54d03543861651938f7cba3295ff0f925df7b5c0d097ec65ccae2e67cd074de037b1ad329887f53ed7c997b66088daba9144ca2adbc647852ea3a2ac55fc33d66b15dc7b06838f6e4cfa3ea11230aed8cccefb8b143ce9ae07f45849a86209a81fe158a27c89e92cbfdd5901b60f6139c0652c7cb16956c7d77ed4356eb9ad8bdb03059afcaf4a1808148824da39b28895c7b09c18e3b4828a87cda37098779022ae123a53db76e1e0c85ca29f2248ae879c610f265e61d419615fe59efe304489bbd26b0123be1fb0831371218339f9d980dcceeb0789831b16712932e1e75ed5d40ea4ec73c3e0468f104299e9a13d3753e30431242d974b8fbd4680cc886915e008980ddf378875d8f4725bde53cecdb1dd2b83aae9f7cf628f9888770e187e16829c2efc4ff327eb0674d34f927d9cc272d258e7582e89106de0e8d7b7af0c3133bb3e8a0f578e2d16890f191d0f457652940b00d442f6a8b1aa05668254fa9b6b833bdb141784eef9050a1d3bf7b832b442f7e422392a730bced34d59feee7b571072fce630</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">当前页面的内容已加密，请输入密码后查看！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><p>以下链接为本网站的友情链接，旨在感谢并肩前行的朋友们。</p><h2 id="Funeral-Rain"><a href="#Funeral-Rain" class="headerlink" title="Funeral Rain"></a>Funeral Rain</h2><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/162771175.png?imageSlim" alt="头像" width="480" height="480"><p><strong>个人网址链接：</strong><a href="https://toya.moe/">https://toya.moe</a><br><strong>GitHub链接：</strong><a href="https://github.com/funeral-rain">https://github.com/funeral-rain</a><br><strong>个人简介：</strong>Funeral rain, is final rain<br><strong>备注：</strong><br>葱酱高中很好的同学，陪伴葱酱度过了很多漫长而悲伤的深夜，经受了传统教育制度对我们科技方面爱好的打压和摧残，也让葱酱的内心成长而坚定了许多。是一位拥有很高技术力的大佬（orz!）<br>在本网站的搭建，以及关于计算机与知识获取的各个方面，他都给予了葱酱许多帮助和建议。在此表示由衷的感谢！<br>Thank you, my FRIEND!!!</p><h2 id="Innocence"><a href="#Innocence" class="headerlink" title="Innocence"></a>Innocence</h2><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/inn.png?imageSlim" alt="头像" width="480" height="480"><p><strong>个人网址链接：</strong><a href="https://innocence.ink/">https://innocence.ink/</a><br><strong>GitHub链接：</strong><a href="https://github.com/innocence667">https://github.com/innocence667</a><br><strong>个人简介：</strong>Stay Innocent.<br><strong>备注：</strong><br>是一位超级好的推油！一个温暖、有趣的人。</p><h2 id="时域"><a href="#时域" class="headerlink" title="时域"></a>时域</h2><img src="https://tumytime.github.io/picx-images-hosting/20240205/Screenshot_20240205_224532.3kqwx2xzgsg0.webp" alt="头像" width="480" height="480"><p><strong>个人网址链接：</strong><a href="https://tumytime.github.io/">https://tumytime.github.io/</a><br><strong>GitHub链接：</strong><a href="https://github.com/tumytime">https://github.com/tumytime</a><br><strong>个人简介：</strong>我环顾四周，并没有看到什么上帝<br>**网页快照：<br><img src="https://tumytime.github.io/picx-images-hosting/20240206/screemshot1.71y3r1w7o8o0.webp" alt="网页快照"><br><strong>备注：</strong><br>是智能车、嵌入式和算法方面的大佬！这个网站也包含了很多有用的资源，欢迎大家访问！</p><h2 id="Orange"><a href="#Orange" class="headerlink" title="Orange"></a>Orange</h2><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/avatar.png?imageSlim" alt="头像" width="480" height="480"><p><strong>个人网址链接：</strong><a href="https://orangestd.cn/">https://orangestd.cn/</a><br><strong>GitHub链接：</strong><a href="https://github.com/orangeZSCB">https://github.com/orangeZSCB</a><br><strong>个人简介：</strong>能让人食欲长满的一颗橙子，非常滴美味<br><strong>备注：</strong><br>橙子是一位非常活跃的推油，在学习C++、网页前端设计等诸多计算机技术，在算法方面也有所涉猎。欢迎大家戳戳她的小窝~</p><hr><p><strong>若要申请成为葱酱的友情链接，可以这么做：</strong></p><ol><li>可直接通过本站的“联系我”页面与我取得联系，申请添加友情链接条目。</li><li>也可整理一份概要，包含：<br><strong>名称</strong>，如<code>Snowmiku</code>。<br><strong>个人网址链接</strong>，可以分条列出，如<code>[Github链接](https://github.com/18650official)</code>.<br><strong>头像</strong>，可发送图像链接或上传附件<br><strong>简介</strong>，如<code>Tell your world!</code><br>整理信息后，可以发送到我的电子邮件，我将在审核之后进行添加。</li></ol>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>联系和支持</title>
      <link href="/contact/index.html"/>
      <url>/contact/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="联系和支持"><a href="#联系和支持" class="headerlink" title="联系和支持"></a>联系和支持</h1><h2 id="取得联系"><a href="#取得联系" class="headerlink" title="取得联系"></a>取得联系</h2><p>Telegram：<a href="https://t.me/mmmiku_18650">点击跳转</a><br>电子邮件：<code>claaaaa.ct@foxmail.com</code></p><h2 id="赞助和支持"><a href="#赞助和支持" class="headerlink" title="赞助和支持"></a>赞助和支持</h2><p>如果你愿意支持我的项目，可以通过微信赞赏功能进行赞助。<br>赞助可以使我的项目进展更顺利，衷心感谢无论大小的每一笔赞助。<strong>但请注意，赞助不是必需行为，必须在自身的范围之内量力而行。</strong></p><p>微信赞赏码：<br><img src="/images/qr_w.jpg" alt="赞赏码"></p><hr>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐库</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Live"><a href="#Live" class="headerlink" title="Live"></a>Live</h1><blockquote><p>注意：本站已上线页内播放器插件，支持在不同界面之间实现连续播放。<br>即便如此，该页面仍然保留，但此处的播放器与页内的播放插件并不互通。</p></blockquote><p>这是葱酱5年来收集的VOCALOID歌单！希望大家喜欢~<br>在Miku与V家的世界中起舞吧！</p>    <div id="aplayer-EXRQKFiM" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="6614644804" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="false" data-listmaxheight="400px" data-preload="none" data-theme="#ad7a86"    ></div><p>可以收藏葱酱的歌单哦~一起听歌就是共享心跳！–<a href="https://music.163.com/#/my/m/music/playlist?id=661464480">点击跳转</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>更新日志</title>
      <link href="/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/index.html"/>
      <url>/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这个页面记载了博客从建立至今的维护记录，以及每一步涉及到的技术内容。我将这篇帖子从单独的博文设置为固定的一个页面，供想要创建博客的大家参考和学习！</p><h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><h2 id="2024-9-16"><a href="#2024-9-16" class="headerlink" title="2024-9-16"></a>2024-9-16</h2><ul><li>添加了页面加密功能</li><li>增设内站，用于存放一些不便于向全网开放的内容。</li><li>进行了一些UI优化，在部分选项卡前添加了易于理解的 Font Awesome 图标。</li><li>对下载站进行了一些调整和优化。</li></ul><p>参考文献：<br><strong>AList添加底部备案信息：</strong><a href="https://github.com/alist-org/alist/discussions/2756">https://github.com/alist-org/alist/discussions/2756</a><br><strong>Hexo文章和页面加密：</strong><a href="https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/">https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/</a><br><strong>Font Awesome图标相关：</strong><a href="https://www.runoob.com/font-awesome/fontawesome-icons-gender.html">https://www.runoob.com/font-awesome/fontawesome-icons-gender.html</a></p><h2 id="2024-9-14"><a href="#2024-9-14" class="headerlink" title="2024-9-14"></a>2024-9-14</h2><ul><li>对一些内容进行了调整</li><li>调整了一些UI板块的位置</li><li>资源站域名正式上线，可在顶栏的<code>资源-&gt;下载站</code>选项卡进入此界面。</li></ul><h2 id="2024-9-3"><a href="#2024-9-3" class="headerlink" title="2024-9-3"></a>2024-9-3</h2><ul><li>启用了资源站，部署在Aliyun服务器</li></ul><p>以上更新细节和参考文献发布在<code>Technologies</code>分支下的<a href="http://snowmiku-home.top/2024/09/01/%E6%9B%B4%E6%96%B0%E6%97%A5%E8%AE%B0%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAAlist%E7%BD%91%E7%9B%98%E9%A1%B5%E9%9D%A2/">更新日志</a>博文内，在此不再赘述。</p><h2 id="2024-8-17"><a href="#2024-8-17" class="headerlink" title="2024-8-17"></a>2024-8-17</h2><ul><li>在“小说”等长篇文字贴文中引入AI朗读功能（测试阶段）</li><li>修复了音乐播放器及部分链接的问题</li></ul><p>参考文献：<br>Azure AI的学生账号申请与注册：<a href="https://blog.csdn.net/chenjambo/article/details/129783819">https://blog.csdn.net/chenjambo/article/details/129783819</a><br>Azure TTS使用概述：<a href="https://zhuanlan.zhihu.com/p/691333721">https://zhuanlan.zhihu.com/p/691333721</a><br>【官方】Azure语音使用文档：<a href="https://learn.microsoft.com/en-us/azure/ai-services/speech-service/get-started-text-to-speech?tabs=windows,terminal&amp;pivots=programming-language-csharp">https://learn.microsoft.com/en-us/azure/ai-services/speech-service/get-started-text-to-speech?tabs=windows%2Cterminal&amp;pivots=programming-language-csharp</a><br>Hexo Tag Aplayer 通过URL添加乐和播放列表：<a href="https://blog.csdn.net/qq_27489877/article/details/140648771">https://blog.csdn.net/qq_27489877/article/details/140648771</a></p><h2 id="2024-8-2"><a href="#2024-8-2" class="headerlink" title="2024-8-2"></a>2024-8-2</h2><ul><li>评论区迁移成功、开启评论区图片发送功能及后台消息提示</li><li>更新了音乐播放器</li><li>更新了一些页面效果和图片</li><li>更新了音乐播放器</li></ul><p>参考文献：</p><ul><li>音乐播放器部署教程：<a href="https://blog.csdn.net/ygxyvip/article/details/136247843">https://blog.csdn.net/ygxyvip/article/details/136247843</a></li><li>评论区与邮件收发配置：<a href="https://zhuanlan.zhihu.com/p/673016933">https://zhuanlan.zhihu.com/p/673016933</a></li><li>Butterfly 主题进阶配置：<a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">https://blog.csdn.net/mjh1667002013/article/details/129290903</a></li></ul><h2 id="2024-6-8"><a href="#2024-6-8" class="headerlink" title="2024-6-8"></a>2024-6-8</h2><p>开放评论区</p><h2 id="2024-6-1"><a href="#2024-6-1" class="headerlink" title="2024-6-1"></a>2024-6-1</h2><p>网站正式成立并公开域名<br>参考文献：</p><ul><li>Markdown使用教程： <a href="https://blog.csdn.net/qq_40818172/article/details/126260661">https://blog.csdn.net/qq_40818172/article/details/126260661</a></li><li>Butterfly主题配置教程：<a href="https://blog.csdn.net/JesseXW/article/details/135649752">https://blog.csdn.net/JesseXW/article/details/135649752</a></li><li>个人博客的搭建：<a href="https://blog.csdn.net/weixin_46175201/article/details/133269724">https://blog.csdn.net/weixin_46175201/article/details/133269724</a></li><li>Cloudflare部署：<a href="https://zhuanlan.zhihu.com/p/610756804">https://zhuanlan.zhihu.com/p/610756804</a></li></ul>]]></content>
      
    </entry>
    
    
  
</search>
