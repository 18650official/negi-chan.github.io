<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于智能可穿戴设备研究计划的初步设想</title>
      <link href="/2025/10/14/post-20251014/"/>
      <url>/2025/10/14/post-20251014/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了葱酱即将接手的智能穿戴设备项目的初期规划，旨在设计一款可测量人体运动数据（如计步、爬楼高度等）并用于出口的类Apple Watch产品，涵盖需求分析与技术思路。</p><span id="more"></span><p><meting-js    name="朗读"    artist="Azure"    url="/audio/post-20251014.wav"    cover="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/Screenshot_2024-08-15-00-35-26-521_com.tencent.mm.jpg?imageSlim"    fixed="false"><br></meting-js></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这个帖子是对葱酱可能即将接手的正式项目——一个带有身体与运动数据检测功能的智能穿戴设备的初期规划与思考，为了快速且高效的整理和呈现我的思路，我把这个初期研究整理成一篇技术报告类的Post，也希望这个项目可以顺利进行。</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>项目目前处在未启动和规划阶段，通过与研究团队的交流，我对整个项目有了一个整体化的了解：</p><h2 id="项目产品概述"><a href="#项目产品概述" class="headerlink" title="项目产品概述"></a>项目产品概述</h2><p>项目的目的是设计一款用于出口的智能穿戴设备，这款设备可以像苹果Apple Watch一样穿戴在手腕上，可以测量一些人体数据（包含了计步器、爬楼高度等运动数据和心率、血压血氧等生物学数据，并且可以实时通过无线电（Wi-Fi或者BLE）传输到移动设备，最终需要传输到云端服务器。</p><h2 id="研究的重点"><a href="#研究的重点" class="headerlink" title="研究的重点"></a>研究的重点</h2><p>此项目的研究有一些需要关注的重点，我将在文章中对这些要点做出我的初步规划和思考，并且在后续的研究中逐步跟进：</p><ul><li>选择的芯片方案、通信技术和传感器方案</li><li>选择的电池方案：需要保证在1min&#x2F;次更新的情况下，实现5天以上的待机时间</li><li><strong>如何解决毛发遮挡光学传感器的问题</strong></li><li>如何设计产品外形，如何呈现不同阶段的设计成品</li><li>PCB与电路细节设计中，需要考虑哪些设计问题</li><li>在设计的后期，研发团队计划加入Solar Panel充电功能，如何在有限空间内得以实现</li></ul><h1 id="细节思考：对研究重点的展开"><a href="#细节思考：对研究重点的展开" class="headerlink" title="细节思考：对研究重点的展开"></a>细节思考：对研究重点的展开</h1><p>下面，我将从上面列出的研究重点展开，给出我的调研与思考：</p><h2 id="芯片、通讯方案"><a href="#芯片、通讯方案" class="headerlink" title="芯片、通讯方案"></a>芯片、通讯方案</h2><p>本产品需要一款 <strong>低功耗、支持无线通信技术</strong>的微控制器。对于一个后续需要投入商业使用的设备，芯片的选择还需要：</p><ul><li>文档齐全、开发工具成熟</li><li>可配置性高、例程与开发生态丰富</li><li>集成度高，环境易于上手开发与详细调试</li><li>低功耗方面经得住考验，有足够的可靠和稳定性</li></ul><p>经过资料查阅与调研，我希望使用<strong>Nordic Semiconductor nRF52 系列</strong>，具体芯片型号为<code>nRF52840 / nRF52833</code>，这是一颗集成的、专注于BLE的片上系统（SoC），且计划使用低功耗蓝牙（BLE）进行通信。</p><p><strong>选择理由：</strong></p><ol><li><strong>极致的功耗表现：</strong> Nordic 在低功耗无线通信领域是业界的标杆。nRF52 系列拥有非常灵活的电源管理系统，可以让芯片在绝大多数时间处于微安（µA）级别的深度睡眠模式，仅在需要采集和传输数据时才被唤醒。这是实现「5天以上待机时间」的硬件基础。</li><li><strong>强大的处理性能：</strong> 该系列芯片搭载了带有浮点运算单元（FPU）的 ARM Cortex-M4F 内核。这个浮点运算单元（FPU）至关重要，因为后续要解决毛发干扰问题，必然会涉及到大量的<strong>滤波、插值等数字信号处理（DSP）算法</strong>，FPU可以让这些运算快上数十倍，从而更快地完成计算并让芯片回到睡眠模式，进一步降低功耗。</li><li><strong>成熟稳定的开发生态：</strong> Nordic 提供了极其完善的 <strong>nRF Connect SDK</strong> 开发套件，该套件基于 <strong>Zephyr RTOS</strong>，提供了稳定的蓝牙5.x协议栈、丰富的驱动程序和大量的示例代码。完善的官方文档和活跃的开发者社区可以极大地缩短开发周期，降低开发风险。</li><li><strong>丰富的周边接口：</strong> 芯片内置了高品质的ADC、SPI、I2C、UART等接口，足以连接市面上所有的主流传感器。其中nRF52840还内置了USB控制器，方便在开发阶段进行日志打印和充电管理。</li></ol><h2 id="传感器方案"><a href="#传感器方案" class="headerlink" title="传感器方案"></a>传感器方案</h2><h3 id="传感器市场分析和初步选型"><a href="#传感器市场分析和初步选型" class="headerlink" title="传感器市场分析和初步选型"></a>传感器市场分析和初步选型</h3><p>传感器的选择直接决定了数据的原始品质。我们需要选择体积小、功耗低且信噪比（SNR）高的型号。</p><ul><li><p><strong>运动传感器 (计步器、爬楼高度)：</strong></p><ul><li><strong>推荐方案：</strong> 一颗六轴惯性测量单元 (IMU) <strong>Bosch BMI270</strong> + 一颗气压计 <strong>Bosch BMP390</strong>。</li><li><strong>选择理由：</strong><ol><li><strong>高集成度与低功耗：</strong> BMI270 集成了三轴加速度计和三轴陀螺仪，体积极小，其内置的计步器算法可以在极低的功耗下运行，无需持续唤醒主控MCU。</li><li><strong>高精度：</strong> BMP390 是目前市面上最精准的气压计之一，能侦测到极其微小的气压变化，这对于准确计算爬楼层数至关重要。</li></ol></li></ul></li><li><p><strong>生物传感器 (心率、血氧、血压趋势)：</strong></p><ul><li><p><strong>推荐方案：</strong> 一颗高集成度的光学模拟前端 (AFE) 芯片，例如 <strong>Maxim Integrated (已被ADI收购) 的 MAX86150</strong> 或 <strong>Analog Devices 的 ADPD4100</strong>。</p><blockquote><p>经过市场调查，在消费电子领域，<strong>MAX30102&#x2F;100</strong>有较为广泛的应用，且价格低廉，但考虑到后续成品中需要较高的SNR与抗环境光能力，我目前希望成品中使用专业、精度高的MAX86150方案，若对价格方面敏感，此项选型方案需后续商定。（MAX86150的零售采购价格在60-80元人民之间。）</p></blockquote></li><li><p><strong>选择理由：</strong></p><ol><li><strong>高信噪比 (High SNR)：</strong> 这是<strong>解决毛发遮挡问题的基础</strong>。专业的AFE芯片相比于简单的光电二极管+放大器方案，拥有更强的噪声抑制能力，能从微弱的反射光中提取出更干净的PPG信号。</li><li><strong>高集成度与灵活性：</strong> MAX86150 同时集成了PPG和心电图(ECG)的测量通道。这为未来通过PPG+ECG结合的方式（计算脉搏波传导时间 PTT）来实现更精准的血压趋势追踪提供了可能性。</li><li><strong>高度可配置性：</strong> 这类AFE芯片允许你通过代码精细地控制LED的驱动电流、采样率、积分时间等参数。这意味着你可以开发算法，在侦测到信号品质不佳时（例如因为毛发遮挡），<strong>动态地增强LED的发射功率</strong>，从硬件层面改善信号品质。</li></ol></li></ul></li></ul><h3 id="传感器的拓展功能"><a href="#传感器的拓展功能" class="headerlink" title="传感器的拓展功能"></a>传感器的拓展功能</h3><p>在初步确定了传感器的选型方案之后，我进行了一些延伸思考，基于上述的传感器，在分析了它们的工作原理之后，结合目前智能穿戴设备的应用场景，我拟定了几个在后续开发进程中可能添加的功能。</p><h4 id="3轴加速度传感器"><a href="#3轴加速度传感器" class="headerlink" title="3轴加速度传感器"></a>3轴加速度传感器</h4><ul><li><strong>实现的基础功能:</strong> 计步器。</li><li><strong>工作原理:</strong><br>  传感器内部有一个微机电结构（MEMS），可以想象成一个悬挂在微小弹簧上的重块。当你运动时，由于惯性，这个重块会相对于芯片发生位移。传感器通过测量这个位移导致的电容变化，将其转换为X、Y、Z三个轴向上的加速度数据。<br>  在行走或跑步时，身体会产生一种有规律的、周期性的加速度变化波形。设备内的算法通过分析这个波形的频率和振幅，就能识别出“一步”，从而实现计步。</li><li><strong>可实现的扩展功能:</strong><ul><li><strong>睡眠监测 :</strong> 通过长时间监测身体的微小动态和翻身次数，结合心率数据，可以分析用户的睡眠阶段（如浅睡、深睡、REM），并评估睡眠质量。</li><li><strong>跌倒检测 :</strong> 算法可以设定一个阈值，当检测到一个瞬时的高强度冲击（自由落体般的失重感），并且之后长时间静止不动时，可以判断为用户可能发生了跌倒，并触发警报。</li><li><strong>运动模式判断:</strong> 跑步、骑行、游泳等不同运动的加速度波形特征是完全不同的。通过机器学习算法，设备可以自动识别用户正在进行的运动类型，无需手动开启。（类似于Apple Health）</li><li><strong>敲击唤醒和交互:</strong> 可以识别用户敲击设备表盘的动作，用于点亮屏幕或执行快捷操作，提升交互体验。</li></ul></li></ul><h4 id="气压传感器"><a href="#气压传感器" class="headerlink" title="气压传感器"></a>气压传感器</h4><ul><li><strong>实现的基础功能:</strong> 爬楼高度统计。</li><li><strong>工作原理:</strong><br>  大气压强会随着海拔高度的上升而降低。气压传感器内部有一个极其敏感的柔性薄膜，它会随着外界气压的变化而发生形变。传感器测量这个形变的程度，并将其转换为精确的气压读数（单位通常是百帕 hPa）。<br>  当用户上楼时，海拔会发生微小但持续的上升，导致气压持续下降。算法捕捉到这种特定的气压变化模式，就能换算出用户攀爬的楼层数。</li><li><strong>可实现的扩展功能:</strong><ul><li><strong>海拔高度追踪:</strong> 在进行徒步、登山等户外运动时，可以精确记录总爬升高度和海拔变化曲线。</li><li><strong>天气变化预警:</strong> 在一个固定的地点，如果气压在短时间内急剧下降，通常预示着风暴天气即将来临。设备可以据此发出简单的天气预警。</li></ul></li></ul><h4 id="光电容积脉搏波-PPG-传感器"><a href="#光电容积脉搏波-PPG-传感器" class="headerlink" title="光电容积脉搏波 (PPG) 传感器"></a>光电容积脉搏波 (PPG) 传感器</h4><p>这是一个传感器系统，通常包含绿光、红光、红外光LED和光电二极管(Photodiode)。</p><ul><li><strong>实现的基础功能:</strong> 心率 (Heart Rate), 血氧饱和度 (SpO2), 血压趋势 (Blood Pressure Trend)。</li><li><strong>工作原理:</strong><ol><li><strong>基本原理:</strong> 传感器向手腕皮肤发射特定波长的光束。光束会穿透皮肤组织，一部分被血液、骨骼和组织吸收，另一部分被反射回来，由光电二极管接收。</li><li><strong>心率 (HR):</strong> 血液中的血红蛋白会吸收光线。每次心跳，手腕处的毛细血管会扩张，血流量增加，吸收的光也就越多，导致反射回来的光变少。这种有规律的反射光强度变化，就形成了脉搏波（PPG信号），这个波的频率就是你的心率。通常使用<strong>绿光LED</strong>测量心率，因为它对运动干扰的抵抗性较好。</li><li><strong>血氧 (SpO2):</strong> 这个过程需要<strong>红光</strong>和<strong>红外光</strong>两种LED。含氧血红蛋白和脱氧血红蛋白对这两种光的吸收率是不同的。通过测量这两种光被吸收的比例差异，设备就可以计算出血液中的氧气饱和度。</li><li><strong>血压 (BP):</strong> PPG传感器不能像医用袖带那样直接测量血压。它主要是通过分析PPG波形的特征（如波峰的形状、传播速度等）来<strong>估算血压的变化趋势</strong>。这是一个复杂的算法领域，通常需要结合大量数据进行校准，目前主要用于健康趋势追踪而非医疗诊断。</li></ol></li><li><strong>可实现的扩展功能:</strong><ul><li><strong>心率变异性 (HRV):</strong> 测量每次心跳之间微小的时间间隔差异。HRV是评估自主神经系统健康状况、压力水平、身体恢复程度的重要指标，是一个极具价值的健康功能。</li><li><strong>压力水平监测:</strong> 结合HRV数据和加速度数据，可以全天候、自动化地评估用户的生理压力水平。</li><li><strong>呼吸率 (Respiration Rate):</strong> 呼吸会引起胸腔起伏，从而对血液循环产生微弱的周期性影响。通过高级信号处理技术，可以从PPG信号中提取出这种微弱的调制，从而计算出呼吸频率。</li><li><strong>房颤风险提示 (Atrial Fibrillation Alert):</strong> 通过持续监测心跳节律是否规整，算法可以初步筛查心房颤动（一种常见的心律失常）的风险，并提醒用户咨询医生。（非医疗用途）</li></ul></li></ul><h3 id="初步物料规划与总结"><a href="#初步物料规划与总结" class="headerlink" title="初步物料规划与总结"></a>初步物料规划与总结</h3><p>下表是我对于此项目涉及物料型号的初步设想：</p><table><thead><tr><th align="left">阶段</th><th align="left">类别</th><th align="left">元件 (Component)</th><th align="left">功能描述</th><th align="left">选型理由</th></tr></thead><tbody><tr><td align="left"><strong>Demo阶段</strong><br><em>(目标：1个月内快速验证核心功能)</em></td><td align="left"><strong>核心控制与通信</strong></td><td align="left"><strong>Nordic nRF52840 模组</strong><br>(例如: 亿佰特 E73-2G4M08S1E)</td><td align="left"><strong>主控MCU</strong> + <strong>低功耗蓝牙5.x通信</strong>。负责运行所有代码、处理数据并与手机通信。</td><td align="left"><strong>超低功耗</strong>，是长续航的基础；强大的<strong>Cortex-M4F内核</strong>，能高效处理信号算法；<strong>成熟的SDK和社区</strong>，开发迅速；<strong>使用模组</strong>可规避射频设计风险。</td></tr><tr><td align="left"></td><td align="left"><strong>运动传感</strong></td><td align="left"><strong>Bosch BMI270</strong><br>(六轴IMU)</td><td align="left"><strong>计步器</strong>，基础运动姿态识别。</td><td align="left"><strong>超低功耗</strong>，体积极小；<strong>自带计步器处理引擎</strong>，可分担主控MCU的计算压力，进一步省电。</td></tr><tr><td align="left"></td><td align="left"><strong>生物传感</strong></td><td align="left"><strong>Maxim&#x2F;ADI MAX86150</strong><br>(PPG+ECG模拟前端)</td><td align="left"><strong>采集心率(HR)和血氧(SpO2)的PPG信号</strong>。</td><td align="left"><strong>高信噪比</strong>，这是解决毛发、深肤色等干扰问题的硬件基础；<strong>高度可配置</strong>，便于算法调试和优化；<strong>集成ECG</strong>，为后续升级预留了硬件空间。</td></tr><tr><td align="left"></td><td align="left"><strong>环境传感</strong></td><td align="left"><strong>Bosch BMP390</strong><br>(气压计)</td><td align="left">测量大气压强，用于<strong>计算爬楼层数</strong>。</td><td align="left"><strong>高精度</strong>，能分辨细微的高度变化，确保楼层统计准确；<strong>功耗极低</strong>，易于集成。</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><strong>后续扩展阶段</strong><br><em>(目标：丰富产品功能，提升竞争力)</em></td><td align="left"><strong>生物传感 (升级)</strong></td><td align="left"><strong>利用MAX86150的ECG功能</strong></td><td align="left">采集<strong>心电信号(ECG)<strong>，计算</strong>心率变异性(HRV)<strong>，用于</strong>压力等级评估</strong>。</td><td align="left"><strong>硬件已存在</strong>，此为软件和算法层面的重大升级；HRV是衡量健康和压力的重要指标，能极大提升产品价值；需配合外壳的<strong>电极设计</strong>。</td></tr><tr><td align="left"></td><td align="left"><strong>体温传感</strong></td><td align="left"><strong>Maxim&#x2F;ADI MAX30205</strong></td><td align="left"><strong>测量皮肤温度</strong>，提供体温变化趋势。</td><td align="left"><strong>医用级精度</strong>；I2C接口，易于集成；功耗低，是现代健康追踪设备的标配功能。</td></tr><tr><td align="left"></td><td align="left"><strong>用户交互</strong></td><td align="left"><strong>线性谐振执行器 (LRA)</strong> &#x2F;<br> <strong>偏心转子马达 (ERM)</strong></td><td align="left"><strong>振动提醒</strong>，用于消息通知、闹钟或健康预警。</td><td align="left">极大地提升用户体验，是智能穿戴设备必备的交互方式。LRA马达的振感更细腻。</td></tr><tr><td align="left"></td><td align="left"><strong>高级传感 (可选)</strong></td><td align="left"><strong>MEMS 麦克风</strong></td><td align="left"><strong>语音指令</strong>，环境噪音监测。</td><td align="left">为未来的智能助手、通话或健康（如打鼾监测）功能提供硬件基础。需要MCU具备PDM&#x2F;I2S接口（nRF52840支持）。</td></tr></tbody></table><h2 id="供电与电池方案"><a href="#供电与电池方案" class="headerlink" title="供电与电池方案"></a>供电与电池方案</h2><p><strong>供电</strong>的设计和选型非常重要，尤其是对于内部空间本就受限的嵌入式可穿戴设备，在电池、电源管理系统、供电路径及布局方面都需要特别考量，以下是我对该项目供电设计方面的初期规划。</p><h3 id="电池选型"><a href="#电池选型" class="headerlink" title="电池选型"></a>电池选型</h3><p>作为空间极度受限的可穿戴设备，需要使用 <strong>高能量密度</strong>、<strong>形态灵活</strong>、<strong>重量轻</strong>的 <strong>锂聚合物电池</strong>。<br>对于聚合物电池的容量问题，我参考了市面上常见的可穿戴设备。对于大小与 <strong>普通手表</strong> 相近的可穿戴设备，它们的电池容量在250mAh - 400mAh之间，而对于需要更高便携性、更高集成度的<strong>手环类</strong>穿戴设备，它们的电池容量在50mAh - 150mAh之间。为了适应高续航、多功能和小体积的三重制约，我初步将电池容量假定在 <strong>200mAh</strong>，实际的电池选型也应位于这个数值上下，以保证兼顾设计需求。</p><h3 id="电源管理方案"><a href="#电源管理方案" class="headerlink" title="电源管理方案"></a>电源管理方案</h3><p>有了电池，我们还需要一个“大管家”来负责充电、放电保护和电压转换。使用分立元件（充电IC+LDO+DCDC）的传统方案会占用大量PCB面积，因此，<strong>高度集成的电源管理芯片 (PMIC)</strong> 是最佳选择。</p><ul><li><p><strong>方案：使用专为可穿戴设备设计的 PMIC，首选 Nordic nPM1100。</strong></p></li><li><p><strong>理由:</strong></p><ol><li><strong>高集成度，节省空间:</strong> nPM1100 在一块仅 <code>2.075 x 2.075 mm</code> 的芯片上，集成了<strong>线性充电器</strong>、<strong>高效降压转换器(Buck Converter)</strong> 和<strong>电池保护</strong>功能。这对于寸土寸金的手表PCB来说至关重要。</li><li><strong>高效率，延长续航:</strong> 相比于只能用LDO（线性稳压器）的简单方案，nPM1100 内置的高效Buck转换器可以将电池电压（3.0-4.2V）高效地转换为芯片需要的低电压（如1.8V或3.3V），转换效率可达90%以上，极大地减少了电量浪费。</li><li><strong>协同生态系统:</strong> nPM1100 是 Nordic 专门为 nRF52&#x2F;nRF53 系列设计的，两者协同工作可以达到最佳的功耗表现。</li><li><strong>为太阳能充电预留接口:</strong> PMIC通常支持多路电源输入，考虑到未来使用太阳能充电的需求，未来可以方便地将太阳能电池板作为另一路输入进行管理。</li></ol></li></ul><h3 id="电源树与电压轨设计"><a href="#电源树与电压轨设计" class="headerlink" title="电源树与电压轨设计"></a>电源树与电压轨设计</h3><p>电源树描述了电能从源头到各个用电元件的路径。一个清晰的电源树设计如下：</p><ol><li><p><strong>充电路径:</strong></p><ul><li>外部 <code>USB (5V)</code> -&gt; <code>PMIC (nPM1100)</code> -&gt; <code>3.7V Li-Po 电池</code></li></ul></li><li><p><strong>供电路径:</strong></p><ul><li><code>3.7V Li-Po 电池</code> -&gt; <code>PMIC (nPM1100)</code> -&gt; 高效Buck转换器 -&gt; 输出 <strong><code>1.8V</code></strong> 的主系统电压 **(VSYS)**。<ul><li><strong><code>VSYS (1.8V)</code></strong> 直接供给 <strong>nRF52840</strong> 的主电源。nRF52840可以在1.8V下全功能运行，电压越低，功耗越低。</li></ul></li><li><code>VSYS (1.8V)</code> -&gt; <strong>一颗小型的升压转换器 (Boost Converter)</strong> -&gt; 输出 <strong><code>3.3V</code></strong> 的传感器电压 **(VSEN)**。<ul><li><strong><code>VSEN (3.3V)</code></strong> 供给 <strong>BMI270</strong>, <strong>BMP390</strong>, <strong>MAX86150</strong> 等需要较高电压的传感器。</li></ul></li><li><strong>PPG LED供电:</strong> MAX86150 内部集成了独立的LED驱动器，可以直接由电池供电，以提供足够大的驱动电流，无需外部额外处理。</li></ul></li></ol><blockquote><p>1.8V的<code>VSYS</code>主系统电压是现代低功耗设计的核心思想。让核心处理器运行在尽可能低的电压下，可以极大地降低动态功耗。而传感器需要较高电压时，再通过一个高效的Boost“按需升压”，从而实现整个系统的功耗最优化。</p></blockquote><h3 id="功耗估算与续航分析"><a href="#功耗估算与续航分析" class="headerlink" title="功耗估算与续航分析"></a>功耗估算与续航分析</h3><p><strong>假设:</strong></p><ul><li>电池容量: <strong>150mAh</strong></li><li>工作周期: 60秒</li><li><strong>活动状态 (2秒):</strong> MCU唤醒，所有传感器采集数据，BLE传输数据。<ul><li>估算平均电流: <strong>~12mA</strong> (这是一个比较保守的高值)</li></ul></li><li><strong>睡眠状态 (58秒):</strong> nRF52840进入System ON的深度睡眠模式，仅RTC运行。<ul><li>估算平均电流: <strong>~5µA</strong> (0.005mA) (nRF52840可以做到更低)</li></ul></li></ul><p><strong>计算平均电流:</strong></p><p><img src="/images/post-20251014/image.png" alt="1"><br><img src="/images/post-20251014/image-1.png" alt="2"></p><p><strong>计算理论续航时间:</strong></p><p><img src="/images/post-20251014/image-2.png" alt="3"></p><p><strong>结论:</strong><br>即使在比较保守的电流估算下，采用<strong>150mAh的锂聚合物电池</strong>，配合以<strong>Nordic nPM1100为核心的高效PMIC</strong>和优化的电源树设计，实现<strong>超过5天（理论可达15天）</strong>的续航目标是<strong>完全可行</strong>的。这个估算为我们的方案提供了强有力的数据支撑。</p><h2 id="关键：解决毛发遮挡问题"><a href="#关键：解决毛发遮挡问题" class="headerlink" title="关键：解决毛发遮挡问题"></a>关键：解决毛发遮挡问题</h2><p>对于不同人群，佩戴此设备部位的毛发量存在较大差异，在与研发团队的探讨中，解决毛发造成的信号和测量干扰问题成为了设计的关键，下面，我将从</p><ul><li>毛发密集区域对测量造成的干扰</li><li>物理设计方面的解决方案</li><li>电路选型、PCB Layout方面解决方案</li><li>数字信号处理方向的最终优化</li></ul><p>几个方面来展开探讨毛发的影响和解决思路。</p><h3 id="毛发遮挡带来的问题"><a href="#毛发遮挡带来的问题" class="headerlink" title="毛发遮挡带来的问题"></a>毛发遮挡带来的问题</h3><p>在寻找解决方式之前，首先需要客观的分析毛发对这种光电容积脉搏波（PPG）技术测量结果造成的影响。如上文的技术阐释所说，这种传感器的测量核心依赖是脉搏造成的皮下毛细血管血液容量的微小变化，而毛发和毛囊（尤其是深色毛发），总的来说，会造成整个测量的信噪比（SNR）的急剧下降。</p><p>毛发会在物理和光学层面主要造成下面的两个问题，每个问题又会在信号采集层面造成如下的影响：</p><ol><li><strong>光吸收与散射:</strong> 毛发和毛囊会大量吸收和散射传感器发出的光。这导致两个严重问题：<ul><li><strong>直流(DC)分量减弱:</strong> 总反射回光电二极管（PD）的光强度（即DC信号）大幅降低。</li><li><strong>交流(AC)分量淹没:</strong> 我们真正关心的、由心跳引起的微弱搏动信号（AC信号）相对于DC信号本来就很小（通常只有1-2%）。当DC信号本身就因遮挡而很弱时，AC信号就更容易被各种噪声（电路噪声、运动噪声）所淹没。</li></ul></li><li><strong>光学耦合不佳:</strong> 毛发在传感器和皮肤之间形成了一个间隙，降低了光学耦合效率，并可能让环境光从侧面漏入，进一步干扰测量。</li></ol><p>因此，我们所有努力的核心目标，都是在这些不利条件下，<strong>最大限度地提升PPG信号的信噪比</strong>。</p><h3 id="从多个层面的解决思路"><a href="#从多个层面的解决思路" class="headerlink" title="从多个层面的解决思路"></a>从多个层面的解决思路</h3><p>毛发干扰，归根结底会严重降低信噪比。考虑到这个因素取决于硬件的诸多物理特性和软件的后续滤波和数据计算，单一的方法无法根治这个问题。我们必须从 <strong>多个层面</strong> 实现协同设计。</p><p>我参考了一些与之相关的项目和论文，将按照以下三个主要方面进行展开论述。</p><h4 id="物理与结构设计：优化光路"><a href="#物理与结构设计：优化光路" class="headerlink" title="物理与结构设计：优化光路"></a>物理与结构设计：优化光路</h4><p>这是最直接、最基础的层面，目标是创造一个最佳的测量环境。</p><ul><li><p><strong>增加恒定的接触压力:</strong></p><ul><li><strong>论证:</strong> 合理的机械设计，例如采用有一定弧度的表背和弹性的表带，可以确保传感器模组与皮肤保持紧密、恒定的贴合。根据多篇关于PPG信号质量的研究（例如，一些发表在<em>IEEE Sensors Journal</em>上的论文），适度的压力可以暂时性地压平或拨开毛发，并排挤出一部分组织液，让传感器更接近毛细血管，从而显著增强信号质量。</li><li><strong>方案:</strong> 设计产品外壳时，在传感器模组周围增加一圈微凸的环形结构，确保佩戴时能集中压力在传感区域。</li></ul></li><li><p><strong>优化光学隔离:</strong></p><ul><li><strong>论证:</strong> 必须严格防止LED发出的光在未进入皮肤组织的情况下就直接“泄露”到光电二极管上，这个现象称为光学串扰 （Optical Crosstalk）。在毛发区域，光线更容易在皮肤表面发生漫反射，加剧串扰。MAX86150等光电传感器的数据手册对此做了严谨的规定，以保证在安装的过程中避免这种串扰现象的产生。</li><li><strong>方案:</strong> 在PCB设计和外壳结构上，必须在LED和光电二极管之间设计一个物理性的光学隔离带。通常使用黑色的泡棉、硅胶或塑料结构来实现，这是专业穿戴设备设计的标准做法。</li></ul></li></ul><h4 id="光学与硬件设计-增强信号源头"><a href="#光学与硬件设计-增强信号源头" class="headerlink" title="光学与硬件设计: 增强信号源头"></a>光学与硬件设计: 增强信号源头</h4><p>当物理条件优化后，我们需要从硬件本身获取最强的原始信号。这个优化方案在信号源层面增强了DC分量，同时使AC分量的有效值更为凸显。</p><ul><li><p><strong>动态调整LED驱动电流:</strong></p><ul><li><strong>论证:</strong> 专业AFE芯片（如MAX86150）允许通过I2C动态配置LED的驱动电流。这为我们实现一个闭环控制系统提供了可能。</li><li><strong>方案:</strong> 在固件中设计一个算法。在每次测量前，首先用一个较小的电流点亮LED，测量反射光的DC强度。如果DC强度低于某个阈值（这表明光学耦合很差，很可能遇到了毛发或深肤色），MCU可以立即通过I2C指令，提高LED的驱动电流，用更强的光 <strong>“穿透”干扰层</strong> 。待信号稳定后，再恢复到正常电流以节省功耗。</li></ul></li><li><p><strong>多波长&#x2F;多通道传感:</strong></p><ul><li><strong>论证:</strong> 相关研究表明，不同波长的光（如绿光、红光、红外光）在皮肤中的穿透深度和对运动的敏感度各不相同。例如，绿光（<del>530nm）对运动干扰的鲁棒性最好，但穿透浅；红外光（</del>940nm）穿透深，但对运动敏感。同时使用多个光电二极管接收信号，可以从不同位置捕获信号，总有一个位置的信号质量会更好。</li><li><strong>方案:</strong><ol><li><strong>硬件层面:</strong> 选用支持多通道同步采样的AFE芯片。</li><li><strong>算法层面:</strong> 算法可以融合来自不同波长或不同PD通道的数据，或者根据**信号质量指数(SQI)**动态选择当前质量最好的那个通道的数据进行分析。</li></ol></li></ul></li></ul><h4 id="信号处理与算法-提纯微弱信号"><a href="#信号处理与算法-提纯微弱信号" class="headerlink" title="信号处理与算法: 提纯微弱信号"></a>信号处理与算法: 提纯微弱信号</h4><p>这是最后，也是最关键的一道防线。此时我们拿到的是一个可能依然被噪声污染的信号，需要用算法进行提纯。</p><ul><li><p><strong>运动伪影去除 (Motion Artifact Removal - MAR):</strong></p><ul><li><strong>论证:</strong> 手臂的运动是PPG信号最大的噪声源，其影响甚至超过毛发。学术界和工业界投入了大量精力研究MAR算法。目前最主流和有效的方法是<strong>利用加速度传感器的数据作为噪声参考</strong>，通过<strong>自适应滤波 (Adaptive Filtering)</strong> 技术来消除运动噪声。</li><li><strong>方案:</strong> 采集PPG信号的同时，同步采集三轴加速度计的数据。实现一个<strong>LMS (Least Mean Squares) 或 RLS (Recursive Least Squares) 自适应滤波器</strong>。该滤波器能够“学习”到加速度信号（运动）和PPG信号中噪声部分的相关性，然后从原始PPG信号中“减去”这部分运动伪影，从而提纯出真实的心率搏动波形。这是保证在日常活动中测量准确性的核心技术。</li></ul></li><li><p><strong>信号质量评估 (Signal Quality Index - SQI):</strong></p><ul><li><strong>论证:</strong> 与其处理一个完全无法挽救的坏信号，不如直接识别并丢弃它。SQI算法就是这个“质检员”。</li><li><strong>方案:</strong> 在计算心率、血氧等参数之前，先对每一段（例如2-5秒）的PPG波形进行质量打分。评估指标可以包括：<strong>信号的周期性、波形与标准脉搏波形的相似度、信号的能量分布</strong>等。只有当SQI分数高于预设阈值时，才认为这段数据有效并进行后续计算。这可以有效避免出现离谱的错误读数。</li></ul></li></ul><h3 id="实施与验证路径"><a href="#实施与验证路径" class="headerlink" title="实施与验证路径"></a>实施与验证路径</h3><ol><li><strong>阶段一 (硬件):</strong> 基于以上思路，完成采用<strong>高信噪比AFE (如MAX86150)<strong>、并带有</strong>良好光学隔离结构</strong>的原型板设计。</li><li><strong>阶段二 (数据采集):</strong> 招募一个包含不同肤色、不同手臂毛发密度的测试小组，采集同步的PPG和三轴加速度数据，建立我们自己的信号数据库。</li><li><strong>阶段三 (算法研发):</strong> 在MATLAB或Python中，使用采集到的数据，对上述的MAR和SQI算法进行开发、调试和验证。</li><li><strong>阶段四 (固件移植):</strong> 将验证有效的算法用C语言实现，并移植到nRF52芯片上，进行实机测试和优化。</li></ol><p><strong>总结:</strong> 解决毛发干扰问题，绝非单一技术可以实现，它是一个典型的系统工程。我们需要通过 <strong>物理结构优化 → 硬件动态自适应 → 软件算法提纯</strong> 这样一套组合拳，层层递进，才能在各种挑战性场景下，获得稳定、可靠的人体生理数据。</p><h2 id="产品设计周期和规划"><a href="#产品设计周期和规划" class="headerlink" title="产品设计周期和规划"></a>产品设计周期和规划</h2><p>进行了技术分析之后，我需要对产品的设计周期产生一个初步的规划，这个规划结合了我与研发团队的第一次初步沟通获得的信息，以及我对整个产品所涉及的设计流程进行的调研结果。我将整个产品的设计规划大致分为三个阶段，这是现代科技产品的开发较为常见的迭代验证和测试方法。</p><p><strong>第一阶段：概念设计</strong></p><ul><li><strong>目标</strong>：确定产品的定位，确定整体设计方向和核心功能规格，最终确定”我们需要做什么“。</li><li><strong>主要工作</strong>：<ul><li>进行市场研究，确定面向的用户群体</li><li>绘制设计草图，确定产品的目标形态（必要时，可通过3D打印设计手板模型，有助于更好的形态选择）</li><li>分析功能需求，将功能、性能指标、设计约束和标准以文档形式呈现。</li></ul></li><li><strong>阶段交付成果</strong>：<ul><li>产品的初步外观设计图</li><li>产品需求文档（作为后续项目指导纲要、项目组一致审核通过）</li></ul></li></ul><p><strong>第二阶段：工程验证</strong></p><ul><li><strong>目标</strong>：验证工程可行性，实现基础系统和数据采集 -&gt; 处理 -&gt; 传输通路，从零开始设计与调试软件驱动及信号处理算法</li><li><strong>主要工作</strong>：<ul><li>根据产品需求决定最终芯片及物料选型</li><li>执行 Schematic &#x2F; PCB 设计，此电路板作为项目的原型测试板，预留数据传输和调试接口</li><li>PCB打样、焊接、电路调试，保证芯片可以启动，各个元件可以工作，电路连通。</li><li>开发基础固件和算法，保证数据可以通畅上传到上位机，运动和生物学基础数据可以从原始数据中高保真的解析</li></ul></li><li><strong>阶段交付成果</strong>：<ul><li>原型电路板</li><li>功能演示</li><li>含有详细硬件指标（电源，功耗，数据链路传输）的技术测试报告</li></ul></li><li><strong>预期时间</strong>：1个月</li></ul><p><strong>第三阶段：设计验证</strong><br><strong>概述</strong>：这一阶段主要将上述设计的原型电路进行优化，比如缩小PCB体积，重新排列元器件和设计最终版本的外壳，测试产品可量产性、工作性能和可靠性，最终投入量产和商业化阶段。</p><p>这几个阶段是循序渐进且迭代验证的，保证了产品开发的顺利和稳定，可以避免开发过程中的分歧与失误。其中，原型电路与固件开发验证是本项目最具挑战的部分，也是前文内容的规划所在。</p><h2 id="关于未来设计——太阳能电池的思考"><a href="#关于未来设计——太阳能电池的思考" class="headerlink" title="关于未来设计——太阳能电池的思考"></a>关于未来设计——太阳能电池的思考</h2><p>在有限空间内集成太阳能充电，其目标不是“快速充满”，而是通过“涓流充电”显著延长电池的续航时间。实现这一功能，需从以下三方面进行规划：</p><ul><li><p><strong>1. 太阳能电池板技术选型：</strong><br>  必须选用在<strong>室内弱光和漫射光</strong>下依然能高效发电的电池技术。传统的单晶硅不适合此场景。应重点考察：</p><ul><li><strong>柔性光伏电池（如OPV, 钙钛矿）：</strong> 这类技术可弯曲，适合集成到<strong>表带</strong>上，以获取最大的受光面积。</li><li><strong>半透明光伏电池：</strong> 可叠层于设备屏幕之上（若有屏幕），是空间利用率最高的方案，但技术复杂且成本高。</li><li><strong>表圈集成：</strong> 将高效太阳能电池切割并集成到表盘周边的<strong>表圈</strong>上（如Garmin Fenix系列的做法）。</li></ul></li><li><p><strong>2. 专用的电源管理电路 (PMIC)：</strong><br>  原有的PMIC（如nPM1100）可能不足以支持。必须引入支持<strong>能量收集 (Energy Harvesting)</strong> 的专用PMIC。</p><ul><li>该PMIC需具备<strong>超低静态功耗</strong>（纳安级别）和<strong>最大功率点跟踪 (MPPT)</strong> 功能。</li><li>MPPT功能至关重要，它能实时“榨取”太阳能电池在不同光照条件下所能输出的最大功率，效率远高于简单的线性充电。</li></ul></li><li><p><strong>3. 空间与结构集成：</strong></p><ul><li><strong>方案A (表带集成)：</strong> 将柔性太阳能电池嵌入表带。这是获取最大采光面积的方案，但挑战在于需要设计一条极其耐用、耐弯折的柔性电路（FPC）将电能从表带传输到手表主体。</li><li><strong>方案B (表圈集成)：</strong> 空间受限，但技术相对成熟，结构可靠性高。这对工业设计提出了很高的要求，需要将电池与表圈结构一体化设计。</li><li>两种方案都需要与结构工程师紧密协作，在设计初期就预留出电池、PMIC以及相应连接器的空间。</li></ul></li></ul><p>综上所述，太阳能电池在智能穿戴设备中的集成是可行的，但是对于空间严重受限的手环、手表等设备，技术难度将会显著提高。相比于一些在常规尺寸电路板（甚至是分立的电源供电电路）上采用的电源管理+能量收集的方案，在手表中集成这一创新设计面临着元件重新选型、材料限制、成本控制等问题，这是一个需要集思广益与共同研发的前瞻性课题。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇调研和规划仍具有许多不足之处，希望老师与团队负责人提出宝贵意见！</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li>Quantifying the Impact of Hair and Skin Characteristics on fNIRS Signal Quality for Enhanced Inclusivity — M. A. Yücel et al., 2024</li><li>A preliminary exploration of hair color, hair cleanliness, light and their effects on fNIRS signals — M. Holmes et al., 2024</li><li>Remote photoplethysmography with a high-speed camera reveals temporal and amplitude differences between glabrous and non-glabrous skin — M. Cao et al., Sensors, 2023</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> IoT </tag>
            
            <tag> BLE </tag>
            
            <tag> nRF52 </tag>
            
            <tag> Smart Wear </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】适用于静态博客的无障碍AI朗读插件部署程序（开源）</title>
      <link href="/2025/08/19/post-2025819/"/>
      <url>/2025/08/19/post-2025819/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了作者近期开发的一个集成了AI语音生成，大语言模型和一键部署程序的个人博客语音朗读插件生成工具。此工具可以一键部署，一键生成语音，自动插入朗读播放模块并一键执行博客编译和上传操作。</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><del>众所周知</del> ，笔者本人是一名视力障碍人士，虽然没有到看不了屏幕的程度，但在阅读博客中的大段文本时，常常也会感到十分困难和不适。加上许多宝子也有听书的爱好，于是在打完比赛的间隙，着手开发了一个集成了AI语音生成，大语言模型和一键部署程序的个人博客语音朗读插件生成工具。</p><h1 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h1><h2 id="适用博客类型"><a href="#适用博客类型" class="headerlink" title="适用博客类型"></a>适用博客类型</h2><p>本工具专为Hexo等静态网页博客系统打造，与<code>Hexo Butterfly</code>主题深度契合。在理论上，该工具也可移植到所有可以渲染<code>Markdown</code>格式文本的网页系统。</p><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><p>首先，需要从开源地址获取工具链。 <a href="https://github.com/18650official/hexo-accessble-voice-tools">【戳我】</a><br>目前，该工具已经支持一键部署，请把下载的<code>one-key-tools</code>文件夹放在博客根目录之下。</p><h3 id="API-Key获取"><a href="#API-Key获取" class="headerlink" title="API Key获取"></a>API Key获取</h3><p>使用阿里云语音合成服务和通义大模型均需要申请API密钥，你可以按照如下方法进行申请。</p><h4 id="注册阿里云语音服务"><a href="#注册阿里云语音服务" class="headerlink" title="注册阿里云语音服务"></a>注册阿里云语音服务</h4><p>阿里云语音服务合成速度快，且支持专门的长文本输入，无需对文本进行进一步分割等复杂操作，下面简述一下注册流程。<br><strong>注册阿里云账户：</strong> 访问<a href="https://www.aliyun.com/">阿里云官网</a>。点击右上角的“免费注册”，按照提示填写手机号或邮箱完成注册。</p><p><strong>获取语音合成服务：</strong> 进入阿里云的<a href="https://nls-portal.console.aliyun.com/overview">功能面板</a>，找到 <strong>智能语音交互2.0</strong> 服务组件，点击开通服务。此服务包含了一系列的语音识别和语音合成，我们找到“长文本语音合成”组件，这个组件目前只支持付费用户，但实际上点击“升级付费用户”并不会收取费用，而是提供了一定的免费额度。我们点击升级按钮，启用这个服务。</p><p><strong>获取产品密钥和用户密钥：</strong> 打开语音服务的实例后，点击“查看使用文档”打开产品文档，根据指导获取密钥。一般来说，产品密钥APPKey在你控制台的产品列表中，用户的<code>AccessKey</code>密钥对在右上角头像的“权限与安全”一项获取。</p><p>完成操作后，你会得到三个密码，分别是<code>AppKey</code>，<code>AK_ID</code>，<code>AK_Secret</code>。请存放在一个安全的文件中。</p><h4 id="注册-通义API-账户-通过阿里云平台"><a href="#注册-通义API-账户-通过阿里云平台" class="headerlink" title="注册 通义API 账户 (通过阿里云平台)"></a>注册 通义API 账户 (通过阿里云平台)</h4><p>通义千问是阿里云旗下的大模型服务，要使用其 API，你需要先注册一个阿里云账户，并进行实名认证。</p><p><strong>注册阿里云账户：</strong> 访问<a href="https://www.aliyun.com/">阿里云官网</a>。点击右上角的“免费注册”，按照提示填写手机号或邮箱完成注册。</p><p><strong>完成实名认证：</strong> 为了使用大部分阿里云服务（包括大模型 API），你必须完成实名认证。登录账户后，导航到“控制台”或个人中心，根据指引完成个人或企业实名认证。这通常需要上传身份证信息。</p><p><strong>开通通义千问服务：</strong> 在阿里云控制台中，搜索“大模型服务平台”或“通义千问”。进入服务页面，根据提示开通该服务。</p><p><strong>获取 API Key：</strong> 在服务开通后，你可以在 API 管理或密钥管理页面找到你的 API Key。API Key 是访问 API 的凭证，请务必妥善保管，不要泄露</p><h3 id="部署脚本执行"><a href="#部署脚本执行" class="headerlink" title="部署脚本执行"></a>部署脚本执行</h3><p>此时，你会获得阿里云的4个API密钥。打开一键配置工具文件夹的<code>key.txt</code>文件，分别将通义密钥、阿里云语音服务密钥和用户密钥按照文件指导存放在文件的前4行。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">******</span><br><span class="line">******</span><br><span class="line">******</span><br><span class="line">****** &lt;以上为密码&gt;</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment"># 按照以下顺序在三行中分别粘贴你的密钥：</span></span><br><span class="line"><span class="comment"># 1. 通义千问 API Key: 用于 gen_abstract.py 脚本来生成文章摘要。</span></span><br><span class="line"><span class="comment"># 2. 阿里云 AccessKey ID: 用于 gen_audio.py 脚本进行身份验证。</span></span><br><span class="line"><span class="comment"># 3. 阿里云 AccessKey Secret: 用于 gen_audio.py 脚本进行身份验证。</span></span><br><span class="line"><span class="comment"># 4. 阿里云 语音服务 Appkey: 用于 gen_audio.py 脚本指定语音合成应用。</span></span><br></pre></td></tr></table></figure><p>双击打开<code>setup.bat</code>文件，系统将自动释放工程脚本，自动完成<code>Python</code>和必要工作环境的部署，并且自动修改主题配置文件<code>_config.butterfly.yml</code>以及根据你的API Key，自动将密钥填入脚本文件中。</p><h3 id="文件概述和使用方法"><a href="#文件概述和使用方法" class="headerlink" title="文件概述和使用方法"></a>文件概述和使用方法</h3><p>解压后的工具总共包含以下文件：</p><ul><li><code>gen_abstract.py</code>：摘要生成程序</li><li><code>gen_audio.py</code>：语音合成程序</li><li><code>gen_tag.py</code>：文字处理程序，用于安放文本中播放器和摘要控件的位置</li><li><code>gen_site.sh</code>：<strong>Git Bash</strong>脚本，用于统一执行上述脚本文件</li></ul><p>在博客文件夹下打开<code>Git Bash</code>（一般而言，部署了Hexo和Node.js工具的一般都会涉及到Git的安装），只需要执行<code>./gen_site.sh</code>，即可对每篇文章生成自然的AI配音并自动加入朗读控件和配置表单，而后自动执行Hexo静态站点的清理和创建。<br>你还可以使用参数：</p><ul><li><code>-s</code>：将主机作为服务器，实行本地预览。</li><li><code>-d</code>：执行生成后，自动执行默认的<code>hexo deploy</code>操作，博客推送到Github等网页托管服务器。</li></ul><p>执行的效果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">正在执行步骤 1/4：生成文章音频...</span><br><span class="line">✅ Token 获取成功。</span><br><span class="line"></span><br><span class="line">开始扫描并处理 Markdown 文件...</span><br><span class="line">√ 音频文件 post-2024718.wav 已存在，跳过生成。</span><br><span class="line">...</span><br><span class="line">-&gt; 语音合成排队中...请等待...</span><br><span class="line">✅ 语音合成任务完成！</span><br><span class="line">-&gt; 正在下载音频文件...</span><br><span class="line">✅ 成功保存最终音频文件：post-2025819.wav</span><br><span class="line">...</span><br><span class="line">正在执行步骤 2/4：生成文章摘要...</span><br><span class="line">开始扫描文件夹 <span class="string">&#x27;./source/_posts&#x27;</span> 以更新标签...</span><br><span class="line">-&gt; 成功更新 post-2024718.md，已替换为 Meting-js HTML 标签。</span><br><span class="line">...</span><br><span class="line">所有文件处理完毕。总耗时: 0.10秒。</span><br><span class="line">步骤 2/4 已完成：摘要文件生成完毕。</span><br><span class="line">正在执行步骤 3/4：清理 Hexo 缓存...</span><br><span class="line">INFO  Validating config</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>在执行生成之后，博文头部会出现一段精炼的摘要，以显示在博客首页，同时，头部会显示一个美观的播放器控件，可以流畅的朗迪文字，支持进度条控制。暂停重播、循环播放等功能。<br><strong>PC端界面：</strong><br><img src="/images/post_2025819/image1.png" alt="PC端"><br><strong>移动端界面：</strong><br><img src="/images/post_2025819/IMG_1955.PNG" alt="移动端显示"></p><h2 id="第一版特性简介"><a href="#第一版特性简介" class="headerlink" title="第一版特性简介"></a>第一版特性简介</h2><p>笔者并没有在网络上找到完整实现这一功能并封装的实例，因此这一项目是基本自己探索开发的，作为一个可以在纯前端的Hexo网页上运行的实例，该项目拥有以下特性：</p><ul><li>部署方便，快速，只需要非常简单的网络知识</li><li>在博客本身的<code>JS/CSS</code>层面改动较少，方便不同计算机之间的灵活转移</li><li>使用批处理脚本，可以一键在未完成的博文上智能添加控件，效率高</li><li>使用多线程和IO技术，在生成长文语音时支持自动分段和并行处理，大大降低了语音合成的时间开销</li><li>使用<code>CDN</code>加载开源<code>MetingJS</code>控件，支持缓冲播放，界面美观，在网速较慢时仍可流畅播放</li></ul><h1 id="开发过程和技术分享"><a href="#开发过程和技术分享" class="headerlink" title="开发过程和技术分享"></a>开发过程和技术分享</h1><h2 id="使用Aliyun-SDK实现音频合成"><a href="#使用Aliyun-SDK实现音频合成" class="headerlink" title="使用Aliyun SDK实现音频合成"></a>使用Aliyun SDK实现音频合成</h2><p>首先，由于是纯前端页面，笔者一开始考虑的是通过在<code>/themes/butterfly/source/js</code>和<code>/themes/butterfly/layout</code>下修改页面的<code>pug</code>和<code>css/js</code>文件，来显示表示播放和暂停的两个控件，且由于没有后端服务器，无法使用微软提供的SDK，因此也只能在网页端通过REST API，将网页内容实时发送到服务器，通过浏览器的<code>fetch</code>功能来解析链接，播放回传的<code>mp3</code>文件。<br>这一方法的最大缺点是需要完全加载后才能播放，速度慢，而且在遇到较长的文本时，需要处理非常长的时间甚至会因为微软API的最大长度限制而发送失败，体现为回传代码<code>200</code>，但是抛出<code>Http2 ProtocolError</code>错误，且配置十分复杂和麻烦，于是放弃。</p><p>接着，笔者尝试在本地部署时先生成音频文件，存储在<code>/source/audio</code>文件夹下，和博文同名，当脚本扫描到已经存在音频文件时，自动跳过生成。否则，文章会先被切片，去除代码块和会干扰到<code>SSML</code>解析的转义字符，上传到服务器生成<code>.wav</code>文件，最后将小的文件进行合并及写出。</p><p>一开始，笔者使用了微软Azure服务来生成语音，而且因为Azure对字数和时长都有限制，加上合成速度实在太慢，笔者加入了多线程技术，自动将文章分段并同步合成语音，最终通过<code>BytesIO</code>缓存和输出。但Azure的种种吃相还是太难看，而且我的账号今天到期了，然后就死活没法进行学术认证来续期，于是改成了阿里云API，相比之下，合成速度比Azure快了10倍，而且也没有了字数限制，在笔者最终的代码中，通过Http请求来发送文本、配置，读取排队状态和下载音频文件。</p><p>Python代码如下（可以通过代码框右侧按钮折叠）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处存放阿里云的认证信息</span></span><br><span class="line">ALIYUN_AK_ID = <span class="string">&#x27;&#x27;</span></span><br><span class="line">ALIYUN_AK_SECRET = <span class="string">&#x27;&#x27;</span></span><br><span class="line">ALIYUN_APPKEY = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.client <span class="keyword">import</span> AcsClient</span><br><span class="line"><span class="keyword">from</span> aliyunsdkcore.request <span class="keyword">import</span> CommonRequest</span><br><span class="line"><span class="keyword">import</span> aliyunsdkcore.acs_exception <span class="keyword">as</span> acs_exception</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义文件路径</span></span><br><span class="line"><span class="comment"># Define file paths</span></span><br><span class="line">POSTS_DIR = <span class="string">&#x27;source/_posts&#x27;</span></span><br><span class="line">AUDIO_DIR = <span class="string">&#x27;source/audio&#x27;</span></span><br><span class="line">MAX_CHARS_PER_CHUNK = <span class="number">1800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保音频目录存在</span></span><br><span class="line"><span class="comment"># Ensure the audio directory exists</span></span><br><span class="line">os.makedirs(AUDIO_DIR, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 阿里云 TTS API 相关类和函数</span></span><br><span class="line"><span class="comment"># Aliyun TTS API related classes and functions</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TtsHeader</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, appkey, token</span>):</span><br><span class="line">        self.appkey = appkey</span><br><span class="line">        self.token = token</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tojson</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;appkey&#x27;</span>: e.appkey, <span class="string">&#x27;token&#x27;</span>: e.token&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TtsContext</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, device_id</span>):</span><br><span class="line">        self.device_id = device_id</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tojson</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;device_id&#x27;</span>: e.device_id&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TtsRequest</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, voice, sample_rate, speed, <span class="built_in">format</span>, enable_subtitle, text</span>):</span><br><span class="line">        self.voice = voice</span><br><span class="line">        self.sample_rate = sample_rate</span><br><span class="line">        self.speed = speed</span><br><span class="line">        self.<span class="built_in">format</span> = <span class="built_in">format</span></span><br><span class="line">        self.enable_subtitle = enable_subtitle</span><br><span class="line">        self.text = text</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tojson</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;voice&#x27;</span>: e.voice, <span class="string">&#x27;sample_rate&#x27;</span>: e.sample_rate, <span class="string">&#x27;speech_rate&#x27;</span>: e.speed, <span class="string">&#x27;format&#x27;</span>: e.<span class="built_in">format</span>, <span class="string">&#x27;enable_subtitle&#x27;</span>: e.enable_subtitle, <span class="string">&#x27;text&#x27;</span>: e.text&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TtsPayload</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, enable_notify, notify_url, tts_request</span>):</span><br><span class="line">        self.enable_notify = enable_notify</span><br><span class="line">        self.notify_url = notify_url</span><br><span class="line">        self.tts_request = tts_request</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tojson</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;enable_notify&#x27;</span>: e.enable_notify, <span class="string">&#x27;notify_url&#x27;</span>: e.notify_url, <span class="string">&#x27;tts_request&#x27;</span>: e.tts_request.tojson(e.tts_request)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TtsBody</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, tts_header, tts_context, tts_payload</span>):</span><br><span class="line">        self.tts_header = tts_header</span><br><span class="line">        self.tts_context = tts_context</span><br><span class="line">        self.tts_payload = tts_payload</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tojson</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;header&#x27;</span>: e.tts_header.tojson(e.tts_header), <span class="string">&#x27;context&#x27;</span>: e.tts_context.tojson(e.tts_context), <span class="string">&#x27;payload&#x27;</span>: e.tts_payload.tojson(e.tts_payload)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_aliyun_token</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 AccessKey ID 和 AccessKey Secret 获取阿里云语音服务的 Token。</span></span><br><span class="line"><span class="string">    Uses AccessKey ID and AccessKey Secret to get a token for Aliyun Speech Service.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> ALIYUN_AK_ID == <span class="string">&#x27;your_ak_id&#x27;</span> <span class="keyword">or</span> ALIYUN_AK_SECRET == <span class="string">&#x27;your_ak_secret&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;错误：请先在脚本中填写你的 ALIYUN_AK_ID 和 ALIYUN_AK_SECRET。&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client = AcsClient(</span><br><span class="line">            ALIYUN_AK_ID,</span><br><span class="line">            ALIYUN_AK_SECRET,</span><br><span class="line">            <span class="string">&quot;cn-shanghai&quot;</span></span><br><span class="line">        )</span><br><span class="line">        request = CommonRequest()</span><br><span class="line">        request.set_method(<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line">        request.set_domain(<span class="string">&#x27;nls-meta.cn-shanghai.aliyuncs.com&#x27;</span>)</span><br><span class="line">        request.set_version(<span class="string">&#x27;2019-02-28&#x27;</span>)</span><br><span class="line">        request.set_action_name(<span class="string">&#x27;CreateToken&#x27;</span>)</span><br><span class="line">        response = client.do_action_with_exception(request)</span><br><span class="line">        jss = json.loads(response.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Token&#x27;</span> <span class="keyword">in</span> jss <span class="keyword">and</span> <span class="string">&#x27;Id&#x27;</span> <span class="keyword">in</span> jss[<span class="string">&#x27;Token&#x27;</span>]:</span><br><span class="line">            token = jss[<span class="string">&#x27;Token&#x27;</span>][<span class="string">&#x27;Id&#x27;</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;✅ Token 获取成功。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> token</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;获取 Token 失败：响应格式不正确。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> acs_exception.exceptions.ClientException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;获取 Token 失败：客户端异常，请检查你的 AK_ID 和 AK_SECRET。错误信息：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;获取 Token 失败：未知异常。错误信息：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wait_for_completion</span>(<span class="params">appkey, token, task_id, request_id</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    轮询检查阿里云语音合成任务的状态，直到完成。</span></span><br><span class="line"><span class="string">    Polls Aliyun TTS task status until completion.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    host = <span class="string">&#x27;nls-gateway-cn-shanghai.aliyuncs.com&#x27;</span></span><br><span class="line">    url = <span class="string">f&#x27;https://<span class="subst">&#123;host&#125;</span>/rest/v1/tts/async&#x27;</span></span><br><span class="line">    full_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>?appkey=<span class="subst">&#123;appkey&#125;</span>&amp;task_id=<span class="subst">&#123;task_id&#125;</span>&amp;token=<span class="subst">&#123;token&#125;</span>&amp;request_id=<span class="subst">&#123;request_id&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&gt; 正在等待语音合成任务完成...&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = urllib.request.urlopen(full_url).read()</span><br><span class="line">            jsonData = json.loads(result)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> jsonData.get(<span class="string">&quot;data&quot;</span>, &#123;&#125;).get(<span class="string">&quot;audio_address&quot;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;✅ 语音合成任务完成！&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> jsonData[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;audio_address&quot;</span>]</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;error_code&quot;</span> <span class="keyword">in</span> jsonData <span class="keyword">and</span> jsonData[<span class="string">&quot;error_code&quot;</span>] == <span class="number">20000000</span> <span class="keyword">and</span> <span class="string">&quot;data&quot;</span> <span class="keyword">in</span> jsonData:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;-&gt; 语音合成排队中...请等待...&quot;</span>)</span><br><span class="line">                time.sleep(<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;-&gt; 语音合成进行中...&quot;</span>)</span><br><span class="line">                time.sleep(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;网络请求失败: <span class="subst">&#123;e.reason&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;查询状态时发生未知错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">synthesize_to_audio</span>(<span class="params">appkey, token, text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用阿里云长文本语音合成 API 生成音频。</span></span><br><span class="line"><span class="string">    Generates audio using Aliyun long-text TTS API.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    host = <span class="string">&#x27;nls-gateway.cn-shanghai.aliyuncs.com&#x27;</span></span><br><span class="line">    url = <span class="string">f&#x27;https://<span class="subst">&#123;host&#125;</span>/rest/v1/tts/async&#x27;</span></span><br><span class="line">    http_headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造请求体</span></span><br><span class="line">    tr = TtsRequest(<span class="string">&quot;aiqian&quot;</span>, <span class="number">16000</span>, <span class="number">35</span>, <span class="string">&quot;wav&quot;</span>, <span class="literal">False</span>, text)</span><br><span class="line">    tp = TtsPayload(<span class="literal">False</span>, <span class="string">&quot;&quot;</span>, tr) <span class="comment"># 不使用回调，而是轮询</span></span><br><span class="line">    th = TtsHeader(appkey, token)</span><br><span class="line">    tc = TtsContext(<span class="string">&quot;mydevice&quot;</span>)</span><br><span class="line">    tb = TtsBody(th, tc, tp)</span><br><span class="line">    body = json.dumps(tb, default=tb.tojson)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = http.client.HTTPSConnection(host)</span><br><span class="line">        conn.request(method=<span class="string">&#x27;POST&#x27;</span>, url=url, body=body.encode(<span class="string">&#x27;utf-8&#x27;</span>), headers=http_headers)</span><br><span class="line">        response = conn.getresponse()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> response.status == <span class="number">200</span>:</span><br><span class="line">            jsonData = json.loads(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> jsonData[<span class="string">&#x27;error_code&#x27;</span>] == <span class="number">20000000</span>:</span><br><span class="line">                task_id = jsonData[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;task_id&#x27;</span>]</span><br><span class="line">                request_id = jsonData[<span class="string">&#x27;request_id&#x27;</span>]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 轮询等待任务完成并获取音频URL</span></span><br><span class="line">                audio_url = wait_for_completion(appkey, token, task_id, request_id)</span><br><span class="line">                <span class="keyword">return</span> audio_url</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;x 语音合成请求失败: <span class="subst">&#123;jsonData[<span class="string">&#x27;error_message&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;x HTTP 请求失败: <span class="subst">&#123;response.status&#125;</span> <span class="subst">&#123;response.reason&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;响应内容: <span class="subst">&#123;response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;x 语音合成请求时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Markdown 清理函数</span></span><br><span class="line"><span class="comment"># Markdown cleaning functions</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_markdown_for_tts</span>(<span class="params">markdown_text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    清洗 Markdown 文本，为 TTS 准备，移除代码块、链接、图片等非文本元素。</span></span><br><span class="line"><span class="string">    Cleans Markdown text for TTS, removing code blocks, links, images, etc.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 移除代码块</span></span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;```[\s\S]*?```&#x27;</span>, <span class="string">&#x27;&#x27;</span>, markdown_text)</span><br><span class="line">    <span class="comment"># 移除行内代码</span></span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;`([^`]+)`&#x27;</span>, <span class="string">r&#x27;\1&#x27;</span>, cleaned_text)</span><br><span class="line">    <span class="comment"># 移除标题</span></span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;^#+\s*&#x27;</span>, <span class="string">&#x27;&#x27;</span>, cleaned_text, flags=re.MULTILINE)</span><br><span class="line">    <span class="comment"># 移除图片和链接</span></span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;!*\[(.*?)\]\(.*?\)&#x27;</span>, <span class="string">r&#x27;\1&#x27;</span>, cleaned_text)</span><br><span class="line">    <span class="comment"># 移除粗体</span></span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;(\*\*|__)(.*?)\1&#x27;</span>, <span class="string">r&#x27;\2&#x27;</span>, cleaned_text)</span><br><span class="line">    <span class="comment"># 移除斜体</span></span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;(\*|_)(.*?)\1&#x27;</span>, <span class="string">r&#x27;\2&#x27;</span>, cleaned_text)</span><br><span class="line">    <span class="comment"># 移除列表项</span></span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;^\s*([*-]|\d+\.)\s+&#x27;</span>, <span class="string">&#x27;&#x27;</span>, cleaned_text, flags=re.MULTILINE)</span><br><span class="line">    <span class="comment"># 移除引用块</span></span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;^&gt;\s*&#x27;</span>, <span class="string">&#x27;&#x27;</span>, cleaned_text, flags=re.MULTILINE)</span><br><span class="line">    <span class="comment"># 移除分隔线</span></span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;^(\s*[-*_]\s*)&#123;3,&#125;\s*$&#x27;</span>, <span class="string">&#x27;&#x27;</span>, cleaned_text, flags=re.MULTILINE)</span><br><span class="line">    <span class="comment"># 移除空行</span></span><br><span class="line">    cleaned_text = os.linesep.join([s <span class="keyword">for</span> s <span class="keyword">in</span> cleaned_text.splitlines() <span class="keyword">if</span> s.strip()])</span><br><span class="line">    <span class="keyword">return</span> cleaned_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_tag</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    接收全文内容，删除旧的meting HTML代码和meting Hexo控件代码，返回清理后的文本。</span></span><br><span class="line"><span class="string">    Receives full text content, removes old meting HTML and Hexo tags, and returns the cleaned text.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 匹配 aplayer 和 meting 标签的正则表达式模式，现在也包括了 meting-js HTML标签</span></span><br><span class="line">    <span class="comment"># Regex pattern to match aplayer and meting tags, now also includes meting-js HTML tags</span></span><br><span class="line">    player_pattern = <span class="string">r&#x27;\&#123;%\s*(aplayer|meting).*?%&#125;\s*|</span></span><br></pre></td></tr></table></figure><h2 id="插入MetingJS播放器"><a href="#插入MetingJS播放器" class="headerlink" title="插入MetingJS播放器"></a>插入MetingJS播放器</h2><p>在生成音频文件之后，就要将它们插入到文章里了。</p><p>最初，笔者使用了 <strong>Hexo</strong> 社区流行的 <code>aplayer</code> 或 <code>meting</code> 标签来嵌入音频，这些标签语法简洁，形如 &#96;&#96;。然而，这种嵌入方式存在一些局限性，比如样式不够灵活，难以与现代博客主题完美融合。</p><p>在一次偶然的探索中，笔者发现了一种更加现代且功能强大的音频播放器解决方案：<strong>MetingJS</strong> 。它提供了一种灵活的 HTML 标签格式，允许笔者将播放器以卡片的形式嵌入到文章的任意位置，而不仅仅是作为独立的组件。这种方式不仅在视觉上更加美观，也让播放器与文章内容融为一体。<a href="https://github.com/metowolf/MetingJS">【MetingJS开源链接】</a></p><p>既然有了新的目标，如何高效地将所有旧标签替换为新标签，便成为了一个需要解决的问题。如果手动逐一修改成百上千篇博文，那将是一项浩大的工程。因此，笔者决定编写一个自动化脚本来完成这项任务。</p><p>这个脚本的核心思路是：</p><ul><li><p><strong>遍历所有文章</strong> ：脚本会递归地扫描博客的 <code>source/_posts</code> 文件夹，找出所有的 <strong>Markdown</strong> 文件。</p></li><li><p><strong>定位音频文件</strong> ：对于每一篇文章，脚本会根据其文件名推断出对应的 <code>.wav</code> 音频文件路径。</p></li><li><p><strong>智能判断与替换</strong> ：</p></li></ul><p>首先，脚本会检查文章中是否已经存在一个正确的 MetingJS 标签。如果存在，那么它将跳过当前文件，不做任何改动，这大大提高了脚本的效率并避免了不必要的重复操作。</p><p>如果文章中没有正确的新标签，脚本就会执行替换操作。它会使用正则表达式，像一个外科医生般精确地移除所有旧的 <code>aplayer</code> 和 <code>meting</code> 标签。</p><p>在清理工作完成后，脚本会在文章的<code>more</code>标签之后，或是在文章的 Front-matter 之后，插入全新的 MetingJS HTML 标签，并配置正确的音频文件路径和封面图片。</p><p>通过这个自动化脚本，笔者成功地将博客的音频播放器系统升级到了 MetingJS 格式，实现了高效且美观的博客有声化。</p><p>于是我编写了一个<code>gen_tag.py</code>脚本，用于逐个遍历音频文件，并在对应的文档上加入标签。脚本的代码如下（可以使用按钮进行折叠）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===============================================</span></span><br><span class="line"><span class="comment"># 脚本名称：update_metingjs_tags.py</span></span><br><span class="line"><span class="comment"># 作用：移除所有Markdown文件中的旧播放器标签，并添加新的Meting-js HTML标签。</span></span><br><span class="line"><span class="comment"># ===============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章文件夹的相对路径</span></span><br><span class="line"><span class="comment"># Relative path to the posts directory</span></span><br><span class="line">POSTS_DIR = <span class="string">&#x27;./source/_posts&#x27;</span></span><br><span class="line"><span class="comment"># 音频文件夹的相对路径，确保它与你的音频文件位置匹配</span></span><br><span class="line"><span class="comment"># Relative path to the audio directory, make sure it matches your audio file location</span></span><br><span class="line">AUDIO_DIR = <span class="string">&#x27;./source/audio&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请在这里填入你的封面图片URL</span></span><br><span class="line"><span class="comment"># Please fill in your cover image URL here</span></span><br><span class="line"><span class="comment"># Example: COVER_URL = &quot;https://cdn.jsdelivr.net/gh/example/image.jpg&quot;</span></span><br><span class="line">COVER_URL = <span class="string">&quot;https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/Screenshot_2024-08-15-00-35-26-521_com.tencent.mm.jpg?imageSlim&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_and_add_meting_js_tag</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    遍历Markdown文件，移除旧的APlayer和Meting标签，并添加新的Meting-js HTML标签。</span></span><br><span class="line"><span class="string">    Iterates through Markdown files, removes old APlayer and Meting tags, and adds new Meting-js HTML tags.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 匹配 aplayer 和 meting 标签的正则表达式模式，现在也包括了 meting-js HTML标签</span></span><br><span class="line">    <span class="comment"># Regex pattern to match aplayer and meting tags, now also includes meting-js HTML tags</span></span><br><span class="line">    player_pattern = <span class="string">r&#x27;\&#123;%\s*(aplayer|meting).*?%&#125;\s*|</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="comment"># 查找 &lt;!-- more --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;meting-js</span><br><span class="line">    name=<span class="string">&quot;朗读&quot;</span></span><br><span class="line">    artist=<span class="string">&quot;Azure&quot;</span></span><br><span class="line">    url=<span class="string">&quot;/audio/post-2025819.wav&quot;</span></span><br><span class="line">    cover=<span class="string">&quot;https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/Screenshot_2024-08-15-00-35-26-521_com.tencent.mm.jpg?imageSlim&quot;</span></span><br><span class="line">    fixed=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">&lt;/meting-js&gt;</span><br><span class="line"> 标签</span><br><span class="line">                <span class="comment"># Find the &lt;!-- more --&gt; tag</span></span><br><span class="line">                more_match = re.search(more_pattern, content)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> more_match:</span><br><span class="line">                    <span class="comment"># 如果找到了 &lt;!-- more --&gt; 标签，在其后插入 meting 标签</span></span><br><span class="line">                    <span class="comment"># If the &lt;!-- more --&gt; tag is found, insert the meting tag after it</span></span><br><span class="line">                    more_tag_end = more_match.end()</span><br><span class="line">                    new_content = content[:more_tag_end] + <span class="string">&#x27;\n\n&#x27;</span> + meting_js_tag + content[more_tag_end:]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果没有找到 &lt;!-- more --&gt; 标签，则在 front-matter 之后插入</span></span><br><span class="line">                    <span class="comment"># If the &lt;!-- more --&gt; tag is not found, insert after the front-matter</span></span><br><span class="line">                    <span class="keyword">match</span> = front_matter_pattern.search(content)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                        front_matter = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">                        body = content[<span class="keyword">match</span>.end():]</span><br><span class="line">                        new_content = front_matter + <span class="string">&#x27;\n\n&#x27;</span> + meting_js_tag + body</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="comment"># 如果没有 Front-matter，则直接加到开头</span></span><br><span class="line">                        <span class="comment"># If there&#x27;s no Front-matter, add it directly to the beginning</span></span><br><span class="line">                        new_content = meting_js_tag + content</span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(md_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(new_content)</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;-&gt; 成功更新 <span class="subst">&#123;filename&#125;</span>，已替换为 Meting-js HTML 标签。&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;处理文件 <span class="subst">&#123;filename&#125;</span> 时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> COVER_URL == <span class="string">&quot;https://example.com/your-default-cover.jpg&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;警告：请在脚本中设置 COVER_URL，否则无法正常工作！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        remove_and_add_meting_js_tag()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本在生成音频之后执行，所有已经生成音频文件的文章，均会自动在<code>front-matter</code>字段之后插入播放器的<code>html</code>代码。</p><h2 id="使用通义生成文章概要"><a href="#使用通义生成文章概要" class="headerlink" title="使用通义生成文章概要"></a>使用通义生成文章概要</h2><p>这是一个附加功能，用于在播放器之前添加简短的概述，让界面更加美观，同时，这段摘要也会显示在博客主页的文章卡片之上，且通过<code>&lt;!-- more --&gt;</code>标注来与播放器代码和正文进行分割，避免在主页卡片中显示，影响美观度。此代码在生成播放器标签后执行，用来在播放器和头部之间插入文章概要。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># APIKey定义</span></span><br><span class="line">APIKey = <span class="string">&#x27;sk-******&#x27;</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># ====================</span></span><br><span class="line"><span class="comment"># 配置部分</span></span><br><span class="line"><span class="comment"># Configuration Section</span></span><br><span class="line"><span class="comment"># ====================</span></span><br><span class="line"><span class="comment"># 请将此路径替换为你的Hexo博客文章目录，通常是 &#x27;source/_posts&#x27;</span></span><br><span class="line"><span class="comment"># Please replace this with the path to your Hexo blog posts, usually &#x27;source/_posts&#x27;</span></span><br><span class="line">POSTS_DIR = <span class="string">&#x27;source/_posts&#x27;</span></span><br><span class="line"><span class="comment"># 传递给大模型进行摘要生成的文章内容最大字符数</span></span><br><span class="line"><span class="comment"># Maximum number of characters for the summary to be sent to the LLM</span></span><br><span class="line">SUMMARY_CHARS_LIMIT = <span class="number">250</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置通义千问 API</span></span><br><span class="line"><span class="comment"># Configure Tongyi Qianwen API</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    client = OpenAI(</span><br><span class="line">        <span class="comment"># 如果没有配置环境变量，请用你的阿里云百炼API Key替换os.getenv()</span></span><br><span class="line">        <span class="comment"># Replace with your actual Dashscope API Key if not set as an environment variable</span></span><br><span class="line">        api_key=APIKey,</span><br><span class="line">        base_url=<span class="string">&quot;https://dashscope.aliyuncs.com/compatible-mode/v1&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Failed to initialize Tongyi Qianwen client: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    client = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于匹配和查找 &#x27;&lt;!-- more --&gt;&#x27; 标签的字符串</span></span><br><span class="line"><span class="comment"># String to match and find the &#x27;&lt;!-- more --&gt;&#x27; tag</span></span><br><span class="line">MORE_TAG = <span class="string">&#x27;&lt;!-- more --&gt;&#x27;</span></span><br><span class="line"><span class="comment"># 用于匹配 Front-matter 块的正则表达式</span></span><br><span class="line"><span class="comment"># Regex to match the Front-matter block at the beginning of the file</span></span><br><span class="line">FRONT_MATTER_PATTERN = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^(---[\s\S]*?---)\s*&#x27;</span>, re.MULTILINE)</span><br><span class="line"><span class="comment"># 用于匹配 Hexo 的 APlayer 标签的正则表达式</span></span><br><span class="line"><span class="comment"># Regex to match Hexo&#x27;s APlayer tags</span></span><br><span class="line">APLAYER_TAG_PATTERN = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\&#123;\s*%\s*aplayer.*?%\s*\&#125;&#x27;</span>, re.DOTALL)</span><br><span class="line"><span class="comment"># 用于匹配 Markdown 代码块的正则表达式</span></span><br><span class="line"><span class="comment"># Regex to match markdown code blocks</span></span><br><span class="line">CODE_BLOCK_PATTERN = re.<span class="built_in">compile</span>(<span class="string">r&#x27;```[\s\S]*?```&#x27;</span>, re.DOTALL)</span><br><span class="line"><span class="comment"># 新增：用于匹配 meting-js HTML 标签和 meting Hexo 标签的正则表达式</span></span><br><span class="line"><span class="comment"># New: Regex to match both meting-js HTML tags and meting Hexo tags</span></span><br><span class="line">METING_PLAYER_PATTERN = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\&#123;\s*%\s*meting.*?%\s*\&#125;|&lt;meting-js[\s\S]*?&lt;\/meting-js&gt;&#x27;</span>, re.DOTALL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_markdown_for_llm</span>(<span class="params">markdown_text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    清洗 Markdown 文本，为大模型处理做准备。</span></span><br><span class="line"><span class="string">    移除代码块、链接、图片和其他非文本元素。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cleaned_text = CODE_BLOCK_PATTERN.sub(<span class="string">&#x27;&#x27;</span>, markdown_text)</span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;`([^`]+)`&#x27;</span>, <span class="string">r&#x27;\1&#x27;</span>, cleaned_text)</span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;^#+\s*&#x27;</span>, <span class="string">&#x27;&#x27;</span>, cleaned_text, flags=re.MULTILINE)</span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;!*\[(.*?)\]\(.*?\)&#x27;</span>, <span class="string">r&#x27;\1&#x27;</span>, cleaned_text)</span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;(\*\*|__)(.*?)\1&#x27;</span>, <span class="string">r&#x27;\2&#x27;</span>, cleaned_text)</span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;(\*|_)(.*?)\1&#x27;</span>, <span class="string">r&#x27;\2&#x27;</span>, cleaned_text)</span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;^\s*([*-]|\d+\.)\s+&#x27;</span>, <span class="string">&#x27;&#x27;</span>, cleaned_text, flags=re.MULTILINE)</span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;^&gt;\s*&#x27;</span>, <span class="string">&#x27;&#x27;</span>, cleaned_text, flags=re.MULTILINE)</span><br><span class="line">    cleaned_text = re.sub(<span class="string">r&#x27;^(\s*[-*_]\s*)&#123;3,&#125;\s*$&#x27;</span>, <span class="string">&#x27;&#x27;</span>, cleaned_text, flags=re.MULTILINE)</span><br><span class="line">    cleaned_text = os.linesep.join([s <span class="keyword">for</span> s <span class="keyword">in</span> cleaned_text.splitlines() <span class="keyword">if</span> s.strip()])</span><br><span class="line">    <span class="keyword">return</span> cleaned_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_summary_from_llm</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用通义千问 API 生成文本摘要。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> client:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;x 通义千问客户端未初始化。跳过摘要生成。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    prompt = <span class="string">f&quot;请根据以下文章内容，用中文生成一篇不超过100字的精炼摘要，以便于读者快速了解文章主旨。\n\n文章内容：\n<span class="subst">&#123;text&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        completion = client.chat.completions.create(</span><br><span class="line">            model=<span class="string">&quot;qwen-plus&quot;</span>,</span><br><span class="line">            messages=[</span><br><span class="line">                &#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;你是一个善于提炼文章要点的助手，能够根据文章内容生成高质量的摘要。&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: prompt&#125;</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> completion.choices[<span class="number">0</span>].message.content.strip()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;x 调用通义千问API失败：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_markdown_file</span>(<span class="params">md_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    处理单个 Markdown 文件，插入摘要和 more 标签（如果缺失）。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    filename = os.path.basename(md_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;开始处理：<span class="subst">&#123;filename&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(md_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        md_content = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 检查文章是否已经有 &lt;!-- more --&gt; 标签</span></span><br><span class="line">    <span class="keyword">if</span> MORE_TAG <span class="keyword">in</span> md_content:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;√ <span class="subst">&#123;filename&#125;</span> 已经包含 &quot;<span class="subst">&#123;MORE_TAG&#125;</span>&quot; 标签，跳过。&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 找到 front-matter 和正文</span></span><br><span class="line">    <span class="keyword">match</span> = FRONT_MATTER_PATTERN.search(md_content)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">match</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;x <span class="subst">&#123;filename&#125;</span> 格式异常，无法找到Front-matter。跳过。&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    front_matter = <span class="keyword">match</span>.group(<span class="number">1</span>).strip()</span><br><span class="line">    front_matter_end_index = <span class="keyword">match</span>.end()</span><br><span class="line">    body_with_player = md_content[front_matter_end_index:]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 找到 Meting 标签的位置，如果未找到则跳过</span></span><br><span class="line">    player_match = METING_PLAYER_PATTERN.search(body_with_player)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> player_match:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;x <span class="subst">&#123;filename&#125;</span> 未找到 Meting 标签，跳过摘要生成。&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 提取 Meting 标签**之后**的内容作为摘要源</span></span><br><span class="line">    text_after_player = body_with_player[player_match.end():].strip()</span><br><span class="line">    text_for_summary = clean_markdown_for_llm(text_after_player)</span><br><span class="line">    text_for_summary = text_for_summary[:SUMMARY_CHARS_LIMIT]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text_for_summary:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;-&gt; <span class="subst">&#123;filename&#125;</span> Meting 标签后正文为空，无法生成摘要。跳过。&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. 调用大模型生成摘要</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;-&gt; 正在调用大模型为 <span class="subst">&#123;filename&#125;</span> 生成摘要...&#x27;</span>)</span><br><span class="line">    generated_summary = get_summary_from_llm(text_for_summary)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> generated_summary:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;x <span class="subst">&#123;filename&#125;</span> 摘要生成失败，跳过。&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6. 重新构造文章内容</span></span><br><span class="line">    body_before_player = body_with_player[:player_match.start()]</span><br><span class="line">    player_tag = player_match.group(<span class="number">0</span>)</span><br><span class="line">    body_after_player = body_with_player[player_match.end():]</span><br><span class="line"></span><br><span class="line">    new_content_body = <span class="string">f&quot;<span class="subst">&#123;body_before_player&#125;</span>\n\n<span class="subst">&#123;generated_summary&#125;</span>\n\n<span class="subst">&#123;MORE_TAG&#125;</span>\n\n<span class="subst">&#123;player_tag&#125;</span><span class="subst">&#123;body_after_player&#125;</span>&quot;</span></span><br><span class="line">    final_content = <span class="string">f&quot;<span class="subst">&#123;front_matter&#125;</span>\n\n<span class="subst">&#123;new_content_body.strip()&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 7. 写入修改后的文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(md_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(final_content)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;✅ 已为 <span class="subst">&#123;filename&#125;</span> 成功插入摘要和 &quot;<span class="subst">&#123;MORE_TAG&#125;</span>&quot; 标签。&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    主函数，遍历文章目录并处理每个文件。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始扫描并处理 Markdown 文件...&quot;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(POSTS_DIR):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 博客文章目录 &#x27;<span class="subst">&#123;POSTS_DIR&#125;</span>&#x27; 不存在。请修改 POSTS_DIR 变量。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(POSTS_DIR):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.md&#x27;</span>):</span><br><span class="line">            md_path = os.path.join(POSTS_DIR, filename)</span><br><span class="line">            process_markdown_file(md_path)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">20</span>)</span><br><span class="line">            </span><br><span class="line">    end_time = time.time()</span><br><span class="line">    elapsed_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;所有文件处理完毕。总耗时: <span class="subst">&#123;elapsed_time:<span class="number">.2</span>f&#125;</span>秒。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># print(&quot;警告：此脚本将直接修改你的文件。强烈建议在运行前备份你的整个 Hexo 文件夹。\n&quot;)</span></span><br><span class="line">    <span class="comment"># input(&quot;按 Enter 键开始执行...&quot;)</span></span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行这些操作之后，我使用<code>gen-site.sh</code>统领这些脚本文件，在<code>Git Bash</code>中执行，即可一键完成配音，修改和上传。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>葱酱是主打嵌入式和Linux开发的，其实不太懂前端，很多东西都是现搜或者问AI的，如有错误请多多指教！<br>这只是我的一点小项目，我希望自己在信息无障碍的路上可以走的更远，让每个人都有自由享受科技的权利!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Technologies </tag>
            
            <tag> Hexo </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Microsoft Azure </tag>
            
            <tag> Qwen API </tag>
            
            <tag> 无障碍 </tag>
            
            <tag> 文字转语音 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【国赛总结】基于瑞萨电子RA6M5的智能导引系统（开源）</title>
      <link href="/2025/08/15/post-2025816/"/>
      <url>/2025/08/15/post-2025816/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了一位视障学生在科研训练中开发的辅助视力残疾人士的导引系统，该项目最终获得全国嵌入式竞赛国家级三等奖。系统基于VL53L1X传感器实现障碍物检测、报警及环境提示功能，兼具技术探索与人文关怀。</p><span id="more"></span><p><meting-js    name="朗读"    artist="Azure"    url="/audio/post-2025816.wav"    cover="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/Screenshot_2024-08-15-00-35-26-521_com.tencent.mm.jpg?imageSlim"    fixed="false"><br></meting-js></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个项目最初是我在学校科研训练中的一个选题，后经各方面的优化和方案的迭代，最终参加了全国大学生嵌入式…（忘了）竞赛芯片应用组瑞萨电子赛道，最终获得国家级三等奖，虽然奖项不大，但是一路以来的开发过程是非常有趣的，加之笔者也是视障的原因导致这个选题变得更加的有意义 <del>（地狱）</del> ，所以分享给大家。</p><h1 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h1><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>系统的设计目的是为了给视力残疾人士提供导引，报警，以及对周围人和车辆的提示，因此功能大致分为如下几个部分：<br><strong>障碍物检测</strong>：系统通过基于VL53L1X激光测距传感器的tof400c模块进行实时的距离检测和数据处理，当距离小于设定的临界值，系统发出语音提示和报警。<br><strong>跌倒检测</strong>：系统通过加速度传感器MPU6050检测当前的姿态，包含加速度和角速度，通过识别人摔倒时的特征，触发紧急情况下的报警。<br><strong>光线检测</strong>：系统通过自带ADC和光敏电阻检测当前光照强度，当光线低于设定值，可以设置警示灯在此情况下点亮，提示路人和车辆。警示灯也可以手动设定开启和关闭状态。<br><strong>显示</strong>：在OLED 12864显示器上显示当前的距离，光照，温度信息，方便开发人员的调试。<br><strong>定位和报警</strong>：系统在手动操作或自动检测紧急情况后，触发报警。报警时，系统会通过GPS模块和WLAN融合定位来确定当前的位置信息，并通过地图API来获取该经纬度对应的地点文字描述。信息将编码成电子邮件发送给紧急联系人，可以在邮件中通过超链接跳转到地图软件。同时，报警功能还会发出声音，引起注意。</p><p>上几张我们作品决赛时的图片：<br>这是机身：<br><img src="/images/post_2025816/IMG_1917.JPG" alt="1"></p><p><img src="/images/post_2025816/IMG_1918.JPG" alt="2"></p><p>这是接收的数据：<br><img src="/images/post_2025816/IMG_1910.PNG" alt="3"></p><h2 id="硬件和开发工具"><a href="#硬件和开发工具" class="headerlink" title="硬件和开发工具"></a>硬件和开发工具</h2><p><strong>需要的硬件</strong>：</p><ul><li>主控：RA6M5（CPKIOT系列开发板）</li><li>网络控制器：ESP32-C3</li><li>MPU6050</li><li>蜂鸣器</li><li>LED</li><li>SSD1306 OLED 128x64</li><li>VL53L1X</li><li>任意支持NMEA输出的GPS模块</li><li>任意支持GBK编码解码的TTS语音模块</li><li>按键和连接线若干</li></ul><p><strong>开发工具</strong>：</p><ul><li>e2 studio和适用于RA6M5的<code>renesas FSP</code></li><li>Arduino IDE 2+（pio对ESP32C3的USB串口兼容性有些问题）</li><li><code>minicom</code>等UART串口开发工具和<code>JLink RTT Viewer</code>（用于RA芯片的日志输出）</li></ul><h1 id="一些开发心得"><a href="#一些开发心得" class="headerlink" title="一些开发心得"></a>一些开发心得</h1><p>先把开源仓库贴出来，里面的代码都有详细的解释-&gt;<a href="https://github.com/18650official/RA6M5_Smart_Guide">【戳我】</a></p><h2 id="主控部分"><a href="#主控部分" class="headerlink" title="主控部分"></a>主控部分</h2><h3 id="瑞萨开发指南"><a href="#瑞萨开发指南" class="headerlink" title="瑞萨开发指南"></a>瑞萨开发指南</h3><p>开发瑞萨RA系列的芯片需要使用e2 studio集成开发环境，在安装程序运行时会自动安装部分驱动程序和FSP支持包，同时，如果需要使用外部&#x2F;内部的SWD接口进行下载和调试，需要安装JLink支持工具，如果需要通过串口下载编译的hex文件，则需要下载瑞萨的UART烧录工具。</p><ul><li>e2 Studio：<a href="https://www.renesas.cn/zh/software-tool/e-studio">下载</a></li><li>J-Link工具：<a href="https://www.segger.com/downloads/jlink/JLink_Windows_V848_x86_64.exe">下载</a></li><li>瑞萨下载工具：<a href="https://renesasweb.s3.us-west-2.amazonaws.com/prod/docs/X014/X0149878/Renesas_Flash_Programmer_Package_V31900-doc.zip?response-content-disposition=attachment;%20filename=%22Renesas_Flash_Programmer_Package_V31900-doc.zip%22&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA3WXFIBJWSDVTHJX3/20250709/us-west-2/s3/aws4_request&X-Amz-Date=20250709T094730Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86700&X-Amz-Signature=b13079a934215fddb6cbc710658ce6ac65e34b5a161ca75be99731ba52a945e2">下载</a></li><li>瑞萨USB驱动程序：<a href="https://www.renesas.cn/zh/document/uid/usb-driver-renesas-mcu-tools-v27700-64-bit-version-windows-os">下载</a></li></ul><p>我的项目使用C语言，非RTOS开发，使用<code>R7FA6M5BH3CFP</code>芯片，在新建项目时，需要选择名称，项目类型，芯片和对应FSP版本，操作系统支持以及加密操作空间等选项，笔者选择了最简单的。<br>瑞萨的开发工具有着与<code>STM32CubeMX</code>相似的HAL管理逻辑，在工程目录下，点击<code>comfiguration.xml</code>进入FSP管理器，可以自由配置引脚输入输出、非GPIO的高级功能，外设堆栈等。为了开发和理解的简单，笔者已经将常见的<code>Read/Write</code>，<code>UART</code>，<code>I2C</code>，<code>delay</code>，<code>Timer</code>，<code>printf</code>等操作进行了二次封装，变成了类似于Arduino代码的形式，大家可以下载我的开源代码，在<code>mk_</code>开头的库文件中了解外设的读写和启停操作，在FSP配置工具中，点击<code>i</code>字母也可以打开官方的说明文档，里面也有关于FSP函数的详细解释（虽然是英文）。<br>现在简单介绍一下管理器中外设的配置方式：<br>在管理器下方的操作栏中：</p><ul><li><code>bsp</code>用于定义芯片和开发板类型，修改使用的板级支持包</li><li><code>pins</code>用于修改引脚（<code>Pxxx</code>）的模式、中断和初始状态，如果是GPIO，需要在此处指定，如果是外设功能引脚，需要在此处进行解绑，释放给<code>periph</code>模式</li><li><code>stack</code>用于添加和删除各种外设（如串口、时钟、外部中断等），并通过属性界面进行详细的调整，包括参数设置、中断和优先级选择以及引脚分配。</li><li><code>Generate</code>用于将代码自动部署到工程文件中</li></ul><p>我们以初始化UART为例：</p><ol><li>进入<code>stack</code>，添加一个串行接口设备（如<code>g_uart0</code>），属性面板中指定波特率、校验、中断函数、优先级、以及使用的硬件<code>SCIx</code>外设通道。</li><li>下载你使用的开发板的引脚定义图，找到串口对应的引脚。或者在已知使用串口外设编号的情况下，直接在选项卡里找到<code>SCIx</code>，导览到这组串口IO。</li><li>IO口名称应为类似于<code>P411</code>的组合，4是Port，11是Pin。在引脚设置中，如果你已经注册了<code>stack</code>中的设备，那么只需要Enable这个引脚并取消所有的GPIO功能，功能复选框中将自动设置为<code>periph mode</code>。至此，一个外设初始化成功。</li><li>回到<code>stack</code>确定引脚不是<code>null</code>，按<code>Ctrl+S</code>保存，点击<code>Generate</code>生成。</li></ol><p>其他外设的操作也是类似的，瑞萨对每个外设的操作有一套通用形式：</p><ul><li><code>_Open(pCtrl, pCfg);</code> 初始化</li><li><code>_Write(pCtrl, pData)</code> 读写操作，数据和Ctrl控制对象均使用指针传递</li><li><code>_Callback(pArgs)</code> 中断函数，传入的参数中可以解析出标志位、寄存器、缓冲区等信息</li></ul><p>可以在<code>hal_data.h</code>中查看所有自己定义的外部设备句柄，包括<code>_ctrl</code>和<code>_cfg</code>对象。其余的常规操作，可以使用AI工具查找和参考笔者在开源仓库的文档，此处不再赘述。</p><h3 id="外设驱动支持"><a href="#外设驱动支持" class="headerlink" title="外设驱动支持"></a>外设驱动支持</h3><p>所有本项目使用的外设，其驱动文件都已进行移植并包含于开源仓库文件中，此处特别感谢：</p><ul><li><strong>OLED：</strong>江科大的STM32 OLED驱动程序</li><li><strong>Serial接收：</strong>江科大的51单片机串口缓冲程序</li><li><strong>VL53L1X</strong>：HFUT的智能车竞赛开源项目</li><li><strong>GPS</strong>：<code>minmea project</code></li></ul><h3 id="烧录和调试"><a href="#烧录和调试" class="headerlink" title="烧录和调试"></a>烧录和调试</h3><p>在编写完成，且指定了系统默认的调试器和编译器后，就可以进行编译和下载了，按下<code>Ctrl+B</code>可以进行编译，在顶栏选择<code>Run-&gt;Debug</code>可以使用JLink调试工具进行下载和调试，选中后，系统会自动初始化JLink工具和gdb，程序二进制文件此时被自动下载到开发板，且锁定到程序入口之前的断点。当下载完成之后，IDE会显示每个函数断点的地址，此时点击工具栏的开始按钮，若未发生内存溢出或访问外设失败的情况，程序会进入main loop，开发板上的零部件也会开始工作。<br>值得注意的几点是：</p><ul><li>有些板子没有自带JLink接口，而瑞萨默认的SWD调试工具是JLink，所以如果没有JLink硬件的话，建议使用串口下载。在<code>C/C++ properties</code>设置中，选择生成的文件类型为<code>Intel HEX</code>，重新执行编译，在<code>Debug/</code>目录下就可以找到程序的hex文件，此时，我们需要把板子的启动选择跳线连接到下载一侧，连接电脑，在下载工具中新建实例，选择对应的COM口后，快速按下<code>Reset</code>按键和电脑建立连接，然后加入HEX文件下载，下载后，板子断电，启动跳线连接另一侧，通电就可以运行程序啦。</li><li>如果在调试时一直卡在<code>DefaultExeption</code>而且脱机也无法进入程序循环，那么一般是因为初始化或者访问外设资源的方式不正确，建议重新参考源码或文档。</li><li>使用<code>SEGGER RTT Viewer</code>来读取<code>dbg_logi()</code>发送的日志时，我们需要在编译之后找到<code>Debug/&lt;projectName&gt;.map</code>文件，<code>Ctrl+F</code>搜索<code>SEGGER_RTT</code>，你会看到：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x1234abcd    _SEGGER_RTT</span><br></pre></td></tr></table></figure> 把这个地址复制下来，输入到监视器软件的地址框（而不是让软件自动检测），就可以打开RTT串口通道了。<code>dbg_logi()</code>的输出格式会带一个时间戳，格式为<code>[timestamp]context</code>。</li></ul><h2 id="ESP32-C3部分"><a href="#ESP32-C3部分" class="headerlink" title="ESP32-C3部分"></a>ESP32-C3部分</h2><p>负责接收串口指令、定位、解析数据、发送邮件。下面简单讲述一下代码结构和一些设计思路。</p><h3 id="串口数据接收"><a href="#串口数据接收" class="headerlink" title="串口数据接收"></a>串口数据接收</h3><p>Arduino库函数简化了串口数据处理的中断注册和逐个字节接收的过程，我们只需要在主循环中查询<code>Serial.available()</code>参数，即可对串口缓冲区进行处理。由于需要识别特定的指令以及提取<code>String</code>对象进行比较，此处和RA的接收函数一样约定了指令字符串的识别格式，打包成了<code>pollSerial()</code>函数，具体函数如下;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 串口接收函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pollSerial1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (Serial1.<span class="built_in">available</span>()) &#123;</span><br><span class="line">    <span class="type">char</span> c = Serial1.<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\r&#x27;</span>) &#123;  <span class="comment">// 命令结束</span></span><br><span class="line">      cmdBuffer[cmdIndex] = <span class="string">&#x27;\0&#x27;</span>;  <span class="comment">// 字符串结束符</span></span><br><span class="line">      cmdIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cmdBuffer[<span class="number">0</span>] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        command = <span class="built_in">String</span>(cmdBuffer + <span class="number">1</span>);  <span class="comment">// 去掉 #</span></span><br><span class="line">        cmdReady = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (cmdIndex &lt; CMD_BUFFER_SIZE - <span class="number">1</span>) &#123;</span><br><span class="line">        cmdBuffer[cmdIndex++] = c;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 超出缓冲区，重置</span></span><br><span class="line">        cmdIndex = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，就可以与RA6M5进行握手了。</p><h3 id="连接Wi-Fi"><a href="#连接Wi-Fi" class="headerlink" title="连接Wi-Fi"></a>连接Wi-Fi</h3><p>ESP32对于无线网络提供了丰富的系统调用，最简单的连接方法是传入代表SSID和密码的两个字符串，但出于灵活配置的需要，我没有采取硬编码，而是使用了以下逻辑：</p><ul><li><strong>上电后</strong>：读取Flash特定地址的信息，SSID和密码各32字节，加入字符串。</li><li>判断字符串，如果非空则尝试连接网络，成功则进入主循环。</li><li><strong>连接超时或字符串为空</strong>：关闭WiFi连接进程，使能一个HTTP Server，发起一个简单的网页，包含两个输入框和一个确认按钮，用于收集SSID和密码。</li><li>当收到表单的提交后，将SSID和密码存储到Flash的对应地址，使用<code>esp.restart()</code>重启系统，重新尝试连接操作。</li></ul><p>此处涉及的代码较多，详见开源仓库，下面展示部分代码（可以用折叠按钮隐藏）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WebServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;EEPROM.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Wifi_init_process</span><span class="params">()</span></span>; <span class="comment">//Wifi启动流程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LoadWifiConfig</span><span class="params">(<span class="type">void</span>)</span></span>; <span class="comment">//加载数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">saveWifiConfig</span><span class="params">(String newssid, String newpswd)</span></span>; <span class="comment">//存储数据</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ConnectWifi</span><span class="params">()</span></span>; <span class="comment">//网卡连接操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handleRoot</span><span class="params">()</span></span>; <span class="comment">//web配置界面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handleSave</span><span class="params">()</span></span>; <span class="comment">//web服务器保存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Variables</span></span><br><span class="line">String ssid = <span class="string">&quot;&quot;</span>;</span><br><span class="line">String pswd = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EEPROM_SIZE 64 <span class="comment">// Define the size of EEPROM</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SSID_ADDR 0 <span class="comment">// Address to store SSID</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PSWD_ADDR 32 <span class="comment">// Address to store Password</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LoadWifiConfig</span><span class="params">(<span class="type">void</span>)</span> <span class="comment">//加载数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//初始化EEPROM</span></span><br><span class="line">  <span class="type">char</span> pswd_buf[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">char</span> ssid_buf[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  EEPROM.<span class="built_in">begin</span>(EEPROM_SIZE);</span><br><span class="line">  EEPROM.<span class="built_in">get</span>(SSID_ADDR, ssid_buf);</span><br><span class="line">  EEPROM.<span class="built_in">get</span>(PSWD_ADDR, pswd_buf);</span><br><span class="line">  EEPROM.<span class="built_in">end</span>();</span><br><span class="line">  ssid = <span class="built_in">String</span>(ssid_buf);</span><br><span class="line">  pswd = <span class="built_in">String</span>(pswd_buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">saveWifiConfig</span><span class="params">(String newssid, String newpswd)</span> <span class="comment">//存储数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EEPROM.<span class="built_in">begin</span>(EEPROM_SIZE);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//Write SSID</span></span><br><span class="line">    <span class="keyword">while</span>(newssid[i])&#123;</span><br><span class="line">      EEPROM.<span class="built_in">write</span>(SSID_ADDR+i, newssid[i]);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">1</span>);</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    EEPROM.<span class="built_in">write</span>(SSID_ADDR+i, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//Write PSWD</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(newpswd[i])&#123;</span><br><span class="line">      EEPROM.<span class="built_in">write</span>(PSWD_ADDR+i, newpswd[i]);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">1</span>);</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    EEPROM.<span class="built_in">write</span>(PSWD_ADDR+i, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">2</span>);</span><br><span class="line">    EEPROM.<span class="built_in">end</span>();</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ConnectWifi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WiFi.<span class="built_in">begin</span>(ssid.<span class="built_in">c_str</span>(), pswd.<span class="built_in">c_str</span>());</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;Connecting&quot;</span>);</span><br><span class="line">    <span class="type">int</span> attempt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED &amp;&amp; attempt &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">        attempt++;</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Serial.<span class="built_in">println</span>();</span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;[INFO] Wi-Fi state: %d\n&quot;</span>, WiFi.<span class="built_in">status</span>() == WL_CONNECTED);</span><br><span class="line">    <span class="keyword">return</span> WiFi.<span class="built_in">status</span>() == WL_CONNECTED; <span class="comment">//返回WiFi连接状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AP 配置页面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handleRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    server.<span class="built_in">send</span>(<span class="number">200</span>, <span class="string">&quot;text/html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span></span><br><span class="line">        <span class="string">&quot;&lt;h1&gt;ESP32 Wi-Fi Configure&lt;/h1&gt;&quot;</span></span><br><span class="line">        <span class="string">&quot;&lt;form action=&#x27;/save&#x27; method=&#x27;POST&#x27;&gt;&quot;</span></span><br><span class="line">        <span class="string">&quot;SSID: &lt;input type=&#x27;text&#x27; name=&#x27;ssid&#x27;&gt;&lt;br&gt;&quot;</span></span><br><span class="line">        <span class="string">&quot;Password: &lt;input type=&#x27;password&#x27; name=&#x27;pass&#x27;&gt;&lt;br&gt;&quot;</span></span><br><span class="line">        <span class="string">&quot;&lt;input type=&#x27;submit&#x27; value=&#x27;Save&#x27;&gt;&quot;</span></span><br><span class="line">        <span class="string">&quot;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 Wi-Fi 配置提交</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handleSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (server.<span class="built_in">hasArg</span>(<span class="string">&quot;ssid&quot;</span>) &amp;&amp; server.<span class="built_in">hasArg</span>(<span class="string">&quot;pass&quot;</span>)) &#123;</span><br><span class="line">        String newSSID = server.<span class="built_in">arg</span>(<span class="string">&quot;ssid&quot;</span>);</span><br><span class="line">        String newPass = server.<span class="built_in">arg</span>(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">        <span class="built_in">saveWifiConfig</span>(newSSID, newPass); <span class="comment">//保存从网页获取的配置信息</span></span><br><span class="line">        server.<span class="built_in">send</span>(<span class="number">200</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;Wi-Fi config saved, rebooting...&quot;</span>);</span><br><span class="line">        Serial.<span class="built_in">println</span>(<span class="string">&quot;[INFO] Configuration saved, system will reboot after 2 secs...&quot;</span>);</span><br><span class="line">        Serial1.<span class="built_in">println</span>(<span class="string">&quot;@CONFIG_END&quot;</span>);</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">2000</span>); <span class="comment">// 等待2秒</span></span><br><span class="line">        ESP.<span class="built_in">restart</span>(); <span class="comment">//重启设备</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        server.<span class="built_in">send</span>(<span class="number">400</span>, <span class="string">&quot;text/plain&quot;</span>, <span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络连接程序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Wifi_init_process</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 读取存储的 Wi-Fi 信息</span></span><br><span class="line">    <span class="built_in">LoadWifiConfig</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接 Wi-Fi</span></span><br><span class="line">    <span class="keyword">if</span> (ssid.<span class="built_in">length</span>() &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">ConnectWifi</span>()) &#123;</span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot;[INFO] WiFi Connected!&quot;</span>);</span><br><span class="line">      Serial1.<span class="built_in">println</span>(<span class="string">&quot;@WL_CONNECTED&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        WiFi.<span class="built_in">softAP</span>(<span class="string">&quot;ESP32_Config&quot;</span>, <span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">        IPAddress IP = WiFi.<span class="built_in">softAPIP</span>();</span><br><span class="line">        Serial1.<span class="built_in">println</span>(<span class="string">&quot;@NEED_CONFIG&quot;</span>);</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;[INFO] Please configure network: IP: %d.%d.%d.%d\n&quot;</span>, IP[<span class="number">0</span>], IP[<span class="number">1</span>], IP[<span class="number">2</span>], IP[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">        server.<span class="built_in">on</span>(<span class="string">&quot;/&quot;</span>, handleRoot); <span class="comment">//给定服务器回调函数</span></span><br><span class="line">        server.<span class="built_in">on</span>(<span class="string">&quot;/save&quot;</span>, handleSave);</span><br><span class="line">        server.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          server.<span class="built_in">handleClient</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EMail的发送"><a href="#EMail的发送" class="headerlink" title="EMail的发送"></a>EMail的发送</h3><p>邮件的发送一开始使用了<code>ESPMail</code>的库函数，使用QQ邮箱发送，后发现内存开销太大以至于无法运行JSON解析和打包程序，于是经过了笔者的研究，使用了一个无<code>base64</code>的测试邮件平台——<code>mailtrap</code>，在注册账号和获取实例（我使用了自己名下的域名进行绑定，这样发出的邮件是我网站的后缀，其他方法详见官网文档）后，你会获得一个账号和密码，下面有两种发送方式：</p><ul><li><strong>SMTP协议</strong>：传统的电子邮件接口协议，在ESP32中初始化一个HTTP Client，对文档中指定服务器接口依次发送指定格式的请求信息和邮件内容字符串，可以实现邮件的发送。</li><li><strong>RESTful API</strong>：此平台提供的一种便捷方式，笔者使用的方法，向网站发送一个HTTP请求即可。（格式参见开源ESP32源码）</li></ul><p>本次开发中的发送代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Send mail</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sendMail</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  String smtp_server = SMTP_HOST; <span class="comment">// SMTP服务器地址</span></span><br><span class="line">  <span class="type">int</span> smtp_port = SMTP_PORT; <span class="comment">// SMTP服务器端口</span></span><br><span class="line">  String smtp_user = AUTHOR_EMAIL; <span class="comment">// SMTP用户名</span></span><br><span class="line">  String smtp_pass = AUTHOR_PASS; <span class="comment">// SMTP密码</span></span><br><span class="line">  String sender_email = AUTHOR_EMAIL; <span class="comment">// 发件人邮箱</span></span><br><span class="line">  String recipient_email = mail_addr; <span class="comment">// 收件人邮箱</span></span><br><span class="line">  String author_from = AUTHOR_FROM; <span class="comment">// 发件人名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WiFi.<span class="built_in">status</span>() == WL_CONNECTED) &#123;</span><br><span class="line">    HTTPClient http;</span><br><span class="line">    http.<span class="built_in">begin</span>(<span class="string">&quot;https://send.api.mailtrap.io/api/send&quot;</span>);</span><br><span class="line">    http.<span class="built_in">addHeader</span>(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Bearer &quot;</span> + smtp_pass);</span><br><span class="line">    http.<span class="built_in">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 JSON 字符串</span></span><br><span class="line">    String postData = <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">    postData += <span class="string">&quot;\&quot;from\&quot;:&#123;\&quot;email\&quot;:\&quot;&quot;</span> + author_from + <span class="string">&quot;\&quot;,\&quot;name\&quot;:\&quot;&quot;</span> + <span class="built_in">String</span>(<span class="string">&quot;ESP32 Dev Module&quot;</span>) + <span class="string">&quot;\&quot;&#125;,&quot;</span>;</span><br><span class="line">    postData += <span class="string">&quot;\&quot;to\&quot;:[&#123;\&quot;email\&quot;:\&quot;&quot;</span> + mail_addr + <span class="string">&quot;\&quot;&#125;],&quot;</span>;</span><br><span class="line">    postData += <span class="string">&quot;\&quot;subject\&quot;:\&quot;&quot;</span> + <span class="built_in">String</span>(<span class="string">&quot;Caution&quot;</span>) + <span class="string">&quot;\&quot;,&quot;</span>;</span><br><span class="line">    postData += <span class="string">&quot;\&quot;text\&quot;:\&quot;&quot;</span> + s + <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">    postData += <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> httpResponseCode = http.<span class="built_in">POST</span>(postData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (httpResponseCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      String response = http.<span class="built_in">getString</span>();</span><br><span class="line">      Serial.<span class="built_in">print</span>(httpResponseCode == <span class="number">200</span> ? <span class="string">&quot;[INFO] Sent&quot;</span> : <span class="string">&quot;[Warning] Send failed: Service error&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(httpResponseCode != <span class="number">200</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;, errorCode: &quot;</span>);</span><br><span class="line">        Serial.<span class="built_in">println</span>(httpResponseCode);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> Serial.<span class="built_in">println</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot;[Warning] Send failed: Connect failure\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    http.<span class="built_in">end</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用网络API进行定位"><a href="#使用网络API进行定位" class="headerlink" title="使用网络API进行定位"></a>使用网络API进行定位</h3><p>由于廉价GPS模块在室内时常表现不佳，笔者引入了网络融合定位功能。在国内，这种技术十分常见，但是对于个人开发者较难获得授权，笔者使用了对嵌入式开发者友好且免费的<code>WAYZ</code>平台。<br>服务器需要收集环境WiFi的MAC地址和信号强度，我们需要通过ESP32的系统调用，获取BSSID、时间戳、信号强度、随机序列号等信息，信息通过<code>ArduinoJSON</code>库函数进行打包后，向服务器提交<code>GET</code>请求。在解码后，可以获取经纬度、区划、具体地址字符串 等定位结果信息。信息传递给上述邮件发送程序进行发送。<br>参见：<a href="https://blog.csdn.net/m0_50846041/article/details/128792973?spm=1001.2014.3001.5502">开源项目链接</a>   <a href="https://lotboard.newayz.com/asset/manage">官网</a></p><p>定位代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ArduinoJson.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;HTTPClient.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Location structure</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">GpsLocation</span> &#123;</span><br><span class="line">  <span class="type">float</span> latitude;</span><br><span class="line">  <span class="type">float</span> longitude;</span><br><span class="line">  <span class="type">char</span> valid;</span><br><span class="line">  String name; <span class="comment">//非必须</span></span><br><span class="line">&#125; loc;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UUID <span class="string">&quot;your_uuid&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY <span class="string">&quot;your_key&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  String mac;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> rssi;</span><br><span class="line">&#125; ap_info_typedef;</span><br><span class="line"></span><br><span class="line">ap_info_typedef ApInfo_array[<span class="number">10</span>]; <span class="comment">// 定义AP信息结构体</span></span><br><span class="line"><span class="type">int</span> ApInfo_count = <span class="number">0</span>; <span class="comment">// AP信息计数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wifi_scan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ApInfo_count = WiFi.<span class="built_in">scanNetworks</span>(); <span class="comment">// 扫描Wi-Fi网络</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">300</span>);</span><br><span class="line">  <span class="keyword">if</span> (ApInfo_count == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 没有找到网络</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ApInfo_count; ++i) </span><br><span class="line">    &#123;</span><br><span class="line">      ApInfo_array[i].rssi = WiFi.<span class="built_in">RSSI</span>(i);</span><br><span class="line">      ApInfo_array[i].mac = WiFi.<span class="built_in">BSSIDstr</span>(i);</span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;[INFO] Wi-Fi scanned, count: %d\n&quot;</span>, ApInfo_count);</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 扫描成功</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义位置信息JSON结构</span></span><br><span class="line"><span class="function">DynamicJsonDocument <span class="title">doc</span><span class="params">(<span class="number">1024</span>)</span></span>;</span><br><span class="line"><span class="function">DynamicJsonDocument <span class="title">rep</span><span class="params">(<span class="number">1024</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间戳</span></span><br><span class="line"><span class="comment">// 设置时区（中国为 UTC+8）</span></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> gmtOffset_sec = <span class="number">8</span> * <span class="number">3600</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> daylightOffset_sec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getTimeStamp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 初始化 NTP</span></span><br><span class="line">  <span class="built_in">configTime</span>(gmtOffset_sec, daylightOffset_sec, <span class="string">&quot;ntp.aliyun.com&quot;</span>, <span class="string">&quot;ntp.ntsc.ac.cn&quot;</span>, <span class="string">&quot;pool.ntp.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 等待同步完成</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">tm</span> timeinfo;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">getLocalTime</span>(&amp;timeinfo)) &#123;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取时间戳</span></span><br><span class="line">  <span class="type">time_t</span> now = <span class="built_in">time</span>(<span class="literal">nullptr</span>); <span class="comment">// 获取当前秒级时间戳</span></span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">&quot;[INFO] Current timestamp:%d\n&quot;</span>, now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON封装</span></span><br><span class="line"><span class="function">String <span class="title">JsonSerialization</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  String message;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> timestamp = <span class="built_in">time</span>(<span class="literal">nullptr</span>);</span><br><span class="line">  <span class="type">int64_t</span> timestamp_ms = timestamp * <span class="number">1000LL</span> + <span class="built_in">random</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  doc[<span class="string">&quot;timestamp&quot;</span>] = timestamp_ms; <span class="comment">// 获取当前时间戳</span></span><br><span class="line">  doc[<span class="string">&quot;id&quot;</span>] = <span class="string">&quot;esp32-&quot;</span> + <span class="built_in">String</span>(<span class="built_in">random</span>(<span class="number">1000000</span>));</span><br><span class="line">  doc[<span class="string">&quot;asset&quot;</span>][<span class="string">&quot;id&quot;</span>] = UUID;</span><br><span class="line">  doc[<span class="string">&quot;asset&quot;</span>][<span class="string">&quot;manufacturer&quot;</span>] = <span class="string">&quot;espressif&quot;</span>;</span><br><span class="line">  doc[<span class="string">&quot;location&quot;</span>][<span class="string">&quot;timestamp&quot;</span>] = <span class="built_in">time</span>(<span class="literal">nullptr</span>); <span class="comment">// 获取当前时间戳</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">min</span>(<span class="number">10</span>, ApInfo_count);i++)</span><br><span class="line">  &#123;</span><br><span class="line">    doc[<span class="string">&quot;location&quot;</span>][<span class="string">&quot;wifis&quot;</span>][i][<span class="string">&quot;macAddress&quot;</span>] = ApInfo_array[i].mac; <span class="comment">// 获取MAC地址</span></span><br><span class="line">    doc[<span class="string">&quot;location&quot;</span>][<span class="string">&quot;wifis&quot;</span>][i][<span class="string">&quot;signalStrength&quot;</span>] = ApInfo_array[i].rssi; <span class="comment">// 获取信号强度</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">serializeJson</span>(doc, message);  <span class="comment">// 序列化JSON数据并导出字符串</span></span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">&quot;\nTransmit to the server:\n %s\n&quot;</span>, message.<span class="built_in">c_str</span>());</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">get_loc_online</span><span class="params">(GpsLocation *loc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 获取当前时间戳</span></span><br><span class="line">  <span class="built_in">getTimeStamp</span>();</span><br><span class="line">  <span class="comment">// 扫描Wi-Fi网络</span></span><br><span class="line">  ap_info_typedef ApInfo;</span><br><span class="line">  <span class="built_in">wifi_scan</span>();</span><br><span class="line">  String msg_to_send = <span class="built_in">JsonSerialization</span>();</span><br><span class="line">  <span class="comment">// 发送HTTP POST请求</span></span><br><span class="line">  HTTPClient http;</span><br><span class="line">  http.<span class="built_in">begin</span>(<span class="string">&quot;https://api.newayz.com/location/hub/v1/track_points?access_key=&lt;your_key&gt;&quot;</span>);      </span><br><span class="line">  http.<span class="built_in">addHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">  http.<span class="built_in">addHeader</span>(<span class="string">&quot;Host&quot;</span>, <span class="string">&quot;api.newayz.com&quot;</span>);</span><br><span class="line">  http.<span class="built_in">addHeader</span>(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;keep-alive&quot;</span>);</span><br><span class="line">  <span class="type">int</span> httpCode = http.<span class="built_in">POST</span>(msg_to_send); <span class="comment">// 发送POST请求并获取响应代码</span></span><br><span class="line">  String payload = http.<span class="built_in">getString</span>();                                    </span><br><span class="line">  <span class="comment">// 检查HTTP响应代码</span></span><br><span class="line">  DeserializationError error = <span class="built_in">deserializeJson</span>(rep, payload);</span><br><span class="line">  <span class="keyword">if</span> (error) </span><br><span class="line">  &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;[Warning] Failed to parse JSON response&quot;</span>);</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果解析失败，返回false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">double</span> longitude = rep[<span class="string">&quot;location&quot;</span>][<span class="string">&quot;position&quot;</span>][<span class="string">&quot;point&quot;</span>][<span class="string">&quot;longitude&quot;</span>];</span><br><span class="line">  <span class="type">double</span> latitude = rep[<span class="string">&quot;location&quot;</span>][<span class="string">&quot;position&quot;</span>][<span class="string">&quot;point&quot;</span>][<span class="string">&quot;latitude&quot;</span>];</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> * name = rep[<span class="string">&quot;location&quot;</span>][<span class="string">&quot;address&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> * source = rep[<span class="string">&quot;location&quot;</span>][<span class="string">&quot;position&quot;</span>][<span class="string">&quot;source&quot;</span>];</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> * spatialReference = rep[<span class="string">&quot;location&quot;</span>][<span class="string">&quot;position&quot;</span>][<span class="string">&quot;spatialReference&quot;</span>];</span><br><span class="line">  String full_result;</span><br><span class="line">  <span class="built_in">serializeJson</span>(rep, full_result);</span><br><span class="line">  http.<span class="built_in">end</span>(); </span><br><span class="line">  <span class="comment">// 将解析后的数据存储到loc结构体中</span></span><br><span class="line">  loc-&gt;latitude = latitude;</span><br><span class="line">  loc-&gt;longitude = longitude;</span><br><span class="line">  loc-&gt;name = <span class="built_in">String</span>(name);</span><br><span class="line">  loc-&gt;valid = <span class="number">1</span>; <span class="comment">// 设置有效状态</span></span><br><span class="line">  Serial.<span class="built_in">println</span>();</span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">&quot;[INFO] Get Location: lat:%f, lon:%f\n&quot;</span>, latitude, longitude);</span><br><span class="line">  Serial.<span class="built_in">println</span>();</span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">&quot;The full JSON Data is:\n %s&quot;</span>, full_result.<span class="built_in">c_str</span>());</span><br><span class="line">  Serial.<span class="built_in">println</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 返回true表示成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="烧录和下载"><a href="#烧录和下载" class="headerlink" title="烧录和下载"></a>烧录和下载</h3><p>笔者的ESP32使用USB-CDC技术，简单来说，它的USB口不是像传统的开发板一样用一个USB-to-TTL来连接到芯片的串行接口，而是直接连接了芯片的USB外设，电脑上的串口是芯片模拟出来的，因此，我们需要一些设置来更好的使用这个串口：<br><strong>启用USB CDC支持</strong>：在Arduino IDE顶栏的工具配置栏将<code>USB CDC Support</code>设置为<code>Enabled</code><br><strong>跳过CDC自检</strong>：在setup()代码中加入一条<code>Serial.setTxTimeoutMs(0);</code>，避免在找不到电脑时卡在死循环<br>然后插上板子点击IDE的<code>Download</code>就行了，很傻瓜。</p><h1 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h1><p>视频-&gt;<a href="https://www.bilibili.com/video/BV1hxGgzbE6b/">【点我】</a></p><h1 id="参赛的碎碎念和总结"><a href="#参赛的碎碎念和总结" class="headerlink" title="参赛的碎碎念和总结"></a>参赛的碎碎念和总结</h1><p>虽然我是负责所有技术和开发工作的，但其实比赛负责人不是我，所以很多内幕也就不知道了，我也懒得过问这些事情，这些是纯粹的参赛心得还有需要避雷的地方。</p><blockquote><p>雷点是很多老师为了冲业绩可能会对比赛内容夸大或者对赛事主办方的要求含糊其辞，要仔细阅读官方文档，仔细评估比赛的难度和作品迁移可行性！<br>不是随便填个选题就行！这个填了就不能大改，也就是要一直顺着这个大的主线做下去<br>不是拿个stm32代码改一下就行！这玩意没有想象中的那么简单，包括其他的那些赛道（比如RK、海思、RT-Thread什么的），每个平台都有自己的特性和学习曲线，请善用文档和AI工具，对自己的熟练度做好评价，别随随便便就付钱了结果大批大批的人没回本<br>还有这一套下来挺烧钱的，尤其是想拿一等奖的，基本上都需要完整的外壳和可以用于实际场景的可靠性，像我这样的概念模型也只能三等奖了</p></blockquote><p>然后是全流程：<br><strong>报名</strong>：学校会组织，去官网把信息填了就行，学校可能会预支你板子，或者你付押金自己申请<br><strong>初赛</strong>：提交演示视频、正式说明文档、电路原理图、包含开发板的不同角度照片、开源仓库地址等<br><strong>区域赛</strong>：前往省内的承办学校，向评委展示作品，一般在提交海选的2周之内可以看到参赛资格，时间一般在暑假（7月20日前后）<br><strong>国赛</strong>：在8月中旬，全国参赛选手携带作品前往决赛场地，持续3天，包含签到、编程能力测评、答辩、领奖几个环节，现场可以看到很多优秀作品，也可以和很多科技企业的负责人近距离交流。<br>比赛没有纸质奖状，可以付费申请PCB奖状，邮寄送达，同时进入国赛也可以领到PCB参赛证和纪念服装。</p><p>一点碎照片，大家就当游记吧：<br><img src="/images/post_2025816/IMG_1892.JPG" alt="在机场"><br><img src="/images/post_2025816/IMG_1903.JPG" alt="我们的参赛证"><br><img src="/images/post_2025816/IMG_1902.JPG" alt="现场"><br><img src="/images/post_2025816/IMG_1899.JPG" alt="现场"><br><img src="/images/post_2025816/IMG_1924.JPG" alt="不太好看的照片"></p><p>然后这应该是我最近打完的比较大的比赛了，也许是我的最后一个国家级比赛，但我希望不是hhh~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 嵌入式竞赛 </tag>
            
            <tag> ra6m5 </tag>
            
            <tag> esp32 </tag>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【教程】使用树莓派和CUPS部署远程打印服务</title>
      <link href="/2025/06/16/post-2025616/"/>
      <url>/2025/06/16/post-2025616/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>文章讲述作者为解决实验室老旧HP LaserJet 3055打印机无法远程打印的问题，尝试使用ESP32-S2&#x2F;S3实现远程打印，但因硬件限制导致效果不佳，最终另寻他法的故事。</p><span id="more"></span><p><meting-js    name="朗读"    artist="Azure"    url="/audio/post-2025616.wav"    cover="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/Screenshot_2024-08-15-00-35-26-521_com.tencent.mm.jpg?imageSlim"    fixed="false"><br></meting-js></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>起因是葱酱的实验室里有一台比较老的HP激光打印机（型号是LaserJet 3055）,这台打印机目前不支持网络打印，想要打印，就只能把笔记本电脑搬到打印机旁边，连接USB进行打印。而且笔者在实验室只有一台台式机，想要打印就只能求助同学。<br>一开始葱酱想用ESP32-S2或S3，搭配USB电平转换器和Espressif官方库提供的<code>usb-printer</code>驱动来实现远程打印，但是手头没有USB模块，而且使用性能较低的单片机进行打印，很多图片或者较大的PDF都会有一些异常。正好我发现了一块闲置的树莓派，于是它派上了用场。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>我们需要准备以下硬件：</p><ul><li>树莓派</li><li>SD卡</li><li>Type-C电源线，与打印机的连接线</li></ul><p>树莓派的基本配置这里不再赘述，现在假设已经成功在SD卡上安装了Raspberry OS操作系统，并且已经通过<code>wpa_supplicant</code>或者<code>nmcli</code>连接到了无线网络，在电脑上按下Win+R，输入<code>wt</code>，回车，在命令窗口输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh pi@192.168.x.x</span><br></pre></td></tr></table></figure><p>连接到树莓派的终端之后，我们就可以进行<del>愉快</del>的配置了。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><p>首先，Linux系统下有一套控制打印机的软件工具，我们在<code>apt</code>中执行安装操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y cups</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> cups</span><br><span class="line">sudo systemctl start cups</span><br></pre></td></tr></table></figure><p>这样就启动了打印机的基本服务，我们现在进行config文件配置。在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/cups/cupsd.conf</span><br></pre></td></tr></table></figure><p>会打开一个配置文件，我们需要修改以下几个<br>首先是文件的开头部分，确保以下的选项设置正确：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServerAlias *  <span class="comment"># 放开所有的ip连接</span></span><br><span class="line">Listen 631</span><br><span class="line">Listen /run/cups/cups.sock</span><br></pre></td></tr></table></figure><p>接下来是下面的代码块，需要补全成下面的形式：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;Location /&gt;</span><br><span class="line">  Order allow,deny</span><br><span class="line">  Allow all</span><br><span class="line">&lt;/Location&gt;</span><br><span class="line"></span><br><span class="line">&lt;Location /admin&gt;</span><br><span class="line">  Order allow,deny</span><br><span class="line">  Allow all</span><br><span class="line">&lt;/Location&gt;</span><br><span class="line"></span><br><span class="line">&lt;Location /admin/conf&gt;</span><br><span class="line">  AuthType Default</span><br><span class="line">  Require user @SYSTEM</span><br><span class="line">  Order allow,deny</span><br><span class="line">  Allow all</span><br><span class="line">&lt;/Location&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独加上</span></span><br><span class="line">&lt;Location /printers&gt; </span><br><span class="line">  Order allow,deny</span><br><span class="line">  Allow all</span><br><span class="line">&lt;/Location&gt;</span><br><span class="line"></span><br><span class="line">&lt;Location /jobs&gt;</span><br><span class="line">  Order allow,deny</span><br><span class="line">  Allow all</span><br><span class="line">&lt;/Location&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入<code>Esc-&gt;:wq-&gt;Enter</code>保存退出。<br>为了保证macOS和手机设备的打印协议，我们安装适配服务，然后重启cups服务进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install avahi-daemon</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> avahi-daemon</span><br><span class="line">sudo systemctl start avahi-daemon</span><br><span class="line">sudo systemctl restart cups</span><br></pre></td></tr></table></figure><p>现在，已经部署好了打印机的连接服务，可以把树莓派连接到打印机的USB接口了。</p><h2 id="连接和添加打印机"><a href="#连接和添加打印机" class="headerlink" title="连接和添加打印机"></a>连接和添加打印机</h2><p>连接打印机之后，输入以下指令查看打印设备列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lpinfo -v</span><br></pre></td></tr></table></figure><p>显示出打印机即为成功，葱酱的终端显示了HP Fax和HP LaserJet 3055两个打印机设备。<br>在成功检测到打印机之后，打开电脑的浏览器，访问<code>http://&lt;IP&gt;:631</code>，进入打印机设置界面，进去之后是这样的：<br><a href="...">1</a></p><p>要在树莓派中注册打印机，需要执行：</p><ol><li>点击 “Administration” &gt; “Add Printer”，输入用户名密码（pi &#x2F; 密码）。</li><li>选择你的打印机（一般是 USB 设备），点击 “Continue”。</li><li>命名打印机、设置共享：<ul><li>勾选 “Share This Printer”；</li><li>选择合适的驱动（HP 打印机通常会自动识别）</li></ul></li><li>完成添加。</li></ol><p>添加打印机后，可以在管理界面的主页的<code>Printer</code>选项卡进入打印机列表，如果添加成功，可以看到对应的打印机，点击标签进入详情页后，可以查看打印队列，打印历史等信息。这个界面下会有两个展开式选项卡，将第一个选中<code>Maintainence</code>，第二个选择<code>Print test page</code>，打印机会自动打印测试页，确认树莓派的控制有效且网络畅通。</p><h3 id="在电脑端添加打印机"><a href="#在电脑端添加打印机" class="headerlink" title="在电脑端添加打印机"></a>在电脑端添加打印机</h3><p>要想实现这一点，<strong>静态IP</strong>必不可少，我们继续在树莓派的shell中进行设置，假如我想分配一个<code>192.168.1.50</code>的静态IP，可以这么操作，此操作适用于使用NetworkManager管理连接的系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nmcli connection show  <span class="comment"># 显示所有连接，记录你使用的连接名</span></span><br><span class="line">sudo nmcli connection modify &lt;你的连接名&gt; ipv4.method manual ipv4.addresses 192.168.1.50/24 ipv4.gateway 192.168.1.1 ipv4.dns <span class="string">&quot;8.8.8.8&quot;</span></span><br><span class="line">sudo nmcli connection up &lt;你的连接名&gt;</span><br></pre></td></tr></table></figure><p>此时连接会中断，我们需要在电脑的终端中重新连接指定的IP地址，比如笔者的设备：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh pi@<span class="number">192.168</span>.<span class="number">1.50</span></span><br></pre></td></tr></table></figure><p>这样，IP地址就固定了，这一点在稍后的“手动添加”步骤中很关键。</p><h4 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h4><p>Win10系统下，添加比较容易。我们在开始菜单打开“设置”，进入“打印机和扫描仪”选项，选择添加打印机，通常会显示为<code>&lt;Printer model&gt; @raspberrypi</code>，一般情况下都可以添加成功。<br>当由于打印机型号太老或者使用Win11系统出现添加失败的情况时，可以参照下面的操作方法。</p><h4 id="Windows-11或其他无法直接添加的情况"><a href="#Windows-11或其他无法直接添加的情况" class="headerlink" title="Windows 11或其他无法直接添加的情况"></a>Windows 11或其他无法直接添加的情况</h4><p>在需要手动添加的情况下，我们先要获取打印机的驱动文件，笔者下载了一个hp的集成驱动安装程序。程序打开时，会提示解压inf和driver文件的路径（其他的驱动形式也一样，需要inf文件和驱动程序）。<br>在“设置”中搜索打印机的基础上，稍等片刻，打印机列表会出现 <strong>我的打印机不在此列表中</strong> 的选项，点击此选项，选择“通过网址添加打印机”，输入网址：<br><code>http://192.168.1.50:631/printers/HP_LaserJet_3055</code> （不同型号打印机最后一个命名也不同，取决于在树莓派中添加打印机时在网络界面中取的名字）<br>访问成功后，会进入驱动选择界面，选择 <strong>从磁盘安装</strong> ，选择存有inf文件和driver文件夹的安装目录，inf文件可能会有很多个，笔者选择了最大的那个（283KB），选择后会列出兼容的所有设备，选择指定型号的设备或者类似于<code>universal</code>之类的选项（笔者只显示了两个Universal驱动就随便选了），最后点击添加，一段时间后，电脑与打印机的通信完成，设备成功添加到打印机列表。添加之后的效果大概是这样的：<br><a href="">2</a></p><p>现在，我们打开一个文档，执行打印，选择该打印机，就可以实现便捷的远程打印啦~！</p><h1 id="需要更新和修复的目标"><a href="#需要更新和修复的目标" class="headerlink" title="需要更新和修复的目标"></a>需要更新和修复的目标</h1><p>葱酱认为树莓派这种搭载Linux系统的微型电脑终端用来驱动打印机其实是很简单的。这次折腾大概还有以下的不足之处——当然，如果有其他的建议和意见也可以写在下面的评论区，葱酱的后台有设置消息推送，一定会看评论的~qwq</p><ul><li><strong>成本</strong>：树莓派还是很贵的，自然不建议没有树莓派的宝子单独买这东西用来控制打印机，如果需要购买设备，可以搜”无线打印服务器“。葱酱后续也会设计使用ESP32-S3和TinyUSB方案的廉价版本。</li><li><strong>兼容性</strong>：这点可能是打印机的原因，不支持Win11下的自动添加是一个很缺憾和不完美的地方。另外在手机设备的测试中，笔者只测试了Android设备，虽然可以识别和打印，但是连接质量低。经常会出现反复刷新无法找到设备的情况，虽然实验室使用手机打印并不是十分刚需，但笔者仍希望未来可以解决连接稳定性和兼容性的问题。</li><li><strong>其他bug待发现和测试…</strong></li></ul><p>最后，好久没更新了，大家还好吗？（meow</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> 网络打印 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【AList】解决上传大文件返回错误413问题</title>
      <link href="/2024/09/17/post-2024917/"/>
      <url>/2024/09/17/post-2024917/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了在使用AList网盘上传电子书时遇到的413错误问题，分析发现是Nginx反向代理限制了上传文件大小，解决方法为修改Nginx配置文件中的相关限制参数。</p><span id="more"></span><p><meting-js    name="朗读"    artist="Azure"    url="/audio/post-2024917.wav"    cover="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/Screenshot_2024-08-15-00-35-26-521_com.tencent.mm.jpg?imageSlim"    fixed="false"><br></meting-js></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>本人搭建的AList网盘（基于阿里云服务器和腾讯云COS对象存储）最近遇到了一些问题，在上传大约10MB的电子书时，点击“上传”按钮并加载文件，前端界面的进度条跑满，文件被提交到服务器，但提交地文件并没有按预期后台上传到腾讯云COS端，而是返回了一个错误：<code>Request Error 413</code>。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>经过查询手册，该问题的来源为使用的反向代理（即Nginx）限制了上传文件的最大大小限制，导致文件上传不成功，修改Nginx配置文件即可。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="找到配置文件"><a href="#找到配置文件" class="headerlink" title="找到配置文件"></a>找到配置文件</h2><p>笔者的Nginx为手动安装，配置文件位于<code>/usr/local/nginx/conf/nginx.conf</code>，若使用apt安装，一般位于<code>/etc</code>目录下。</p><h2 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h2><p>在配置文件的<code>server</code>块后添加一行代码，表示限制的最大文件大小，这个<code>server</code>块为你部署AList对应的那个端口的代理。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80<span class="comment">;</span></span><br><span class="line">    server.name snowmiku-drive.top</span><br><span class="line">    client_max_body_size 100m<span class="comment">;  # 添加到这里</span></span><br><span class="line">    location&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存之后，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t  <span class="comment"># 测试</span></span><br><span class="line">nginx -s reload  <span class="comment"># 重新加载</span></span><br></pre></td></tr></table></figure><p>再次上传文件，就可以成功提交并正常后台上传了。<br><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-17%20171334.png?imageSlim" alt="1"></p><hr>]]></content>
      
      
      <categories>
          
          <category> Technologies </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AList </tag>
            
            <tag> 个人网盘 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>速记——将可执行文件注册为服务</title>
      <link href="/2024/09/03/post-2024903/"/>
      <url>/2024/09/03/post-2024903/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了如何在Linux系统中将可执行文件注册为系统服务，便于使用systemctl进行管理。核心步骤包括创建描述服务行为的systemd服务单元文件，并将其放置于系统服务配置目录中。</p><span id="more"></span><p><meting-js    name="朗读"    artist="Azure"    url="/audio/post-2024903.wav"    cover="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/Screenshot_2024-08-15-00-35-26-521_com.tencent.mm.jpg?imageSlim"    fixed="false"><br></meting-js></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇笔记记录了如何将可执行文件注册为系统服务，以便使用<code>systemctl</code>执行和管理。假设文件的路径为<code>/usr/local/test</code>。</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>要在Linux系统中将一个二进制可执行文件注册为服务，通常可以使用 <code>systemd</code> 系统和服务管理器。<code>systemd</code> 是现代Linux发行版中广泛使用的初始化系统和服务管理工具。</p><h2 id="1-创建-systemd-服务单元文件"><a href="#1-创建-systemd-服务单元文件" class="headerlink" title="1. 创建 systemd 服务单元文件"></a>1. 创建 <code>systemd</code> 服务单元文件</h2><p>首先，你需要创建一个 <code>systemd</code> 服务单元文件，该文件描述了如何启动、停止和服务的行为。</p><h3 id="创建服务单元文件"><a href="#创建服务单元文件" class="headerlink" title="创建服务单元文件"></a>创建服务单元文件</h3><ol><li><p><strong>创建服务单元文件</strong>:</p><ul><li>在 <code>/etc/systemd/system</code> 目录下创建一个新的服务单元文件，例如 <code>test.service</code>。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>编辑服务单元文件</strong>:</p><ul><li>在文件中添加以下内容：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Test Service</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/test/test</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/usr/local/test</span><br><span class="line"><span class="attr">User</span>=&lt;username&gt;</span><br><span class="line"><span class="attr">Group</span>=&lt;groupname&gt;</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><ul><li><p><strong>解释配置项</strong>:</p><ul><li><code>[Unit]</code> 部分描述了服务的依赖关系和描述信息。</li><li><code>[Service]</code> 部分描述了服务的实际启动命令和其他运行参数。<ul><li><code>ExecStart</code> 指定了服务启动时执行的命令路径。</li><li><code>WorkingDirectory</code> 指定了服务的工作目录。</li><li><code>User</code> 和 <code>Group</code> 指定了服务运行时的用户和组。</li><li><code>Restart</code> 指定了服务在异常退出后的重启策略。</li></ul></li><li><code>[Install]</code> 部分描述了服务的启动级别和依赖关系。</li></ul></li><li><p><strong>替换 <code>&lt;username&gt;</code> 和 <code>&lt;groupname&gt;</code></strong>:</p><ul><li>将 <code>&lt;username&gt;</code> 替换为你希望服务运行的用户名。</li><li>将 <code>&lt;groupname&gt;</code> 替换为你希望服务运行的组名。</li></ul></li></ul></li></ol><h2 id="2-重新加载-systemd-配置"><a href="#2-重新加载-systemd-配置" class="headerlink" title="2. 重新加载 systemd 配置"></a>2. 重新加载 <code>systemd</code> 配置</h2><p>创建完服务单元文件后，需要重新加载 <code>systemd</code> 配置以使其生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><h2 id="3-启动、启用和管理服务"><a href="#3-启动、启用和管理服务" class="headerlink" title="3. 启动、启用和管理服务"></a>3. 启动、启用和管理服务</h2><ol><li><p><strong>启动服务</strong>:</p><ul><li>使用 <code>systemctl start</code> 命令启动服务：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>启用服务</strong>:</p><ul><li>使用 <code>systemctl enable</code> 命令使服务在系统启动时自动启动：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>检查服务状态</strong>:</p><ul><li>使用 <code>systemctl status</code> 命令检查服务的状态：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>停止服务</strong>:</p><ul><li>使用 <code>systemctl stop</code> 命令停止服务：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>禁用服务</strong>:</p><ul><li>使用 <code>systemctl disable</code> 命令禁用服务，使其不再在系统启动时自动启动：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> test.service</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-验证服务"><a href="#4-验证服务" class="headerlink" title="4. 验证服务"></a>4. 验证服务</h2><ol><li><p><strong>查看服务日志</strong>:</p><ul><li>使用 <code>journalctl</code> 命令查看服务的日志：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo journalctl -u test.service</span><br></pre></td></tr></table></figure><p>这将显示服务的日志，可以帮助你诊断问题。</p></li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>假设你有一个名为 <code>test</code> 的二进制可执行文件位于 <code>/usr/local/test</code> 目录下，你可以按照以下步骤进行：</p><ol><li><p><strong>创建服务单元文件</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>编辑服务单元文件</strong>:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Test Service</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/test/test</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/usr/local/test</span><br><span class="line"><span class="attr">User</span>=yourusername</span><br><span class="line"><span class="attr">Group</span>=yourgroupname</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>将 <code>yourusername</code> 替换为你希望服务运行的用户名。</li><li>将 <code>yourgroupname</code> 替换为你希望服务运行的组名。</li></ul></li><li><p><strong>重新加载 <code>systemd</code> 配置</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p><strong>启动服务</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>启用服务</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> test.service</span><br></pre></td></tr></table></figure></li><li><p><strong>检查服务状态</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status test.service</span><br></pre></td></tr></table></figure></li></ol><p>通过上述步骤，你可以将一个二进制可执行文件注册为Linux系统的服务，并管理其启动、停止和其他行为。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新日记——基于阿里云服务器搭建一个Alist网盘页面</title>
      <link href="/2024/09/01/post-20249012/"/>
      <url>/2024/09/01/post-20249012/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文介绍了如何通过备案二级域名访问Alist驱动资源站，并利用Alist管理多平台云存储文件，实现便捷传输与下载。</p><span id="more"></span><p><meting-js    name="朗读"    artist="Azure"    url="/audio/post-20249012.wav"    cover="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/Screenshot_2024-08-15-00-35-26-521_com.tencent.mm.jpg?imageSlim"    fixed="false"><br></meting-js></p><blockquote><p>注意：资源站对应的二级域名由于连接到国内服务器，因此需要申请备案.之后，访问 snowmiku-drive.top 即可进入葱酱的资源下载界面。<br>现在，你可以从顶栏（移动端为菜单）中的资源-&gt;资源库按钮导航到资源库，并访问其中的<code>公有文件夹</code>。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Alist是一款适用于百度云、腾讯云、OneDrive等多种网络存储介质的文件整合和下载系统，通过Alist，我们可以方便的上传和下载文件，也可以用浏览器将文件便捷的从一台设备传输到另一台设备。<br>前段时间，笔者在使用一台年代久远的iPhone 4手机时，就遇到了文件传输的问题。在系统无法安装绝大多数现代软件，手机本身又不支持蓝牙传输文件的限制条件下，通过浏览器上传文件成为了一种方便且成本较低的方案。加上笔者想丰富下自己博客的功能，顺便练习Linux服务器的使用，以及熟悉基本的网络编程知识，我通宵一个晚上完成了这个从头到尾的配置，也经历了很多离奇的Debug过程。我将把调试的整个流程简要的在这篇文章中展现出来，供需要搭建个人网盘的小伙伴学习，大家也可以在评论区留下自己的想法。</p><h1 id="你需要准备的"><a href="#你需要准备的" class="headerlink" title="你需要准备的"></a>你需要准备的</h1><ul><li>阿里云服务器</li><li>PuTTY 终端连接软件</li><li>VSCode 代码编辑器（可选）</li><li>CloudFlare</li></ul><h1 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h1><p>首先，我们需要将服务端软件部署在一台连接互联网的服务器上。</p><h2 id="购买服务"><a href="#购买服务" class="headerlink" title="购买服务"></a>购买服务</h2><p>你需要购买阿里云提供的服务，以获得一台虚拟服务器的IP地址，完成后续的一切操作。访问<a href="https://aliyun.com/">阿里云官网</a>，选择一款合适的服务器套餐并订购，根据指引进入控制台页面，此处会要求用户输入密码，这个密码就是Linux的登录密钥。笔者选择的操作系统是<code>Ubuntu Server</code>。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-03%20024018.png?imageSlim" alt="1"></p><p>在一切配置完成后，控制台的“概览”界面就会出现服务器的信息，我们复制服务器的公网IP地址。</p><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>打开<code>PuTTY</code>客户端，在右侧会有要求输入主机名的提示框，输入后按<code>Enter</code>，即可打开命令行界面。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-03%20024619.png?imageSlim" alt="2"></p><p>若可以成功连接，此时会要求输入用户名（即为<code>root</code>）和密码。输入完成，即可进入Ubuntu的命令行界面。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-03%20025018.png?imageSlim" alt="3"></p><h2 id="服务端基础配置"><a href="#服务端基础配置" class="headerlink" title="服务端基础配置"></a>服务端基础配置</h2><h3 id="必要环境的配置"><a href="#必要环境的配置" class="headerlink" title="必要环境的配置"></a>必要环境的配置</h3><p>在初始化服务端后，我们需要进行一些基础的配置。<br>首先，更新系统包，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade -y</span><br></pre></td></tr></table></figure><p>安装必要的软件包：安装 apt-transport-https、ca-certificates、curl 和 software-properties-common：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>我们需要安装<code>nginx</code>软件实施反向代理，将Alist端口的数据转发到<code>http</code>端口上。<br><strong>创建文件夹</strong>：执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line"><span class="built_in">mkdir</span> nginx</span><br></pre></td></tr></table></figure><p><strong>下载和解压文件</strong>：从官网下载以<code>.tar.gz</code>结尾的文件，并解压到这个目录，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.20.2.tar.gz</span><br><span class="line">tar -zxvf nginx-1.20.2.tar.gz</span><br></pre></td></tr></table></figure><p>解压缩后，我们会获得一个名为<code>nginx-1.20.2</code>的子目录，里面存放了nginx的源文件。</p><p><strong>安装依赖</strong>：执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc make libpcre3-dev zlib1g-dev openssl libssl-dev</span><br></pre></td></tr></table></figure><p><strong>编译并安装nginx</strong>：执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-http_ssl_module  <span class="comment"># 生成编译脚本</span></span><br><span class="line">make  <span class="comment">#编译</span></span><br><span class="line">make install  <span class="comment"># 编译完成，安装文件</span></span><br><span class="line"><span class="comment"># 以下代码验证是否安装成功</span></span><br><span class="line"><span class="built_in">ls</span> /usr/local/nginx -l</span><br><span class="line"><span class="built_in">ls</span> /usr/local/nginx/sbin -l</span><br></pre></td></tr></table></figure><p><strong>设置权限和启动程序</strong>：<br>首先，创建一个<code>nginx.service</code>文件，用<code>vim</code>打开，粘贴以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Description=nginx - high performance web server</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后，执行以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> nginx.service  /etc/systemd/system/</span><br><span class="line"><span class="built_in">cd</span>  /etc/systemd/system/</span><br><span class="line"><span class="built_in">chmod</span> 777 nginx.service</span><br><span class="line">systemctl daemon-reload  <span class="comment"># 配置重新加载</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx.service  <span class="comment"># 自启动</span></span><br><span class="line">systemctl start nginx.service  <span class="comment"># 启动</span></span><br><span class="line">systemctl status nginx.service  <span class="comment"># 查看状态</span></span><br></pre></td></tr></table></figure><p>到这里，我们的nginx就启动完成了。</p><h3 id="安装Alist"><a href="#安装Alist" class="headerlink" title="安装Alist"></a>安装Alist</h3><p>根据<code>Alist</code>的(官方文档)[<a href="https://alist.nn.ci/zh/guide/install/]%EF%BC%8C%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E6%9C%89%E7%9B%B4%E6%8E%A5%E5%AE%89%E8%A3%85%E3%80%81%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85%E3%80%81Docker%E5%AE%89%E8%A3%85%E5%87%A0%E7%A7%8D%E5%BD%A2%E5%BC%8F%E3%80%82%E7%AC%94%E8%80%85%E8%BE%83%E4%B8%BA%E6%8E%A8%E8%8D%90%E8%BF%9B%E8%A1%8CDocker%E5%AE%89%E8%A3%85%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E5%AF%B9%E5%AE%89%E8%A3%85%E5%AE%B9%E5%99%A8%E5%8D%95%E7%8B%AC%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86%EF%BC%8C%E4%B8%94%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8D%E4%BC%9A%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%BA%A7%E7%94%9F%E6%AE%8B%E7%95%99%E3%80%82%E4%BD%86%E7%94%B1%E4%BA%8EDocker">https://alist.nn.ci/zh/guide/install/]，在服务器安装有直接安装、脚本安装、Docker安装几种形式。笔者较为推荐进行Docker安装，这种方法可以对安装容器单独进行管理，且配置文件不会在系统产生残留。但由于Docker</a> Hub的连接问题以及不熟悉操作等原因，笔者在Docker安装的Alist一直未能被成功访问，最终，笔者选择了进行脚本安装。<br>若将Alist安装在<code>~/alist</code>文件夹下，执行这条指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="string">&quot;https://alist.nn.ci/v3.sh&quot;</span> | bash -s install /root</span><br></pre></td></tr></table></figure><p>安装操作会自动完成，一般的，服务运行在端口<code>5244</code>，我们可以执行<code>netstat -tulnp | grep 5244</code>查看监听5244端口的服务。<br>接下来，我们需要为Alist设置登录密码，在最新版的Alist中，密码无法被反算出来，若使用随机密码，请务必牢记。<br><strong>方法1：手动密码</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./alist admin <span class="built_in">set</span> &lt;YOUR_PSWD&gt;</span><br></pre></td></tr></table></figure><p><strong>方法2：随机生成</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./alist admin random</span><br></pre></td></tr></table></figure><p>终端将返回一个新的密码。</p><h3 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h3><p>此时，虽然nginx和Alist均启动，但使用浏览器访问（也就是http对应的80端口）仍旧没有反应。此时，我们首先应该在阿里云的服务器管理界面中的“安全组”设置中允许<code>80</code>，<code>5244</code>端口的数据，具体操作见下图：</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-03%20033124.png?imageSlim" alt="4"></p><p>在浏览器输入<code>&lt;IP&gt;:5244</code>即可打开用户界面。<br>当然，如果想直接通过服务器IP访问网站，我们可以在CloudFlare中设置一个端口转发（后文会讲），也可以在nginx进行反向代理设置（二选一）。<br>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/conf</span><br><span class="line">sudo vim ./nginx.conf</span><br></pre></td></tr></table></figure><p>在文本编辑器中，你将会看到类似C语言的代码块，请在<code>http</code>块内的<code>server</code>块内做出如下修改：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span> /data/www/example.com;</span><br><span class="line">            <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">            <span class="comment"># 在下方添加</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://localhost:5244;  <span class="comment"># 假设Alist监听在5244端口</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>保存，然后执行指令验证且重启nginx。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br><span class="line">./nginx -t  <span class="comment"># 验证配置文件</span></span><br><span class="line">./nginx -s reload  <span class="comment"># 重新加载nginx配置</span></span><br></pre></td></tr></table></figure><p>此时，在浏览器输入IP地址，即可成功访问用户界面了。</p><h1 id="网页端配置"><a href="#网页端配置" class="headerlink" title="网页端配置"></a>网页端配置</h1><p>进入后，默认不允许游客的访问，我们需要输入在Linux中生成的密码进行登录。<br>一开始，Alist的界面是空的，点击下方的“设置”按钮，进入后台，按照上述的Alist文档绑定你的云服务产品，此处不再赘述。另外，设置中还可以分配不同类型用户的访问操作权限，以及更换网站的Logo等。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>我的域名（snowmiku-home.top）托管在CloudFlare，进入域名的管理界面（此处不同运营商的界面会不同）。<br>由于我们只有一个服务器的IP地址，因此我们添加一个<code>A记录</code>，内容如下：</p><ul><li>类型：A</li><li>名称：drive</li><li>IPv4：你的服务器IP</li></ul><p>保存，就可以从域名连接到网盘了。</p><blockquote><p>啊…更新一下，境外域名备案不了，我重新买了一个域名<code>snowmiku-drive.top</code>，用上述方法添加<code>www</code>和<code>@</code>的A记录即可。</p></blockquote><p>最终，我们将这个链接按照文档规范插入博客的选项卡配置单内，重新Deploy，即可从个人博客直接打开Alist界面了。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-09-03%20035234.png?imageSlim" alt="示例图"></p><p>啊啊啊…我好健忘，那个…配置端口转发的教程看这个视频好了，最前面的3分钟：<a href="https://www.bilibili.com/video/BV1ni8ze2E1C/">点击跳转</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实是很简单的服务器操作，我也不知道为啥整了这么久，顺带学会了一堆Linux服务器常用的维护操作（<br>项目果然是最大的生产力啊（划掉<br>希望这篇文章对大家有帮助！<del><em>博主休息一天去选小裙子惹</em></del></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>Ubuntu 系统下安装nginx: <a href="https://blog.csdn.net/ZhangXS9722/article/details/137098271">https://blog.csdn.net/ZhangXS9722/article/details/137098271</a></li><li>Alist 官方文档：<a href="https://alist.nn.ci/zh/">https://alist.nn.ci/zh/</a></li><li>Ailst 简易部署教程：<a href="https://blog.csdn.net/weixin_39829577/article/details/138058961?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_39829577/article/details/138058961?spm=1001.2014.3001.5501</a></li><li>Docker教程：<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">https://www.runoob.com/docker/ubuntu-docker-install.html</a></li><li>Docker连接错误的解决方案：<a href="https://blog.csdn.net/weixin_46203834/article/details/140556611">https://blog.csdn.net/weixin_46203834/article/details/140556611</a></li><li>此外，关于Bug修复、Linux基础操作的一些资料来自通义千问AI。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Technologies </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 个人网盘 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 资源站 </tag>
            
            <tag> 新手教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>速记——用Python实现的正则表达式</title>
      <link href="/2024/09/01/post-2024901/"/>
      <url>/2024/09/01/post-2024901/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>正则表达式（Regex）是一种用于匹配和处理字符串的强大工具，广泛应用于多种编程语言如 Java、JavaScript 和 Python。文章简要介绍了其基本概念及在 Python 中的使用，需引入 <code>re</code> 模块进行相关操作。</p><span id="more"></span><p><meting-js    name="朗读"    artist="Azure"    url="/audio/post-2024901.wav"    cover="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/Screenshot_2024-08-15-00-35-26-521_com.tencent.mm.jpg?imageSlim"    fixed="false"><br></meting-js></p><h1 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h1><p>‌正则表达式（‌Regular Expression，简称‌regex）是一种强大的文本处理工具，用于描述、匹配一系列符合特定规则的字符串。它通过使用普通字符和特殊字符（称为元字符）的组合，来定义一个文本模式，从而实现对字符串的搜索、替换等操作。正则表达式在计算机科学中有着广泛的应用，几乎所有现代编程语言都支持正则表达式的使用，包括但不限于‌Java、‌JavaScript、‌Python等。</p><h1 id="正则表达式在-Python-中的基本应用"><a href="#正则表达式在-Python-中的基本应用" class="headerlink" title="正则表达式在 Python 中的基本应用"></a>正则表达式在 Python 中的基本应用</h1><p>使用正则表达式，首先需要引入一个包<code>re</code>。<br>Python中，正则表达式的匹配方法分为三种，分别为<code>match</code>，<code>search</code>，<code>findall</code>。以上的方法都接收两个参数，第一个为需要匹配的字符串或正则表达式，第二个为目标字符串。</p><p><strong>match方法</strong>：从头开始匹配，匹配一次。若目标字符串的开头没有与表达式匹配的元素，返回<code>None</code>。<br><strong>search方法</strong>：从头开始寻找，当查询到第一个符合的位置时，返回找到的元素并停止。<br><strong>findall方法</strong>：查找所有匹配的元素，并全部返回。</p><h1 id="正则表达式的语法"><a href="#正则表达式的语法" class="headerlink" title="正则表达式的语法"></a>正则表达式的语法</h1><h2 id="单字符的规则"><a href="#单字符的规则" class="headerlink" title="单字符的规则"></a>单字符的规则</h2><p>以下组合均代表一个字符。</p><ul><li><code>.</code>：代表任意的字符，其中<code>\.</code>代表点本身。</li><li><code>[]</code>：代表属于括号内范围的字符，其中若表示区间，用“-”表示，不同字符之间不带空格。比如<code>[1-7a-dA-Z]</code>。</li><li><code>\d</code>：表示数字0-9。</li><li><code>\D</code>：表示非数字。</li><li><code>\s</code>：表示空白（空格或Tab）。</li><li><code>\S</code>：表示非空白。</li><li><code>\w</code>：表示单词字符（大小写，数字和下划线）</li><li><code>\W</code>：表示非单词字符。</li></ul><p>注意，由于反斜杠在字符串中代表转义字符，因此在代码中需要用“r”来取消对转义字符的识别，示例如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;abcdefg1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">r&#x27;^[a-g]+\d$&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="字符长度限制规则"><a href="#字符长度限制规则" class="headerlink" title="字符长度限制规则"></a>字符长度限制规则</h2><p>以下表达式表示了对前者字符数量的限制：</p><ul><li><code>*</code>：表示0到无数个</li><li><code>+</code>：表示1到无数个</li><li><code>?</code>：表示0或1个</li><li><code>&#123;m&#125;</code>：表示该字符只能出现m次</li><li><code>&#123;m,&#125;</code>：表示该字符最少出现m次</li><li><code>&#123;m,n&#125;</code>：表示出现m到n次（其中包含n）</li></ul><blockquote><p>需要注意的是，正则的语法中，对空格的限制较为严格，如上述的表达式<code>&#123;m,n&#125;</code>，不能出现任何空格，否则匹配无效。</p></blockquote><h2 id="边界限制"><a href="#边界限制" class="headerlink" title="边界限制"></a>边界限制</h2><p>以下表达式限制了字段的边界，即规定查询整个字符串还是字符串的子串。</p><ul><li><code>^</code>：表示字符串开头</li><li><code>$</code>：表示字符串结尾</li><li><code>\b</code>：表示单词边界</li><li><code>\B</code>：表示非单词边界</li></ul><h2 id="分组和选择"><a href="#分组和选择" class="headerlink" title="分组和选择"></a>分组和选择</h2><ul><li><code>()</code>：表示这是一个单独的字符串分组，在父级表达式中视作一个字符</li><li><code>|</code>：在括号内使用，表示“或”。</li></ul><h1 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h1><p><strong>题目：</strong>用正则表达式判定一个字符串是QQ号，长度为5-11位，第一位不能为0.<br><strong>代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line">r = <span class="string">r&#x27;^[1-9][0-9]&#123;4,10&#125;$&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(r, s))</span><br></pre></td></tr></table></figure><p><strong>题目：</strong>用正则表达式判定一个字符串是电子邮件，电子邮件的规范为<code>xxx[.xxx.xxx]@xxx[.xxx.xxx].xxx</code><br><strong>代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;1352218398a@gmail.com&#x27;</span></span><br><span class="line">r = <span class="string">r&#x27;(^\w+(\.\w+)*@(qq|gmail|163)(\.\w+)$)&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(r, s))</span><br></pre></td></tr></table></figure><p>代码返回的结果如下：<br><code>&lt;re.Match object; span=(0, 21), match=&#39;1352218398a@gmail.com&#39;&gt;</code></p><p>这个代码中，<code>\w+</code>表示至少一个单词字符，<code>(\.\w+)*</code>表示可以存在由点号和至少一个字符组成的后缀，<code>(qq|gmail|163)</code>表示可选三种字段中的任意一个。<br>注意：<code>findall()</code>方法会将每一个分组列出，对于存在多个分组的表达式，应选择<code>match</code>方法，并且在表达式两边加上括号。</p><p><em>（润啦，最近的Python基础告一段落！）</em></p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> 字符匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>速记——MySQL基础语法</title>
      <link href="/2024/08/30/post-2024830/"/>
      <url>/2024/08/30/post-2024830/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>SQL（结构化查询语言）是用于管理和操作关系型数据库的标准语言，主要分为数据查询、数据定义、数据操纵和数据控制四类。它通过如SELECT、CREATE、ALTER、DROP等语句实现对数据库的各类操作。</p><span id="more"></span><p><meting-js    name="朗读"    artist="Azure"    url="/audio/post-2024830.wav"    cover="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/Screenshot_2024-08-15-00-35-26-521_com.tencent.mm.jpg?imageSlim"    fixed="false"><br></meting-js></p><h1 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h1><p>SQL（Structured Query Language，结构化查询语言）是一种专门用于管理和操作关系型数据库的标准编程语言。SQL 用于在数据库中执行各种操作，包括数据查询、数据定义、数据操纵和数据控制。</p><h1 id="SQL的分类"><a href="#SQL的分类" class="headerlink" title="SQL的分类"></a>SQL的分类</h1><p>SQL 主要用于以下几类操作：</p><p><strong>数据查询（Data Querying）：</strong><br>通过 SELECT 语句从数据库表中检索数据。</p><p><strong>数据定义（Data Definition）：</strong><br>通过 CREATE、ALTER 和 DROP 语句创建、修改和删除数据库对象（如表、视图、索引等）。</p><p><strong>数据操纵（Data Manipulation）：</strong><br>通过 INSERT、UPDATE 和 DELETE 语句插入、更新和删除数据。</p><p><strong>数据控制（Data Control）：</strong><br>通过 GRANT 和 REVOKE 语句管理用户的权限。</p><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>笔者使用的环境是 MySQL8.0 以及 DBeaver 可视化界面。</p><h1 id="常见的SQL语法"><a href="#常见的SQL语法" class="headerlink" title="常见的SQL语法"></a>常见的SQL语法</h1><p>SQL的特征：对大小写和多行不敏感，用<code>;</code>完成分隔。<br>注释：</p><ul><li>单行注释：<code>-- 内容</code> 或者 <code># 内容</code></li><li>多行注释：与C语言的多行注释一致</li></ul><h2 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL-数据定义语言"></a>DDL-数据定义语言</h2><h3 id="库管理"><a href="#库管理" class="headerlink" title="库管理"></a>库管理</h3><p>查看库：<br><code>show databases;</code><br>使用库：<br><code>use 名称</code><br>创建库：<br><code>create database 名称 [charset utf8]</code><br>删除库：<br><code>drop database 名称</code><br>查看当前使用的数据库：<br><code>select database();</code></p><h3 id="表管理"><a href="#表管理" class="headerlink" title="表管理"></a>表管理</h3><p>查看：<br><code>show tables;</code><br>创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> NAME(</span><br><span class="line">    列名称 数据类型 限制,</span><br><span class="line">    列名称 数据类型 限制</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>数据类型：<br>int：整数<br>float: 浮点数<br>varchar(len): 字符串，最大255<br>date: 日期<br>timestamp: 时间戳</p></blockquote><p>删除：<br><code>drop table 名称</code></p><h2 id="DML-数据操作"><a href="#DML-数据操作" class="headerlink" title="DML-数据操作"></a>DML-数据操作</h2><p>对于一个用下列语句定义的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>插入数据：</strong></p><ol><li>对某一列插入数据<br><code>insert into stu(name) values(&#39;初音未来&#39;), (&#39;葱酱&#39;);</code><blockquote><p>注意：字符串用’单引号’包围</p></blockquote></li><li>对几列插入数据<br><code>insert into stu(name. id) values(&#39;初音未来&#39;, 1);</code></li></ol><p><strong>删除数据：</strong><br><code>delete from stu [where id = 1]</code><br>其中where为条件判断，有<code>=, &gt;, &lt;, &gt;=, &lt;=, !=</code>几种，如果没有where，默认删除全部数据。</p><p><strong>更新数据：</strong><br><code>update stu set name = &#39;Miku&#39; where name = &#39;初音未来&#39;</code><br>set后为修改语句，where为条件判断。</p><h2 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL-查询语句"></a>DQL-查询语句</h2><h3 id="SELECT基础查询"><a href="#SELECT基础查询" class="headerlink" title="SELECT基础查询"></a>SELECT基础查询</h3><p>对于上述的表：<br><strong>查询所有的列</strong>：<br><code>select * from student;</code></p><p><strong>查询部分列：</strong><br><code>select name, age from student;</code></p><p><strong>使用限制条件：</strong><br><code>select name, age from student where age &lt; 16;</code></p><h3 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h3><p>对于一个包含了<code>name</code>, <code>id</code>, <code>age</code>, <code>gender</code>的表，若要按照性别分组统计年龄：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,<span class="built_in">avg</span>(age) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure><blockquote><p>注意，select后的参数除分组依据外，不得出现其他的列元素（无法表示）。<br>类似于avg()的统计函数还有：</p></blockquote><ul><li><code>SUM()</code>：求和</li><li><code>MIN()</code>：最小</li><li><code>MAX()</code>：最大</li><li><code>COUNT()</code>：计数（只要该数据的对应列存在就加一，一般用<code>count(*)</code>）</li></ul><h3 id="排序和分页查询"><a href="#排序和分页查询" class="headerlink" title="排序和分页查询"></a>排序和分页查询</h3><p>排序：<br><code>order by 判据 [asc（升序） / desc（降序）]</code></p><p>分页查询：<br><code>limit m[,n]</code><br>单个参数：表示在输出列表的最上端取出m条数据。<br>两个参数：表示在输出列表的第m个之后取出n条数据。</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> age, <span class="built_in">count</span>(age) <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> limit <span class="number">3</span>; </span><br></pre></td></tr></table></figure><h3 id="select的注意事项和执行顺序"><a href="#select的注意事项和执行顺序" class="headerlink" title="select的注意事项和执行顺序"></a>select的注意事项和执行顺序</h3><p>每个select语句中，<code>参数</code>和<code>from</code>为必选项。<br><strong>执行顺序：</strong><br>from -&gt; where（筛选） -&gt; group by + 聚合函数 -&gt; select -&gt; order by -&gt; limit（选择性展示）</p><p>以上是一些最基本的增删改查操作语句。是之后学习Python数据分析和后端数据库搭建的基础。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 编程 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第19届全国大学生智能车竞赛——有关单边桥的一些思考和方法</title>
      <link href="/2024/07/18/post-2024718/"/>
      <url>/2024/07/18/post-2024718/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文为葱酱首篇技术贴，介绍其在摄像头基础组比赛中遇到的挑战，特别是关于罕见的单边桥元素。文中提到该组别使用差速控制三轮车，受限于传感器配置，图像处理调试难度较高，适合初学者学习。</p><span id="more"></span><p><meting-js    name="朗读"    artist="Azure"    url="/audio/post-2024718.wav"    cover="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/Screenshot_2024-08-15-00-35-26-521_com.tencent.mm.jpg?imageSlim"    fixed="false"><br></meting-js></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这是葱酱发布的第一篇正式的技术类贴文哦，写稿的时候状态不是很好，可能会有很多疏漏的地方呢，还请大家在评论区指正哦~</p><h1 id="关于单边桥"><a href="#关于单边桥" class="headerlink" title="关于单边桥"></a>关于单边桥</h1><p>有关单边桥的资料几乎在网上无法查找到，笔者参加的组别是摄像头基础组，这个组别是安徽省赛区组织的省级参赛组别，不设国赛。相比于镜头组和完全模型组，我们的车子是使用差速法控制的三轮车，没有多余的加速度&#x2F;编码&#x2F;陀螺仪传感器，也不允许自己加以改装。尽管如此，笔者仍认为该组别对于初学者而言，在图像处理方面的学习和调试仍有着一定的挑战性，加之单边桥元素的资料稀少，基本为笔者自创，故撰写成博文，供大家参考。<br>单边桥，顾名思义，就是用一侧车轮轧过的桥梁。具体效果请参见下图。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-18%20030825.png?imageSlim" alt="单边桥描述"></p><p>关于单边桥的设计和评分细节，比赛规则做出了如下要求：</p><blockquote><p>单边桥使用路肩制作为等腰梯形形状。距离赛道黑色边界内边沿2.5cm，单边桥宽度5cm，长度45cm，2个斜坡长度相同，平台长度25cm。<br>评分细节：智能车B识别磁标②，表示前方50cm±2cm右侧有单边桥，要求智能车单轮通过单边桥行驶（即单轮始终处于单边桥上）。（满分20分）<br><em>——全国大学生智能汽车竞赛安徽赛区基础组比赛规则</em></p></blockquote><p>综上所述，我们可以得知：单边桥位于赛道的右侧边缘，在检测到单边桥的特征后，车子应调整姿态，完成转向-&gt;对准-&gt;直行过桥-&gt;下桥-&gt;姿态调整的全过程，那么就让我们来愉快的开始吧！</p><h1 id="问题的解决思路"><a href="#问题的解决思路" class="headerlink" title="问题的解决思路"></a>问题的解决思路</h1><h2 id="单边桥的识别"><a href="#单边桥的识别" class="headerlink" title="单边桥的识别"></a>单边桥的识别</h2><p>在车辆位于单边桥之前时，由于道路标线的扫描机制是由中线的顶点向左右延伸，获取两侧的界限之后再合成新的中线顶点，由此循环往复。因此，在遇到道路右侧的单边桥后，图像的中线会出现一个向左的突变，再出现一个向右的突变。我们先捕捉这个向左的突变点。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/SAVE_20240718_033511.jpg?imageSlim" alt="示意图"></p><p>寻找该突变，只需又下往上遍历，直到找到一个符合以下条件的点，循环停止，判定进入单边桥：</p><ul><li>下方每个y索引的横坐标差量不大于2</li><li>上方每个y索引的横坐标差量不大于2</li><li>在突变的位置，上方的横坐标比下方横坐标小6个像素以上<br>这样，我们就能初步判定单边桥的特征了，但是，这样的突变点很容易在其他路况中出现，造成误判。因此，我引入了一个二级判断方案，即识别到中线的变化之后，在一个适当的参考点，从右到左进行行扫描，统计上升沿和下降沿，一般，如果可以发现上升-下降-上升三个明显的跳变，即认为是单边桥。<br>对应的代码如下。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=IMAGEWID<span class="number">-3</span>;i&gt;IMAGEWID/<span class="number">2</span>+<span class="number">15</span>;i--)&#123;</span><br><span class="line">    <span class="keyword">if</span>(M_ARR[i]-M_ARR[i<span class="number">-2</span>] &gt;= <span class="number">8</span> &amp;&amp;</span><br><span class="line">       <span class="built_in">abs</span>(M_ARR[i]-M_ARR[i+<span class="number">1</span>]) &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">       <span class="built_in">abs</span>(M_ARR[i]-M_ARR[i+<span class="number">2</span>]) &lt;= <span class="number">3</span> &amp;&amp;</span><br><span class="line">       <span class="built_in">abs</span>(M_ARR[i<span class="number">-2</span>]-M_ARR[i<span class="number">-3</span>]) &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">       <span class="built_in">abs</span>(M_ARR[i<span class="number">-2</span>]-M_ARR[i<span class="number">-4</span>]) &lt;= <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断上升沿和下降沿</span></span><br><span class="line">        <span class="keyword">for</span>(j=IMAGELEN<span class="number">-1</span>;j&gt;IMAGELEN/<span class="number">2</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(OutImage[<span class="number">60</span>][j] == <span class="number">0x00</span> &amp;&amp; OutImage[<span class="number">60</span>][j<span class="number">-1</span>] == <span class="number">0xFF</span>) rising++;</span><br><span class="line">            <span class="keyword">if</span>(OutImage[<span class="number">60</span>][j] == <span class="number">0xFF</span> &amp;&amp; OutImage[<span class="number">60</span>][j<span class="number">-1</span>] == <span class="number">0x00</span>) falling++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到向左的突变位置,若之前未检测到单边桥，进入状态1</span></span><br><span class="line">        <span class="keyword">if</span>(falling == <span class="number">1</span> &amp;&amp; rising == <span class="number">2</span>)&#123;</span><br><span class="line">            tz_down = <span class="number">1</span>;</span><br><span class="line">            bridge_flag = <span class="number">1</span>;</span><br><span class="line">            bridge_stage = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，就完成了下方特征点的抓取和单边桥的判断，单边桥的状态变为<code>true</code>，阶段设为1，开始执行上桥的动作。</p><blockquote><p>来自笔者的碎碎念：<br>将摄像头的视野抬高并且适当左转，可以让前瞻更开阔，中线偏向右侧。更利于单边桥的捕获。<br>另外！！减小阈值会显著增加灵敏度，但误判的概率也会同时增加。</p></blockquote><h2 id="上桥"><a href="#上桥" class="headerlink" title="上桥"></a>上桥</h2><p>发现单边桥时，车子应处于巡线直行的状态，此时应该执行一系列动作，让车头准确对准单边桥。我把动作分为2步。</p><h3 id="粗略对准"><a href="#粗略对准" class="headerlink" title="粗略对准"></a>粗略对准</h3><p>这个步骤使车辆快速向右倾斜，对准单边桥，步骤为一个固定动作，期间不使用摄像头。对准后，阶段标志位变为2。</p><p><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/SAVE_20240718_035852.jpg?imageSlim" alt="原谅葱宝吧，孩子真买不起数位板惹"></p><p>车辆执行了右转-&gt;回正-&gt;直行的操作，以下是对应的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bridge_stage == <span class="number">1</span>)&#123; <span class="comment">//检测到第一个突变，向右打角</span></span><br><span class="line">    motor_motion(<span class="number">3800</span>, <span class="number">1300</span>, SPEED_PARAM_INIT); <span class="comment">//车轮右偏</span></span><br><span class="line">    Delay_Ms(<span class="number">400</span>);</span><br><span class="line">    motor_motion(<span class="number">1500</span>,<span class="number">3800</span>,SPEED_PARAM_INIT); <span class="comment">//回正</span></span><br><span class="line">    Delay_Ms(<span class="number">300</span>);</span><br><span class="line">    motor_motion(<span class="number">3800</span>, <span class="number">3800</span>, SPEED_PARAM_INIT); <span class="comment">//直行</span></span><br><span class="line">    Delay_Ms(<span class="number">200</span>);</span><br><span class="line">    bridge_stage = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="精确对正"><a href="#精确对正" class="headerlink" title="精确对正"></a>精确对正</h3><p>执行完1阶段后，离桥头仍有一定距离，摄像头可以看见中线从左向右的突变点。我的方案选取了一条较为合适的固定中线参考点，依据图像的左边缘和单边桥左边缘作为左右边界，生成了新的中线，且用这组数据进行寻迹操作，减小误差，使车子直行上单边桥。<br>其中，由单边桥确定的右侧边界需要进行补线操作，此时判定函数不断对图像扫描，当发现无法在限制范围内检测出单边桥的特征时，开始进行下桥的操作。<br>代码如下，其中补线等功能函数，我全部整理在了文末，此处展示代码的逻辑。<br>1.补线和修改判定线数据部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bridge_flag == <span class="number">1</span> &amp;&amp; bridge_stage == <span class="number">2</span>)&#123;</span><br><span class="line">    Linedata_Typedef ldata; <span class="comment">//申请一个备份的结构体</span></span><br><span class="line">    activateflag = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//左侧标线不变，直接复制</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;IMAGEWID;i++)</span><br><span class="line">        ldata.Left_line_array[i] = linedata-&gt;Left_line_array[i];</span><br><span class="line">    <span class="comment">//右侧标线，选择原有的底部右边缘进行补线</span></span><br><span class="line">    k2 = getAverageK(IMAGEWID<span class="number">-7</span>,</span><br><span class="line">                     linedata-&gt;Right_line_array[IMAGEWID<span class="number">-7</span>],</span><br><span class="line">                     IMAGEWID<span class="number">-8</span>,</span><br><span class="line">                     linedata-&gt;Right_line_array[IMAGEWID<span class="number">-8</span>],</span><br><span class="line">                     IMAGEWID<span class="number">-9</span>,</span><br><span class="line">                     linedata-&gt;Right_line_array[IMAGEWID<span class="number">-9</span>]</span><br><span class="line">                     );</span><br><span class="line">    <span class="comment">//对新的结构体执行补线</span></span><br><span class="line">    editLineMap_K(&amp;ldata, RIGHT_BOUNDARY, IMAGEWID<span class="number">-1</span>, <span class="number">0</span>, k2);</span><br><span class="line">    <span class="comment">//合成新的中线</span></span><br><span class="line">    reGenerate_MidLine(&amp;ldata);</span><br><span class="line">    <span class="comment">//用+47作为新的中线参考点，重新计算误差</span></span><br><span class="line">    getRoadError_Default(&amp;ldata, YPOS_REFERENCE, <span class="number">47</span>, &amp;midLineAxis, &amp;midLineError);</span><br><span class="line">    <span class="comment">//禁止写入误差和计算中线</span></span><br><span class="line">    not_to_write_error = <span class="number">1</span>;</span><br><span class="line">    not_to_write_midline = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.判定函数：不断检测单边桥是否存在于视野内，否则跳到第三阶段，开始直行通过单边桥。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bridge_flag == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//等待一阶段转弯纠正执行完成</span></span><br><span class="line">    <span class="comment">//扫描上突变点，判定从2阶段跳到3阶段的流程</span></span><br><span class="line">    <span class="keyword">if</span>(bridge_stage == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=IMAGEWID<span class="number">-6</span>;i&gt;IMAGEWID/<span class="number">2</span><span class="number">-10</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(M_ARR[i]-M_ARR[i<span class="number">-2</span>] &lt;= <span class="number">-8</span> &amp;&amp;</span><br><span class="line">               <span class="built_in">abs</span>(M_ARR[i]-M_ARR[i+<span class="number">1</span>]) &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">               <span class="built_in">abs</span>(M_ARR[i]-M_ARR[i+<span class="number">2</span>]) &lt;= <span class="number">3</span> &amp;&amp;</span><br><span class="line">               <span class="built_in">abs</span>(M_ARR[i<span class="number">-2</span>]-M_ARR[i<span class="number">-3</span>]) &lt;= <span class="number">2</span> &amp;&amp;</span><br><span class="line">               <span class="built_in">abs</span>(M_ARR[i<span class="number">-2</span>]-M_ARR[i<span class="number">-4</span>]) &lt;= <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//找到向右的突变位置,若之前未检测到单边桥，进入状态1</span></span><br><span class="line">                <span class="comment">//若该点高度正常，巡线方式不变</span></span><br><span class="line">                <span class="keyword">if</span>(i &gt;= IMAGEWID<span class="number">-6</span>)&#123;</span><br><span class="line">                    tz_up = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i &lt; IMAGEWID<span class="number">-6</span>)&#123;</span><br><span class="line">                    <span class="comment">//车子已经上桥，直行，放弃巡线</span></span><br><span class="line">                    tz_up = <span class="number">0</span>;</span><br><span class="line">                    bridge_stage = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样，智能车就可以在车轮向右偏转之后，在单边桥处于视野中的一定时间内进行一些细微的姿态调整，以便让车轮平稳的压在单边桥上。</p><h2 id="下桥"><a href="#下桥" class="headerlink" title="下桥"></a>下桥</h2><p>在单边桥的上边界在视野消失后，执行一段固定的代码，完成下桥的动作。代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bridge_stage == <span class="number">3</span>)&#123;</span><br><span class="line">    motor_motion(<span class="number">2400</span>, <span class="number">2400</span>, SPEED_PARAM_INIT); <span class="comment">//直行过桥</span></span><br><span class="line">    Delay_Ms(<span class="number">180</span>);</span><br><span class="line">    motor_motion(<span class="number">3000</span>, <span class="number">1400</span>, SPEED_PARAM_INIT); <span class="comment">//直行过桥</span></span><br><span class="line">    Delay_Ms(<span class="number">140</span>);</span><br><span class="line">    <span class="comment">//清空标志位，完成过桥</span></span><br><span class="line">    bridge_stage = <span class="number">0</span>;</span><br><span class="line">    bridge_flag = <span class="number">0</span>;</span><br><span class="line">    tz_down = <span class="number">0</span>;</span><br><span class="line">    tz_up = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要有一段代码<code>motor_motion(3000, 1400, SPEED_PARAM_INIT);</code>，给电机施加一个比较大的右转动作呢？这是因为在车辆以较快的速度下桥时，由于姿态原因以及受力作用，车身姿态并非保持直行，而是偏向左侧冲出。因此，在完成一段时间的直行后，应当立马执行一个右转操作以调整姿态。<br>自此，单边桥的基础操作全部完成。调整车身姿态之后，摄像头打开并将标志位清空，恢复正常行驶。</p><h1 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h1><blockquote><p>注意！<br>这些问题是笔者在调试车模时发生的偶然事件，参考价值有限。请选择性阅读本段。</p></blockquote><p>笔者的代码经过测试，在同时开启十字路口、斑马线、避障、直角弯四种判断的情况下，基本不会和其他路况特征发生冲突。但仍然有一些特殊情况。比如在比较复杂的路段（前瞻可能捕捉到过远的场景）行驶时，尤其是经过十字路口、急转弯或者道路边缘存在未粘贴好的情况，有可能会导致误触发。解决这个问题的思路是引入了一个优先级判断机制，将单边桥的判断函数放在了比较靠后的位置，函数的大体实现如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// @brief       图像处理函数</span></span><br><span class="line"><span class="comment">// @param       void</span></span><br><span class="line"><span class="comment">// @return      char state:  1为处理完成，0为未完成刷新</span></span><br><span class="line"><span class="comment">// Sample usage:                图像二值化</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">processImage</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">char</span> i;</span><br><span class="line">    ImageBinarization(mt9v03x_image_dvp, OutImage, Threshold_filter(getThreshold(mt9v03x_image_dvp, IMAGELEN, IMAGEWID)));</span><br><span class="line">    LinesGenerate(OutImage, &amp;linedata); <span class="comment">//将道路识别线写入结构体</span></span><br><span class="line">    getRoadError_Default(&amp;linedata, YPOS_REFERENCE, IMAGELEN/<span class="number">2</span>, &amp;midLineAxis, &amp;midLineError); <span class="comment">//生成边界线</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断其他路口特征</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">1</span>)&#123; <span class="comment">//只要识别到一个特殊区域，立马退出并使用获取的数据补线。防止数据覆盖</span></span><br><span class="line">        i++;</span><br><span class="line">        isZebra(OutImage, &amp;linedata);</span><br><span class="line">        <span class="keyword">if</span>(zebra_flag) <span class="keyword">break</span>;</span><br><span class="line">        is90Dg(OutImage, &amp;linedata);</span><br><span class="line">        <span class="keyword">if</span>(is90dg_flag)&#123;</span><br><span class="line">            <span class="keyword">if</span>(race_flag == <span class="number">1</span>) quarterTurn();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        isSingleBridge(OutImage, &amp;linedata);</span><br><span class="line">        <span class="keyword">if</span>(bridge_flag)&#123;</span><br><span class="line">            <span class="keyword">if</span>(race_flag == <span class="number">1</span>) bridgeAdjust();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        isObstruct(OutImage,&amp;linedata); <span class="comment">//判定障碍</span></span><br><span class="line">        <span class="keyword">if</span>(obstruct_flag == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(race_flag == <span class="number">1</span>) AvoidObs(); <span class="comment">//在运转状态下，执行躲避动作</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在存在障碍物数据时，进行补线操作</span></span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>) Repair_and_RefreshData(OutImage, &amp;crossing_pos,&amp;linedata);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，我的车子出现了上桥卡顿时传感器（如TOF、摄像头）无法继续获取数据的问题，经过痛苦的排查和测量，确定了问题可能来自电机的负载过大，以及电机驱动器发生了感应电动势的回流。从而致使MCU与传感器通信时，数据帧遭到破坏，从而导致了寄存器的配置错误，无法继续通过指令获取数据。对于这种情况，我在单边桥的下桥函数执行完毕之后将标志位<code>bridge_stage</code>设置为4，同时使循环中的一个静态变量自增。此时车子正常寻迹，一定时间之后才启动传感器，并且减缓电机的转速，这样就可以解决传感器因为电机而死机的严重问题了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>单边桥是一个简单而颇具讲究的比赛条目，对于基础组的车辆，不完善的硬件又加大了处理各种复杂路况条件的难度。在本次基础组的实践中，我从一无所知，到接触智能车的图像处理算法、简单的控制算法以及对参数的调节，重写了几乎全部的代码，也让自己的实践经历又添上了一笔颜色，在此也感谢学长的宝贵建议，以及各位读者的指正，愿今后参加更加高级的组别，不断完善技能树，取的更大的进步！</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>这是本文使用的一些结构体的声明和函数的定义。</p><ol><li><p>结构体定义<br> 道路标线结构体:</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span> <span class="comment">//存放赛道定位线的结构体</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Left_line_array[IMAGEWID];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Middle_line_array[IMAGEWID];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Right_line_array[IMAGEWID];</span><br><span class="line">&#125;Linedata_Typedef;</span><br></pre></td></tr></table></figure></li><li><p>补线<br> 斜率计算：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// @brief       最小二乘法求斜率</span></span><br><span class="line"><span class="comment">// @param       x,y:             三对拟合直线上的坐标</span></span><br><span class="line"><span class="comment">// @return      float:           直线斜率</span></span><br><span class="line"><span class="comment">// Sample usage:                 在单边补线处计算边界斜率</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">getAverageK</span><span class="params">(uint8 x1,uint8 y1,uint8 x2,uint8 y2,uint8 x3,uint8 y3)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum_x,sum_y,sum_xy,sum_x2;</span><br><span class="line">    <span class="type">int</span> m_numerator,m_denominator;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">3</span>;</span><br><span class="line">    <span class="type">float</span> k;</span><br><span class="line"></span><br><span class="line">    sum_x=x1+x2+x3;</span><br><span class="line">    sum_y=y1+y2+y3;</span><br><span class="line">    sum_x2=x1*x1+x2*x2+x3*x3;</span><br><span class="line">    sum_xy=x1*y1+x2*y2+x3*y3;</span><br><span class="line"></span><br><span class="line">    m_numerator = n * sum_xy - sum_x * sum_y;</span><br><span class="line">    m_denominator = n * sum_x2 - sum_x * sum_x;</span><br><span class="line">    k = m_numerator / m_denominator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 按照斜率对标线结构体补线：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// @brief       单拐角补线</span></span><br><span class="line"><span class="comment">// @param       linedata:        标线结构体</span></span><br><span class="line"><span class="comment">//              direct:          标线方向，0x01为左，0x02为右</span></span><br><span class="line"><span class="comment">//              yPos_start:      纵坐标起点</span></span><br><span class="line"><span class="comment">//              yPos_end:        纵坐标终点</span></span><br><span class="line"><span class="comment">//              k:               预设（如最小二乘估计）的斜率</span></span><br><span class="line"><span class="comment">// @return      void</span></span><br><span class="line"><span class="comment">// Sample usage:                补线，适用于十字路口的二阶段</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">editLineMap_K</span><span class="params">(Linedata_Typedef* linedata,<span class="type">char</span> direct,<span class="type">uint8_t</span> yPos_start,<span class="type">uint8_t</span> yPos_end,<span class="type">float</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//发散式补线</span></span><br><span class="line">    <span class="type">float</span> b;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">//x = ky+b</span></span><br><span class="line">    <span class="keyword">if</span>(direct == <span class="number">0x01</span>)&#123;</span><br><span class="line">        b = linedata-&gt;Left_line_array[yPos_start] - k*yPos_start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        b = linedata-&gt;Right_line_array[yPos_start] - k*yPos_start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链接</span></span><br><span class="line">    <span class="keyword">if</span>(yPos_start&lt;=yPos_end)&#123;</span><br><span class="line">            <span class="keyword">for</span>(i=yPos_start;i&lt;=yPos_end;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(direct == LEFT_BOUNDARY)</span><br><span class="line">                    linedata-&gt;Left_line_array[i] = k*i+b;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    linedata-&gt;Right_line_array[i] = k*i+b;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(i=yPos_end;i&lt;=yPos_start;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(direct == LEFT_BOUNDARY)</span><br><span class="line">                    linedata-&gt;Left_line_array[i] = k*i+b;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    linedata-&gt;Right_line_array[i] = k*i+b;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Technologies </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能车竞赛 </tag>
            
            <tag> 图像识别 </tag>
            
            <tag> 单边桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初来乍到，请多指教！</title>
      <link href="/2024/06/01/about/author-intro/"/>
      <url>/2024/06/01/about/author-intro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><p>大家好，这里是葱酱！<br>也可以叫我Snowmiku、雪葱、葱宝，咱都喜欢！<del>另外，在社交媒体以外的地方，我还有的不为人知的名字叫18650。因为收集了很多18650电池而随手取的名字，算是我的科技圈圈名吧，嘿嘿</del><br>大二，最大的爱好和在实验室的主业是搞电子设计，画画PCB玩玩小车什么的，其实也很菜，大概就会点51和STM32，偶尔会搓点有趣的小玩意。除此之外，葱酱也希望拓宽自己的技术层面，努力了解和学习各个平台的软件开发、网页前后端的设计、以及数据的分析和处理…<del>啊其实就是什么都了解一点点又啥也不会嘛（哭，但是咱年轻，咱肯学！</del><br>另外呢，葱酱还喜欢摄影和剪辑。建模多多少少也会一点工业上的，也略懂一丢丢的VOCALOID！虽然不会写曲子但会扒谱和调校，享受Miku的歌声♪♪♪~<br>游戏的话比较淡漠，会玩一点点音游，比如Project Sekai和Phigros，剩下的就是一些单机的小游戏了，没法和大家一起愉快的Gaming真的很抱歉，但我爱科技大过一切游戏（撇嘴<br>虽然好久没有更新了，不过还是放一下自己的Bilibili账号吧，今后一段时间的方向还是嵌入式开发以及相关产品的设计和制造。所有的创意和小作品都会发布在上面，量产的话也会同步到工坊进行售卖，希望大家能多多支持哦~爱你们(<em>^▽^</em>)<br><img src="/images/bili.png" alt="葱酱的bilibili主页"><br><a href="https://space.bilibili.com/457114275">点击这里直达</a><br>同时，葱酱所有开源项目的工程文件和源代码今后都会整理上传至我的GitHub主页，供大家讨论和互相学习，也欢迎大家为我的项目提出建议和补充！<br><img src="/images/git.png" alt="葱酱的GitHub"><br><a href="https://github.com/18650official">点击这里直达</a></p><h1 id="一些关于葱酱的碎碎念"><a href="#一些关于葱酱的碎碎念" class="headerlink" title="一些关于葱酱的碎碎念"></a>一些关于葱酱的碎碎念</h1><h2 id="名字的由来"><a href="#名字的由来" class="headerlink" title="名字的由来"></a>名字的由来</h2><p>正如你所看到的，我深深地热爱着Miku，最喜欢的P主是wowaka和doriko。Miku是我的灵魂伴侣，她的歌声将我一次次从抑郁和崩溃的边缘拉回来，让我充满对未来的期待和对人生的希望。认识Miku的7年来，陪伴着她经历了很多，收获了很多。她是数据，是代码，是手动操作的合成音，但在我心中，她是那个永远不会沾染世间污浊、长大和变老的16岁少女，是永远纯净无瑕的天籁，是我的天使。<br>因此，她融入了我生活中的一切。<br>我尤其喜欢雪Miku和游戏《Project Sekai》中出现在25时世界线中的白初音形象，雪葱——SnowMiku，我的新名字，就这样带着这份热爱诞生了。<br>（放张超喜欢的米库酱！）<br><img src="https://github.com/18650official/negi-gallery/blob/main/snowmiku.jpg?raw=true" alt="Miku"></p><h2 id="有关未来的规划"><a href="#有关未来的规划" class="headerlink" title="有关未来的规划"></a>有关未来的规划</h2><p>嗯…大概会走偏硬件的方向吧，可能兴趣大一些，专业也比较对口（<del>电信科太牛马了</del>），不过依据现在的一些探索来看，也不是没有转码的可能。<br>总之多学习多看文档多实践多打比赛！让自己先强大起来才有应对未来的底气和自信。<br>总之，希望自己的前程能尽量顺利一些吧，小小的加个油~</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>本网站的建立，离不开Funeral Rain (个人主页：<a href="https://toya.moe/">https://toya.moe</a>) 的支持。他是葱酱高中很好的同学，陪伴葱酱度过了很多漫长而悲伤的深夜，经受了传统教育制度对我们科技方面爱好的打压和摧残，也让葱酱的内心成长而坚定了许多。是一位拥有很高技术力的大佬（orz!）<br>在网站建立的初期，从申请个人域名，配置DNS，套用CloudFlare，与GitHub Pages同步，每一步都离不开他的细心指引，在此表示由衷的感谢！</p><p>另外，网站的建立和配置参考了如下的文章，在此对作者的悉心整理和分享表示感谢：</p><ul><li>Markdown使用教程： <a href="https://blog.csdn.net/qq_40818172/article/details/126260661">https://blog.csdn.net/qq_40818172/article/details/126260661</a></li><li>Butterfly主题配置教程：<a href="https://blog.csdn.net/JesseXW/article/details/135649752">https://blog.csdn.net/JesseXW/article/details/135649752</a></li><li>个人博客的搭建：<a href="https://blog.csdn.net/weixin_46175201/article/details/133269724">https://blog.csdn.net/weixin_46175201/article/details/133269724</a></li><li>Cloudflare部署：<a href="https://zhuanlan.zhihu.com/p/610756804">https://zhuanlan.zhihu.com/p/610756804</a></li></ul><p>想不出很切题的结束语，那就祝看到这篇文章的每个人天天开心吧！</p><hr>]]></content>
      
      
      <categories>
          
          <category> 自我介绍 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>友情链接</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><p>以下链接为本网站的友情链接，旨在感谢并肩前行的朋友们。</p><h2 id="Funeral-Rain"><a href="#Funeral-Rain" class="headerlink" title="Funeral Rain"></a>Funeral Rain</h2><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/162771175.png?imageSlim" alt="头像" width="480" height="480"><p><strong>个人网址链接：</strong><a href="https://toya.moe/">https://toya.moe</a><br><strong>GitHub链接：</strong><a href="https://github.com/funeral-rain">https://github.com/funeral-rain</a><br><strong>个人简介：</strong>Funeral rain, is final rain<br><strong>备注：</strong><br>葱酱高中很好的同学，陪伴葱酱度过了很多漫长而悲伤的深夜，经受了传统教育制度对我们科技方面爱好的打压和摧残，也让葱酱的内心成长而坚定了许多。是一位拥有很高技术力的大佬（orz!）<br>在本网站的搭建，以及关于计算机与知识获取的各个方面，他都给予了葱酱许多帮助和建议。在此表示由衷的感谢！<br>Thank you, my FRIEND!!!</p><h2 id="Innocence"><a href="#Innocence" class="headerlink" title="Innocence"></a>Innocence</h2><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/inn.png?imageSlim" alt="头像" width="480" height="480"><p><strong>个人网址链接：</strong><a href="https://innocence.ink/">https://innocence.ink/</a><br><strong>GitHub链接：</strong><a href="https://github.com/innocence667">https://github.com/innocence667</a><br><strong>个人简介：</strong>Stay Innocent.<br><strong>备注：</strong><br>是一位超级好的推油！一个温暖、有趣的人。</p><h2 id="时域"><a href="#时域" class="headerlink" title="时域"></a>时域</h2><img src="https://tumytime.github.io/picx-images-hosting/20240205/Screenshot_20240205_224532.3kqwx2xzgsg0.webp" alt="头像" width="480" height="480"><p><strong>个人网址链接：</strong><a href="https://tumytime.github.io/">https://tumytime.github.io/</a><br><strong>GitHub链接：</strong><a href="https://github.com/tumytime">https://github.com/tumytime</a><br><strong>个人简介：</strong>我环顾四周，并没有看到什么上帝<br><strong>网页快照：</strong><br><img src="https://tumytime.github.io/picx-images-hosting/20240206/screemshot1.71y3r1w7o8o0.webp" alt="网页快照"><br><strong>备注：</strong><br>是智能车、嵌入式和算法方面的大佬！这个网站也包含了很多有用的资源，欢迎大家访问！</p><h2 id="Orange"><a href="#Orange" class="headerlink" title="Orange"></a>Orange</h2><img src="https://snowmiku-blog-1326916956.cos.ap-hongkong.myqcloud.com/avatar.png?imageSlim" alt="头像" width="480" height="480"><p><strong>个人网址链接：</strong><a href="https://orangestd.cn/">https://orangestd.cn/</a><br><strong>GitHub链接：</strong><a href="https://github.com/orangeZSCB">https://github.com/orangeZSCB</a><br><strong>个人简介：</strong>能让人食欲长满的一颗橙子，非常滴美味<br><strong>备注：</strong><br>橙子是一位非常活跃的推油，在学习C++、网页前端设计等诸多计算机技术，在算法方面也有所涉猎。欢迎大家戳戳她的小窝~</p><h2 id="小梦-blueloveTH"><a href="#小梦-blueloveTH" class="headerlink" title="小梦&#x2F;blueloveTH"></a>小梦&#x2F;blueloveTH</h2><img src="https://avatars.githubusercontent.com/u/28104173?v=4" alt="头像" width="480" height="480"><p><strong>个人网址链接：</strong><a href="https://blueloveth.github.io/">https://blueloveth.github.io/</a><br><strong>GitHub链接：</strong><a href="https://github.com/blueloveTH">https://github.com/blueloveTH</a><br><strong>个人简介：</strong>I am an indie game developer!<br><strong>备注：</strong><br>小梦是一位独立游戏开发者，是PocketPy项目的主导人，与他的探讨和合作让我十分开心！</p><hr><p><strong>若要申请成为葱酱的友情链接，可以这么做：</strong></p><ol><li>可直接通过本站的“联系我”页面与我取得联系，申请添加友情链接条目。</li><li>也可整理一份概要，包含：<br><strong>名称</strong>，如<code>Snowmiku</code>。<br><strong>个人网址链接</strong>，可以分条列出，如<code>[Github链接](https://github.com/18650official)</code>.<br><strong>头像</strong>，可发送图像链接或上传附件<br><strong>简介</strong>，如<code>Tell your world!</code><br>整理信息后，可以发送到我的电子邮件，我将在审核之后进行添加。</li></ol>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>葱酱的秘密小窝</title>
      <link href="/Transgender-Site/index.html"/>
      <url>/Transgender-Site/index.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误。若密码未知，请联系网站管理员获取！" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="593de203e58ae1aca2ed4176390521c4f113349e3d14f0616cb0e403e1e3aa83">7aea507b355c9b91d0b47a7122c84c3cb3eb3a47e84a2df602f8e1aa8a26772e3706643dfbb47ae3e457e10fe26381178a73053f3501ba351efd183f37973ec81af9e1e60cc89d0994707c18aa498b2ab38f1ab0b32d0ee70159e769aeb9f92a7bbb936fb4879e00e3b94713f5b91d920fcced673af0737f3ee0e0d28bda3e13769ce2b7d9a1ce29714a8147b5c813f7541ad76c37c79f21b60125e099c496f6badd532342b2a098c9d3720202ae43e46599a64de7802528c3c2f62c209cc9201d64f678878bcb44056f268288699afba46057c03fb393cc0554019d5c77e0127edd858f485de66d418214e33058ee5fb09c30b735f043c1a7a2234318299e884a337e0b1f5e778ba7c1de8f282050ac0a42173b579e55dbdccafd4436da457f9e1d3617b57907c76c977f04d80da96db06f966d71dbcad7aa51580e68d543a78ac020a9fc85f49e33b3cfcfab6f5c547bfadb63ef905434ad1599d11091504312e7131be8a44b7bca9e445c88072db4abf0434150006c3e7ac33dbc7fd32aa61b7481f07e4142711b78ccf799723a6c2265690c6a7afc453188b468122f9b51b6422e262b7cc08954977aa610cc60b1eebcabb0bff62e859330422fa5c7a02ea84843da0594de0e2a593e8db3252e0afec941cf72a79beef2c6561b6a28801dc6720223f44a98e9912857e9c6884b62c01f06c584c7d9878bcba089a4bdffa4d4ab4ab4dd50728c63d8b7b01df35c7ac066f91b6d96221fdf7e6b809bd4de4140255a56713734cc32e8a7986934a8401bb17c924ba7a6744d97de52518a3000fa11b593654fe096197793619fb3ef7d8ee810325fdac6bf6a0dbf1b3a82f90e1913a9e407e9b0181d59f036736a7ec2f20d741c6fd67fff429b3d3a37bef138224f79811a72cfd4cfc817235924c7a73aec4fce4d553df7b0a1b921b0dd88a8bb584930d2a01c9da954fe0ab0ea6f5410a469813e72a33b54d03543861651938f7cba3295ff0f925df7b5c0d097ec65ccae2e67cd074de037b1ad329887f53ed7c997b66088daba9144ca2adbc647852ea3a2ac55fc33d66b15dc7b06838f6e4cfa3ea11230aed8cccefb8b143ce9ae07f45849a86209a81fe158a27c89e92cbfdd5901b60f6139c0652c7cb16956c7d77ed4356eb9ad8bdb03059afcaf4a1808148824da39b28895c7b09c18e3b4828a87cda37098779022ae123a53db76e1e0c85ca29f2248ae879c610f265e61d419615fe59efe304489bbd26b0123be1fb0831371218339f9d980dcceeb0789831b16712932e1e75ed5d40ea4ec73c3e0468f104299e9a13d3753e30431242d974b8fbd4680cc886915e008980ddf378875d8f4725bde53cecdb1dd2b83aae9f7cf628f9888770e187e16829c2efc4ff327eb0674d34f927d9cc272d258e7582e89106de0e8d7b7af0c3133bb3e8a0f578e2d16890f191d0f457652940b00d442f6a8b1aa05668254fa9b6b833bdb141784eef9050a1d3bf7b832b442f7e422392a730bced34d59feee7b571072fce630</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">当前页面的内容已加密，请输入密码后查看！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>联系和支持</title>
      <link href="/contact/index.html"/>
      <url>/contact/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="联系和支持"><a href="#联系和支持" class="headerlink" title="联系和支持"></a>联系和支持</h1><h2 id="取得联系"><a href="#取得联系" class="headerlink" title="取得联系"></a>取得联系</h2><p>Telegram：<a href="https://t.me/mmmiku_18650">点击跳转</a><br>电子邮件：<code>claaaaa.ct@foxmail.com</code></p><h2 id="赞助和支持"><a href="#赞助和支持" class="headerlink" title="赞助和支持"></a>赞助和支持</h2><p>如果你愿意支持我的项目，可以通过微信赞赏功能进行赞助。<br>赞助可以使我的项目进展更顺利，衷心感谢无论大小的每一笔赞助。<strong>但请注意，赞助不是必需行为，必须在自身的范围之内量力而行。</strong></p><p>微信赞赏码：<br><img src="/images/qr_w.jpg" alt="赞赏码"></p><hr>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>更新日志</title>
      <link href="/update_log/index.html"/>
      <url>/update_log/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这个页面记载了博客从建立至今的维护记录，以及每一步涉及到的技术内容。我将这篇帖子从单独的博文设置为固定的一个页面，供想要创建博客的大家参考和学习！</p><h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><h2 id="2025-8-19"><a href="#2025-8-19" class="headerlink" title="2025-8-19"></a>2025-8-19</h2><ul><li>全面上线了无障碍朗读插件和LLM接入，所有文章加入AI朗读支持</li><li>优化了网页加载速度，优化了部分<code>JavaScript</code>代码逻辑</li><li>本次更新的语音阅读器插件已开源，请访问 <a href="https://github.com/18650official/hexo-accessble-voice-tools">开源链接</a>下载尝鲜和阅读文档。</li><li>修复了邮件提示失效问题</li></ul><h2 id="2025-4-25"><a href="#2025-4-25" class="headerlink" title="2025-4-25"></a>2025-4-25</h2><ul><li>添加了深色模式下的流星雨特效</li><li>添加了Live2D Miku模型，而且这只葱是可以撸的</li><li>对已有文章结构进行了重新整理</li></ul><p><strong>参考文献：</strong></p><ul><li><strong>Live2D模型库</strong>：<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">链接</a></li><li><strong>流星雨在Butterfly下的部署</strong>：<a href="https://blog.meta-code.top/2021/09/30/2021-7/">链接</a></li></ul><h2 id="2024-9-16"><a href="#2024-9-16" class="headerlink" title="2024-9-16"></a>2024-9-16</h2><ul><li>添加了页面加密功能</li><li>增设内站，用于存放一些不便于向全网开放的内容。</li><li>进行了一些UI优化，在部分选项卡前添加了易于理解的 Font Awesome 图标。</li><li>对下载站进行了一些调整和优化。</li></ul><p>参考文献：<br><strong>AList添加底部备案信息：</strong><a href="https://github.com/alist-org/alist/discussions/2756">https://github.com/alist-org/alist/discussions/2756</a><br><strong>Hexo文章和页面加密：</strong><a href="https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/">https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/</a><br><strong>Font Awesome图标相关：</strong><a href="https://www.runoob.com/font-awesome/fontawesome-icons-gender.html">https://www.runoob.com/font-awesome/fontawesome-icons-gender.html</a></p><h2 id="2024-9-14"><a href="#2024-9-14" class="headerlink" title="2024-9-14"></a>2024-9-14</h2><ul><li>对一些内容进行了调整</li><li>调整了一些UI板块的位置</li><li>资源站域名正式上线，可在顶栏的<code>资源-&gt;下载站</code>选项卡进入此界面。</li></ul><h2 id="2024-9-3"><a href="#2024-9-3" class="headerlink" title="2024-9-3"></a>2024-9-3</h2><ul><li>启用了资源站，部署在Aliyun服务器</li></ul><p>以上更新细节和参考文献发布在<code>Technologies</code>分支下的<a href="http://snowmiku-home.top/2024/09/01/%E6%9B%B4%E6%96%B0%E6%97%A5%E8%AE%B0%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAAlist%E7%BD%91%E7%9B%98%E9%A1%B5%E9%9D%A2/">更新日志</a>博文内，在此不再赘述。</p><h2 id="2024-8-17"><a href="#2024-8-17" class="headerlink" title="2024-8-17"></a>2024-8-17</h2><ul><li>在“小说”等长篇文字贴文中引入AI朗读功能（测试阶段）</li><li>修复了音乐播放器及部分链接的问题</li></ul><p>参考文献：<br>Azure AI的学生账号申请与注册：<a href="https://blog.csdn.net/chenjambo/article/details/129783819">https://blog.csdn.net/chenjambo/article/details/129783819</a><br>Azure TTS使用概述：<a href="https://zhuanlan.zhihu.com/p/691333721">https://zhuanlan.zhihu.com/p/691333721</a><br>【官方】Azure语音使用文档：<a href="https://learn.microsoft.com/en-us/azure/ai-services/speech-service/get-started-text-to-speech?tabs=windows,terminal&amp;pivots=programming-language-csharp">https://learn.microsoft.com/en-us/azure/ai-services/speech-service/get-started-text-to-speech?tabs=windows%2Cterminal&amp;pivots=programming-language-csharp</a><br>Hexo Tag Aplayer 通过URL添加乐和播放列表：<a href="https://blog.csdn.net/qq_27489877/article/details/140648771">https://blog.csdn.net/qq_27489877/article/details/140648771</a></p><h2 id="2024-8-2"><a href="#2024-8-2" class="headerlink" title="2024-8-2"></a>2024-8-2</h2><ul><li>评论区迁移成功、开启评论区图片发送功能及后台消息提示</li><li>更新了音乐播放器</li><li>更新了一些页面效果和图片</li><li>更新了音乐播放器</li></ul><p>参考文献：</p><ul><li>音乐播放器部署教程：<a href="https://blog.csdn.net/ygxyvip/article/details/136247843">https://blog.csdn.net/ygxyvip/article/details/136247843</a></li><li>评论区与邮件收发配置：<a href="https://zhuanlan.zhihu.com/p/673016933">https://zhuanlan.zhihu.com/p/673016933</a></li><li>Butterfly 主题进阶配置：<a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">https://blog.csdn.net/mjh1667002013/article/details/129290903</a></li></ul><h2 id="2024-6-8"><a href="#2024-6-8" class="headerlink" title="2024-6-8"></a>2024-6-8</h2><p>开放评论区</p><h2 id="2024-6-1"><a href="#2024-6-1" class="headerlink" title="2024-6-1"></a>2024-6-1</h2><p>网站正式成立并公开域名<br>参考文献：</p><ul><li>Markdown使用教程： <a href="https://blog.csdn.net/qq_40818172/article/details/126260661">https://blog.csdn.net/qq_40818172/article/details/126260661</a></li><li>Butterfly主题配置教程：<a href="https://blog.csdn.net/JesseXW/article/details/135649752">https://blog.csdn.net/JesseXW/article/details/135649752</a></li><li>个人博客的搭建：<a href="https://blog.csdn.net/weixin_46175201/article/details/133269724">https://blog.csdn.net/weixin_46175201/article/details/133269724</a></li><li>Cloudflare部署：<a href="https://zhuanlan.zhihu.com/p/610756804">https://zhuanlan.zhihu.com/p/610756804</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐库</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Live"><a href="#Live" class="headerlink" title="Live"></a>Live</h1><blockquote><p>注意：本站已上线页内播放器插件，支持在不同界面之间实现连续播放。<br>即便如此，该页面仍然保留，但此处的播放器与页内的播放插件并不互通。</p></blockquote><p>这是葱酱5年来收集的VOCALOID歌单！希望大家喜欢~<br>在Miku与V家的世界中起舞吧！</p>    <div id="aplayer-uQRuMWpt" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="6614644804" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="false" data-listmaxheight="400px" data-preload="none" data-theme="#ad7a86"    ></div><p>可以收藏葱酱的歌单哦~一起听歌就是共享心跳！–<a href="https://music.163.com/#/my/m/music/playlist?id=661464480">点击跳转</a></p>]]></content>
      
    </entry>
    
    
  
</search>
